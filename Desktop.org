#+title: Emacs Desktop Environment
#+author: Philippe Gabriel
#+property: header-args    :tangle-mode (identity #o444)
#+property: header-args:sh :tangle-mode (identity #o555)

* Window Management

Various settings and packages to alllow emacs to act as the operating system.

** Package | app-launcher

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (straight-use-package '(app-launcher :host github
                                       :repo "SebastienWae/app-launcher"))
  (require 'app-launcher)

#+end_src

** Package | exwm

Many useful keybindings to know:

Managing windows:
- ~M-&~ - Launch a process asy/nchronously
- ~s-t~ - Binding from EXWM to launch without popup
- ~exwm-floating-toggle-floating~ - Floating windows
- ~exwm-layout-toggle-fullscreen~ - Fullscreen
- ~s-SPC~ - Select an app to open

Workspaces:
- ~s-(0-9)~ - Switch to numbered workspace (=~= can also be used instead of ~0~)
- ~s-w~ - Workspace selector
- ~C-c RET~ - Move window to numbered workspace (EXWM windows are attached to a single workspace)
- ~C-x B~ - Move to any buffer across all workspaces

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (defun pg/exwm-update-class ()
    "Sets buffer names to be app names."
    (exwm-workspace-rename-buffer exwm-class-name))

  (defun pg/configure-window-by-class ()
    "Per application configuration."
    (pcase exwm-class-name
      ("qutebrowser" (exwm-layout-hide-mode-line))
      ("mpv" (exwm-layout-hide-mode-line))
      ("Godot" (exwm-floating-toggle-floating))
      ("org.ppsspp.PPSSPP" (exwm-layout-hide-mode-line))
      ("edu-mit-csail-sdg-alloy4whole-Alloy" (exwm-layout-hide-mode-line))))

  (defun pg/run-in-background (command)
    "Runs a process in the background."
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun pg/herd-service (service)
    "Starts herd process."
    (start-process-shell-command "herd" nil (concat "herd start " service)))

  (defun pg/set-wallpaper ()
    "Sets desktop wallpaper."
    (interactive)
    (pg/herd-service "feh"))

  (defun pg/update-displays ()
    "Multiple display management."
    (interactive)
    (pg/herd-service "autorandr")
    ;; Change this with respect to the different screen configuration
    ;; Check arandr for display names
    (customize-set-variable 'exwm-randr-workspace-monitor-plist
                            (pcase (string-trim (shell-command-to-string "autorandr --detected"))
                              ("work" '(5 "HDMI-1"))
                              ("work+" '(5 "HDMI-1"))
                              ("superwork" '(0 "eDP-1" 1 "DP-1-1" 2 "DP-1-2" 3 "DP-1-2" 4 "DP-1-2" 5 "DP-1-3"))
                              ("family" '(5 "HDMI-1"))))
    (message "Display config: %s"
             (string-trim (shell-command-to-string "autorandr --current"))))

  (defun pg/exwm-startup ()
    "Initializations."
    (pg/start-panel)
    (pg/herd-service "compton")
    (pg/herd-service "dunst")
    (pg/herd-service "nm-applet")
    (pg/herd-service "xss-lock")
    (pg/herd-service "udiskie")
    (pg/herd-service "pasystray")
    (pg/herd-service "xmodmap"))

  (unless pg/is-guix-system
    (straight-use-package 'exwm))
  (require 'exwm)
  (require 'exwm-config)
  (require 'exwm-randr)
  (require 'exwm-input)
  (with-eval-after-load 'exwm

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'pg/exwm-update-class)
    ;; When exwm starts up
    (add-hook 'exwm-init-hook #'pg/exwm-startup)
    ;; Configure launching of some x windows
    (add-hook 'exwm-manage-finish-hook #'pg/configure-window-by-class)

    (pg/customize-set-variables
     `((exwm-workspace-number . 6)
       (exwm-workspace-show-all-buffers . t)
       (exwm-input-prefix-keys . (?\C-x
                                  ?\C-g
                                  ?\C-h
                                  ?\M-x
                                  ?\M-`
                                  ?\M-&
                                  ?\M-:
                                  ?\C-\s))
       ;; Reset to line-mode (C-c C-k switches to char-mode via
       ;; `exwm-input-release-keyboard')
       (exwm-input-global-keys . (([?\s-r] . exwm-reset)

                                  ([?\s-n] . (lambda ()
                                               (interactive)
                                               (pg/dunstctl "history-pop")))

                                  ([?\s-c] . (lambda ()
                                               (interactive)
                                               (pg/dunstctl "close")))

                                  ([?\s-\s] . app-launcher-run-app)

                                  ;; Switch between char and line mode
                                  ([?\s-s] . exwm-input-toggle-keyboard)

                                  ;; Launch applications via shell command
                                  ([?\s-t] . (lambda (command)
                                               (interactive (list (read-shell-command "$ ")))
                                               (start-process-shell-command command nil command)))

                                  ;; Switch workspace
                                  ([?\s-w] . exwm-workspace-switch)

                                  ;; Bind the tilde key to workspace 0 when
                                  ;; switching/creating
                                  ([?\s-`] . (lambda ()
                                               (interactive)
                                               (exwm-workspace-switch-create 0)))

                                  ;; 's-N': Switch to certain workspace with Super
                                  ;; plus a number key (0 - 9)
                                  ,@(mapcar (lambda (i)
                                              `(,(kbd (format "s-%d" i)) .
                                                (lambda ()
                                                  (interactive)
                                                  (exwm-workspace-switch-create ,i))))
                                            (number-sequence 0 9))))
       (exwm-manage-configurations . (((string-equal exwm-class-name "Nyxt") char-mode t)
                                      ((string-equal exwm-class-name "Godot") char-mode t)))))
    (global-set-key (kbd "C-x B") #'exwm-workspace-switch-to-buffer)
    (define-key exwm-mode-map (kbd "C-q") #'exwm-input-send-next-key)

    (pg/update-displays)
    (pg/set-wallpaper)

    (exwm-randr-enable)
    (exwm-enable))

    #+end_src

** Package | desktop-environment

Allows for some of the keybindings to use while in exwm.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (unless pg/is-guix-system
    (straight-use-package 'desktop-environment))
  (with-eval-after-load 'exwm
    (require 'desktop-environment))
  (with-eval-after-load 'desktop-environment
    (pg/customize-set-variables
     '((desktop-environment-brightness-normal-increment . "5%+")
       (desktop-environment-brightness-normal-decrement . "5%-")
       (desktop-environment-music-toggle-command . "mpc toggle")))
    (desktop-environment-mode)
    (if (fboundp 'diminish)
        (diminish #'desktop-environment-mode)
      (with-eval-after-load 'diminish
        (diminish #'desktop-environment-mode))))

#+end_src

** Polybar

Some utility functions.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (defvar pg/polybar-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun pg/kill-panel ()
    "Kills active polybar panel."
    (interactive)
    (when pg/polybar-process
      (ignore-errors
        (kill-process pg/polybar-process)))
    (setq pg/polybar-process nil))

  (defun pg/start-panel ()
    "Starts a polybar panel."
    (interactive)
    (pg/kill-panel)
    (setq pg/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

  (defun pg/send-polybar-hook (module-name hook-index)
    "Displays message using polybar."
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun pg/exwm-workspace-current-index ()
    "Displays current workspace."
    (concat "WS: " (int-to-string exwm-workspace-current-index)))

  (defun pg/send-polybar-exwm-workspace ()
    "Sends workspace information to polybar."
    (pg/send-polybar-hook "exwm-workspace" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'pg/send-polybar-exwm-workspace)

#+end_src

** Dunst

Some utility functions:

- Below are the available ~dunstctl~ commands. Usage: ~dunstctl <command> [parameters]~

| Commands                           | Description                                                                                     |
|------------------------------------+-------------------------------------------------------------------------------------------------|
| ~action~                             | Perform the default action, or open the contexte meny of the notification at the given position |
| ~close~                              | Close the last notification                                                                     |
| ~close-all~                          | Close all notifications                                                                         |
| ~context~                            | Open context menu                                                                               |
| ~history-pop~                        | Pop one notification from history                                                               |
| ~is-paused~                          | Check if dunst is running or paused                                                             |
| ~set-paused [true : false : toggle]~ | Set the pause status                                                                            |
| ~debug~                              | Print debugging information                                                                     |
| ~help~                               | Show this help message                                                                          |

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (defun pg/dunstctl (cmd)
    "Calls dunst special commands."
    (start-process-shell-command "dunstctl" nil (concat "dunstctl " cmd)))

  (defun pg/disable-desktop-notifications ()
    "Stops notifications from popping."
    (interactive)
    (start-process-shell-command "dunstctl" nil "dunstctl set-paused true"))

  (defun pg/enable-desktop-notifications ()
    "Enables notifications to pop."
    (interactive)
    (start-process-shell-command "dunstctl" nil "dunstctl set-paused false"))

#+end_src

* Applications
* Desktop Profile

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (provide 'pg-desktop)

#+end_src
