#+title: Emacs Desktop Environment
#+author: Philippe Gabriel
#+property: header-args    :tangle-mode (identity #o444)
#+property: header-args:sh :tangle-mode (identity #o555)

* Fonts

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; Settings Manager
  (specification->package "xsettingsd")

#+end_src

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/themes-fonts.scm :noweb yes

  (packages->manifest
   (list
    (specification->package "compton")
    (specification->package "fontmanager")

    ;; GTK Themes
    (specification->package "arc-icon-theme")
    (specification->package "matcha-theme")
    (specification->package "hicolor-icon-theme")
    (specification->package "adwaita-icon-theme")
    (specification->package "gnome-backgrounds")
    (specification->package "papirus-icon-theme")
    (specification->package "breeze-icons")

    ;; Fonts
    (specification->package "font-fira-code")
    (specification->package "font-jetbrains-mono")
    (specification->package "font-iosevka")
    (specification->package "font-iosevka-aile")
    (specification->package "font-abattis-cantarell")
    (specification->package "font-dejavu")
    (specification->package "font-google-noto")
    (specification->package "font-gnu-freefont")
    (specification->package "font-gnu-unifont")
    (specification->package "font-liberation")
    (specification->package "font-awesome")
    (specification->package "font-google-material-design-icons")
    (specification->package "font-ghostscript")))

#+end_src

* Window Management

Various settings and packages to alllow emacs to act as the operating system.

** Package | app-launcher

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (straight-use-package '(app-launcher :host github
                                       :repo "SebastienWae/app-launcher"))
  (require 'app-launcher)

#+end_src

** Package | exwm

Many useful keybindings to know:

Managing windows:
- ~M-&~ - Launch a process asy/nchronously
- ~s-t~ - Binding from EXWM to launch without popup
- ~exwm-floating-toggle-floating~ - Floating windows
- ~exwm-layout-toggle-fullscreen~ - Fullscreen
- ~s-SPC~ - Select an app to open

Workspaces:
- ~s-(0-9)~ - Switch to numbered workspace (=~= can also be used instead of ~0~)
- ~s-w~ - Workspace selector
- ~C-c RET~ - Move window to numbered workspace (EXWM windows are attached to a single workspace)
- ~C-x B~ - Move to any buffer across all workspaces

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (defun pg/exwm-update-class ()
    "Sets buffer names to be app names."
    (exwm-workspace-rename-buffer exwm-class-name))

  (defun pg/configure-window-by-class ()
    "Per application configuration."
    (pcase exwm-class-name
      ("qutebrowser" (exwm-layout-hide-mode-line))
      ("mpv" (exwm-layout-hide-mode-line))
      ("PPSSPPSDL" (exwm-layout-hide-mode-line))
      ("edu-mit-csail-sdg-alloy4whole-Alloy" (exwm-layout-hide-mode-line))))

  (defun pg/run-in-background (command)
    "Runs a process in the background."
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun pg/herd-service (service)
    "Starts herd process."
    (start-process-shell-command "herd start" nil (concat "herd start " service)))

  (defun pg/set-wallpaper ()
    "Sets desktop wallpaper."
    (interactive)
    (pg/herd-service "feh"))

  (defun pg/update-displays ()
    "Multiple display management."
    (interactive)
    (pg/herd-service "autorandr")
    ;; Change this with respect to the different screen configuration
    ;; Check arandr for display names
    (customize-set-variable 'exwm-randr-workspace-monitor-plist
                            (pcase (string-trim (shell-command-to-string "autorandr --detected"))
                              ("work" '(5 "HDMI-1"))
                              ("work+" '(5 "HDMI-1"))
                              ("jclab" '(5 "HDMI-1"))
                              ("jb-0305" '(5 "HDMI-1"))
                              ("jb-4205" '(5 "HDMI-1"))
                              ("aa-1140" '(5 "HDMI-1"))
                              ("aa-1340" '(5 "HDMI-1"))
                              ("rg-e310" '(5 "HDMI-1"))
                              ("jc-s139" '(5 "HDMI-1"))
                              ("jc-s1139" '(5 "DP-1"))
                              ("rg-p310" '(5 "DP-1"))
                              ("cm-z240" '(5 "HDMI-1"))
                              ("entertainment" '(5 "HDMI-1"))))
    (pg/set-wallpaper)
    (message "Display config: %s"
             (string-trim (shell-command-to-string "autorandr --current"))))

  (defun pg/exwm-startup ()
    "Initializations."
    (pg/start-panel)
    (pg/herd-service "compton")
    (pg/herd-service "xsettingsd")
    (pg/herd-service "dunst")
    (pg/herd-service "nm-applet")
    (pg/herd-service "syncthing-gtk")
    (pg/herd-service "xss-lock")
    (pg/herd-service "udiskie")
    (pg/herd-service "pasystray")
    (pg/herd-service "xmodmap"))

  (unless pg/is-guix-system
    (straight-use-package 'exwm))
  (require 'exwm)
  (require 'exwm-config)
  (require 'exwm-randr)
  (require 'exwm-input)
  (with-eval-after-load 'exwm

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'pg/exwm-update-class)
    ;; When exwm starts up
    (add-hook 'exwm-init-hook #'pg/exwm-startup)
    ;; Configure launching of some x windows
    (add-hook 'exwm-manage-finish-hook #'pg/configure-window-by-class)

    (pg/customize-set-variables
     `((exwm-workspace-number . 6)
       (exwm-workspace-show-all-buffers . t)
       (exwm-input-prefix-keys . (?\C-x
                                  ?\C-g
                                  ?\C-h
                                  ?\M-x
                                  ?\M-`
                                  ?\M-&
                                  ?\M-:
                                  ?\C-\s))
       ;; Reset to line-mode (C-c C-k switches to char-mode via
       ;; `exwm-input-release-keyboard')
       (exwm-input-global-keys . (([?\s-r] . exwm-reset)

                                  ([?\s-n] . (lambda ()
                                               (interactive)
                                               (pg/dunstctl "history-pop")))

                                  ([?\s-c] . (lambda ()
                                               (interactive)
                                               (pg/dunstctl "close")))

                                  ([?\s-\s] . app-launcher-run-app)

                                  ;; Switch between char and line mode
                                  ([?\s-s] . exwm-input-toggle-keyboard)

                                  ;; Launch applications via shell command
                                  ([?\s-t] . (lambda (command)
                                               (interactive (list (read-shell-command "$ ")))
                                               (start-process-shell-command command nil command)))

                                  ;; Switch workspace
                                  ([?\s-w] . exwm-workspace-switch)

                                  ;; Bind the tilde key to workspace 0 when
                                  ;; switching/creating
                                  ([?\s-`] . (lambda ()
                                               (interactive)
                                               (exwm-workspace-switch-create 0)))

                                  ;; 's-N': Switch to certain workspace with Super
                                  ;; plus a number key (0 - 9)
                                  ,@(mapcar (lambda (i)
                                              `(,(kbd (format "s-%d" i)) .
                                                (lambda ()
                                                  (interactive)
                                                  (exwm-workspace-switch-create ,i))))
                                            (number-sequence 0 9))))
       (exwm-manage-configurations . (((string-equal exwm-class-name "Nyxt") char-mode t)))))
    (global-set-key (kbd "C-x B") #'exwm-workspace-switch-to-buffer)
    (define-key exwm-mode-map (kbd "C-q") #'exwm-input-send-next-key)

    (pg/update-displays)

    (exwm-randr-enable)
    (exwm-enable))

    #+end_src

** Package | desktop-environment

Allows for some of the keybindings to use while in exwm.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (unless pg/is-guix-system
    (straight-use-package 'desktop-environment))
  (with-eval-after-load 'exwm
    (require 'desktop-environment))
  (with-eval-after-load 'desktop-environment
    (pg/customize-set-variables
     '((desktop-environment-brightness-normal-increment . "5%+")
       (desktop-environment-brightness-normal-decrement . "5%-")
       (desktop-environment-music-toggle-command . "mpc toggle")))
    (desktop-environment-mode)
    (if (fboundp 'diminish)
        (diminish #'desktop-environment-mode)
      (with-eval-after-load 'diminish
        (diminish #'desktop-environment-mode))))

#+end_src

** Keyboard configuration

Remapping some keys to work inside of the desktop environment

#+begin_src sh :tangle ~/.dotfiles/.xmodmaprc

  clear lock
  clear control
  keycode 66 = Control_L
  add control = Control_L
  keycode 105 = Multi_key

#+end_src

** Multiple monitors

In order to setup exwm for multiple monitors, the ~arandr~ and ~autorandr~ applications can come in handy. Some useful commands to know:
- ~autorandr --save profile~ - Saves the current display setup under the name profile
- ~autorandr --change~ - Changes to the appopriate profile with respect to the current display setup; the profile name can be explicitly given to change to it
- ~autorandr~ - Displays the created profiles

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "autorandr")
  (specification->package "xrandr")
  (specification->package "arandr")

#+end_src

** Polybar

Some utility functions.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (defvar pg/polybar-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun pg/kill-panel ()
    "Kills active polybar panel."
    (interactive)
    (when pg/polybar-process
      (ignore-errors
        (kill-process pg/polybar-process)))
    (setq pg/polybar-process nil))

  (defun pg/start-panel ()
    "Starts a polybar panel."
    (interactive)
    (pg/kill-panel)
    (setq pg/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

  (defun pg/send-polybar-hook (module-name hook-index)
    "Displays message using polybar."
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun pg/exwm-workspace-current-index ()
    "Displays current workspace."
    (concat "WS: " (int-to-string exwm-workspace-current-index)))

  (defun pg/send-polybar-exwm-workspace ()
    "Sends workspace information to polybar."
    (pg/send-polybar-hook "exwm-workspace" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'pg/send-polybar-exwm-workspace)

#+end_src

Below is the config file with the various parameters.

#+begin_src conf :tangle ~/.dotfiles/.config/polybar/config

  ; Docs: https://github.com/polybar/polybar
  ;==========================================================

  [settings]
  screenchange-reload = true

  [global/wm]
  margin-top = 0
  margin-bottom = 0

  [colors]
  background = #f0232635
  background-alt = #576075
  foreground = #A6Accd
  foreground-alt = #555
  primary = #ffb52a
  secondary = #e60053
  alert = #bd2c40
  underline-1 = #c792ea

  [bar/panel]
  width = 100%
  height = 30
  offset-x = 0
  offset-y = 0
  fixed-center = true
  enable-ipc = true

  background = ${colors.background}
  foreground = ${colors.foreground}

  line-size = 2
  line-color = #f00

  border-size = 0
  border-color = #00000000

  padding-top = 15
  padding-left = 0
  padding-right = 1

  module-margin = 1
  font-0 = "Cantarell:size=13:weight=bold;1"
  font-1 = "Font Awesome:size=14;2"
  font-2 = "Material Icons:size=14;5"
  font-3 = "Fira Mono:size=12;-3"

  modules-left = exwm-workspace xkeyboard cpu memory
  modules-right = temperature battery backlight date

  tray-position = center
  tray-padding = 2
  tray-maxsize = 28
  ; tray-background = #ffffff

  cursor-click = pointer
  cursor-scroll = ns-resize


  [module/exwm-workspace]
  type = custom/ipc
  hook-0 = emacsclient -e "(pg/exwm-workspace-current-index)" | sed -e 's/^"//' -e 's/"$//'
  initial = 1
  ; format-underline = ${colors.underline-1}
  format-padding = 1

  [module/xkeyboard]
  type = internal/xkeyboard
  ; blacklist-0 = num lock
  format = |   <label-layout>
  format-prefix-font = 1
  format-prefix-foreground = ${colors.foreground-alt}
  label-layout = %icon% %name%
  label-indicator-padding = 2
  label-indicator-margin = 1

  [module/memory]
  type = internal/memory
  interval = 1
  format = |  <label> RAM <bar-used>
  label = %gb_used% / %gb_total%
  bar-used-indicator =
  bar-used-width = 10
  bar-used-foreground-0 = #55aa55
  bar-used-foreground-1 = #557755
  bar-used-foreground-2 = #f5a70a
  bar-used-foreground-3 = #ff5555
  bar-used-fill = ▐
  bar-used-empty = ▐
  bar-used-empty-foreground = #444444

  [module/cpu]
  type = internal/cpu
  interval = 2
  format = | <label> CPU <ramp-coreload>
  ; format-underline = ${colors.underline-1}
  ; click-left = emacsclient -e "(proced)"
  label =  %percentage%%
  ramp-coreload-spacing = 0
  ;ramp-load-0-foreground = ${colors.foreground-alt}
  ramp-coreload-0 = ▁
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇
  ramp-coreload-7 = █

  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  interval = 0.5
  warn-temperature = 60
  format = <ramp> <label> |
  ;format-underline = ${colors.underline-1}
  format-warn = <ramp> <label-warn>
  ;format-warn-underline = ${self.format-underline}
  label = %temperature-c%
  label-warn = %temperature-c%!
  label-warn-foreground = ${colors.secondary}
  ramp-0 = 
  ramp-1 = 
  ramp-2 = 
  ramp-3 = 
  ramp-4 = 

  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = ADP1
  full-at = 100
  time-format = %-l:%M
  label-charging = %percentage%% / %time%
  format-charging = <animation-charging> <label-charging>
  ;format-charging-underline = ${colors.underline-1}
  label-discharging = %percentage%% / %time%
  format-discharging = <ramp-capacity> <label-discharging>
  ;format-discharging-underline = ${self.format-charging-underline}
  format-full = <ramp-capacity> <label-full>
  ;format-full-underline = ${self.format-charging-underline}
  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 
  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-framerate = 750

  [module/backlight]
  type = internal/backlight
  card = intel_backlight
  format = | <ramp> <label> |
  label = %percentage%%
  ramp-0 = 🌕
  ramp-1 = 🌔
  ramp-2 = 🌓
  ramp-3 = 🌒
  ramp-4 = 🌑

  [module/date]
  type = internal/date
  interval = 1.0
  date = "%F %a %b %d"
  time = %I:%M:%S %p
  format = <label>
  ;format-prefix-foreground = ${colors.foreground-alt}
  ;format-underline = ${colors.underline-1}
  label =  %date% |  %time%

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "polybar")

#+end_src

** Dunst

Some utility functions:

- Below are the available ~dunstctl~ commands. Usage: ~dunstctl <command> [parameters]~

| Commands                           | Description                                                                                     |
|------------------------------------+-------------------------------------------------------------------------------------------------|
| ~action~                             | Perform the default action, or open the contexte meny of the notification at the given position |
| ~close~                              | Close the last notification                                                                     |
| ~close-all~                          | Close all notifications                                                                         |
| ~context~                            | Open context menu                                                                               |
| ~history-pop~                        | Pop one notification from history                                                               |
| ~is-paused~                          | Check if dunst is running or paused                                                             |
| ~set-paused [true : false : toggle]~ | Set the pause status                                                                            |
| ~debug~                              | Print debugging information                                                                     |
| ~help~                               | Show this help message                                                                          |

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (defun pg/dunstctl (cmd)
    "Calls dunst special commands."
    (start-process-shell-command "dunstctl" nil (concat "dunstctl " cmd)))

  (defun pg/disable-desktop-notifications ()
    "Stops notifications from popping."
    (interactive)
    (start-process-shell-command "dunstctl" nil "dunstctl set-paused true"))

  (defun pg/enable-desktop-notifications ()
    "Enables notifications to pop."
    (interactive)
    (start-process-shell-command "dunstctl" nil "dunstctl set-paused false"))

#+end_src

For desktop notifications

#+begin_src conf :tangle ~/.dotfiles/.config/dunst/dunstrc

  [global]
  ### Display ###
  monitor = 0

  # The geometry of the window:
  #   [{width}]x{height}[+/-{x}+/-{y}]
  geometry = "250x10-10+50"

  # Show how many messages are currently hidden (because of geometry).
  indicate_hidden = yes

  # Shrink window if it's smaller than the width.  Will be ignored if
  # width is 0.
  shrink = no

  # The transparency of the window.  Range: [0; 100].
  transparency = 10

  # The height of the entire notification.  If the height is smaller
  # than the font height and padding combined, it will be raised
  # to the font height and padding.
  notification_height = 0

  # Draw a line of "separator_height" pixel height between two
  # notifications.
  # Set to 0 to disable.
  separator_height = 1
  separator_color = frame

  # Padding between text and separator.
  padding = 8

  # Horizontal padding.
  horizontal_padding = 8

  # Defines width in pixels of frame around the notification window.
  # Set to 0 to disable.
  frame_width = 2

  # Defines color of the frame around the notification window.
  frame_color = "#89aaeb"

  # Sort messages by urgency.
  sort = yes

  # Don't remove messages, if the user is idle (no mouse or keyboard input)
  # for longer than idle_threshold seconds.
  idle_threshold = 60

  ### Text ###

  font = Cantarell 16

  # The spacing between lines.  If the height is smaller than the
  # font height, it will get raised to the font height.
  line_height = 0
  markup = full

  # The format of the message.  Possible variables are:
  #   %a  appname
  #   %s  summary
  #   %b  body
  #   %i  iconname (including its path)
  #   %I  iconname (without its path)
  #   %p  progress value if set ([  0%] to [100%]) or nothing
  #   %n  progress value if set without any extra characters
  #   %%  Literal %
  # Markup is allowed
  format = "<b>%s</b>\n%b"

  # Alignment of message text.
  # Possible values are "left", "center" and "right".
  alignment = left

  # Show age of message if message is older than show_age_threshold
  # seconds.
  # Set to -1 to disable.
  show_age_threshold = 60

  # Split notifications into multiple lines if they don't fit into
  # geometry.
  word_wrap = yes

  # When word_wrap is set to no, specify where to make an ellipsis in long lines.
  # Possible values are "start", "middle" and "end".
  ellipsize = middle

  # Ignore newlines '\n' in notifications.
  ignore_newline = no

  # Stack together notifications with the same content
  stack_duplicates = true

  # Hide the count of stacked notifications with the same content
  hide_duplicate_count = false

  # Display indicators for URLs (U) and actions (A).
  show_indicators = yes

  ### Icons ###

  # Align icons left/right/off
  icon_position = left

  # Scale larger icons down to this size, set to 0 to disable
  max_icon_size = 88

  # Paths to default icons.
  icon_path = /home/phil-gab99/.guix-extra-profiles/themes-fonts/themes-fonts/share/icons/Papirus/48x48@2x/status:/home/phil-gab99/.guix-extra-profiles/themes-fonts/themes-fonts/share/icons/Papirus/128x128/devices:/home/phil-gab99/.guix-extra-profiles/themes-fonts/themes-fonts/share/icons/Papirus/48x48@2x/emblems:/home/phil-gab99/.guix-extra-profiles/themes-fonts/themes-fonts/share/icons/Papirus/24x24@2x/panel

  ### History ###

  # Should a notification popped up from history be sticky or timeout
  # as if it would normally do.
  sticky_history = no

  # Maximum amount of notifications kept in history
  history_length = 20

  ### Misc/Advanced ###

  # Browser for opening urls in context menu.
  browser = qutebrowser

  # Always run rule-defined scripts, even if the notification is suppressed
  always_run_script = true

  # Define the title of the windows spawned by dunst
  title = Dunst

  # Define the class of the windows spawned by dunst
  class = Dunst

  startup_notification = false
  verbosity = mesg

  # Define the corner radius of the notification window
  # in pixel size. If the radius is 0, you have no rounded
  # corners.
  # The radius will be automatically lowered if it exceeds half of the
  # notification height to avoid clipping text and/or icons.
  corner_radius = 4

  mouse_left_click = close_current
  mouse_middle_click = do_action
  mouse_right_click = close_all

  # Experimental features that may or may not work correctly. Do not expect them
  # to have a consistent behaviour across releases.
  [experimental]
  # Calculate the dpi to use on a per-monitor basis.
  # If this setting is enabled the Xft.dpi value will be ignored and instead
  # dunst will attempt to calculate an appropriate dpi value for each monitor
  # using the resolution and physical size. This might be useful in setups
  # where there are multiple screens with very different dpi values.
  per_monitor_dpi = false

  [shortcuts]

  # Shortcuts are specified as [modifier+][modifier+]...key
  # Available modifiers are "ctrl", "mod1" (the alt-key), "mod2",
  # "mod3" and "mod4" (windows-key).
  # Xev might be helpful to find names for keys.

  # Close notification.
  # close = ctrl+space

  # Close all notifications.
  # close_all = ctrl+shift+space

  # Redisplay last message(s).
  # On the US keyboard layout "grave" is normally above TAB and left
  # of "1". Make sure this key actually exists on your keyboard layout,
  # e.g. check output of 'xmodmap -pke'
  # history = mod4+n

  # Context menu.
  # context = ctrl+shift+period

  [urgency_low]
  # IMPORTANT: colors have to be defined in quotation marks.
  # Otherwise the "#" and following would be interpreted as a comment.
  background = "#11bdbd"
  foreground = "#ffffff"
  timeout = 10
  # Icon for notifications with low urgency, uncomment to enable
  #icon = /path/to/icon

  [urgency_normal]
  background = "#1c1f26"
  foreground = "#ffffff"
  timeout = 10
  # Icon for notifications with normal urgency, uncomment to enable
  #icon = /path/to/icon

  [urgency_critical]
  background = "#900000"
  foreground = "#ffffff"
  frame_color = "#ff0000"
  timeout = 10
  # Icon for notifications with critical urgency, uncomment to enable
  #icon = /path/to/icon

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "dunst")
  (specification->package "libnotify") ;; For notify-send

#+end_src

* User Services

Using [[https://www.gnu.org/software/shepherd/][GNU Shepherd]] to manage user-level services that run in the background when logging in.

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.scm

  (use-modules ((ice-9 ftw) #:select (scandir)))

  ;; Run shepherd in background
  (action 'shepherd 'daemonize)

  ;; Load all the files in the directory 'init.d' with a suffix '.scm'.
  (for-each
   (lambda (file)
     (load (string-append "init.d/" file)))
   (scandir (string-append (dirname (current-filename)) "/init.d")
            (lambda (file)
              (string-suffix? ".scm" file))))

#+end_src

** GPG-Agent

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/gpg-agent.scm

  (define gpg-agent
    (make <service>
      #:provides '(gpg-agent)
      #:docstring "Runs `gpg-agent'"
      #:respawn? #t
      #:start (make-system-constructor "gpg-connect-agent /bye")
      #:stop (make-system-destructor "gpgconf --kill gpg-agent")))

  (register-services gpg-agent)
  (start gpg-agent)

#+end_src

** Mcron

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/mcron.scm

  (define mcron
    (make <service>
      #:provides '(mcron)
      #:docstring "Runs `mcron'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("mcron"))
      #:stop (make-kill-destructor)))

  (register-services mcron)
  (start mcron)

#+end_src

** Pulseaudio

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/pulseaudio.scm

  (define pulseaudio
    (make <service>
      #:provides '(pulseaudio)
      #:docstring "Runs `pulseaudio'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("pulseaudio"))
      #:stop (make-kill-destructor)))

  (register-services pulseaudio)
  (start pulseaudio)

#+end_src

** SSH-Agent

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/ssh-agent.scm

  (use-modules (shepherd support))

  (define ssh-agent
    (make <service>
      #:provides '(ssh-agent)
      #:docstring "Run `ssh-agent'"
      #:respawn? #t
      #:start (lambda ()
                (let ((socket-dir (string-append %user-runtime-dir "/ssh-agent")))
                  (unless (file-exists? socket-dir)
                    (mkdir-p socket-dir)
                    (chmod socket-dir #o700))
                  (fork+exec-command
                   `("ssh-agent" "-D" "-a" ,(string-append socket-dir "/socket"))
                   #:log-file (string-append %user-log-dir "/ssh-agent.log"))))
      #:stop (make-kill-destructor)))

  ;; (register-services ssh-agent)
  ;; (start ssh-agent)

#+end_src

** Compton

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/compton.scm

  (define compton
    (make <service>
      #:provides '(compton)
      #:docstring "Runs `compton'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("compton"))
      #:stop (make-kill-destructor)))

  (register-services compton)

#+end_src

** Xsettingsd

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/xsettingsd.scm

  (define xsettingsd
    (make <service>
      #:provides '(xsettingsd)
      #:docstring "Runs `xsettingsd'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("xsettingsd"))
      #:stop (make-kill-destructor)))

  (register-services xsettingsd)

#+end_src

** Mpd

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/mpd.scm

  (define mpd
    (make <service>
      #:provides '(mpd)
      #:docstring "Runs `mpd'"
      #:respawn? #t
      #:start (make-system-constructor "mpd")
      #:stop (make-system-destructor "mpd --kill")))

  (register-services mpd)
  ;; (start mpd)

#+end_src

** Feh

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/feh.scm

  (define feh
    (make <service>
      #:provides '(feh)
      #:docstring "Runs `feh'"
      #:respawn? #f
      #:one-shot? #t
      #:start (make-system-constructor "feh --bg-scale ~/Pictures/wp-color-triangle.png")))

  (register-services feh)

#+end_src

** Dunst

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/dunst.scm

  (define dunst
    (make <service>
      #:provides '(dunst)
      #:docstring "Runs `dunst'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("dunst"))
      #:stop (make-kill-destructor)))

  (register-services dunst)

#+end_src

** Nm-applet

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/nm-applet.scm

  (define nm-applet
    (make <service>
      #:provides '(nm-applet)
      #:docstring "Runs `nm-applet'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("nm-applet"))
      #:stop (make-kill-destructor)))

  (register-services nm-applet)

#+end_src

** Udiskie

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/udiskie.scm

  (define udiskie
    (make <service>
      #:provides '(udiskie)
      #:docstring "Runs `udiskie'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("udiskie" "-t"))
      #:stop (make-kill-destructor)))

  (register-services udiskie)

#+end_src

** Pasystray

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/pasystray.scm

  (define pasystray
    (make <service>
      #:provides '(pasystray)
      #:docstring "Runs `pasystray'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("pasystray"))
      #:stop (make-kill-destructor)))

  (register-services pasystray)

#+end_src

** Autorandr

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/autorandr.scm

  (define autorandr
    (make <service>
      #:provides '(autorandr)
      #:docstring "Runs `autorandr'"
      #:respawn? #f
      #:one-shot? #t
      #:start (make-system-constructor "autorandr --change --force")))

  (register-services autorandr)

#+end_src

** Xmodmap

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/xmodmap.scm

  (define xmodmap
    (make <service>
      #:provides '(xmodmap)
      #:docstring "Runs `xmodmap'"
      #:respawn? #f
      #:one-shot? #t
      #:start (make-system-constructor "xmodmap ~/.xmodmaprc")))

  (register-services xmodmap)

#+end_src

** Syncthing

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/syncthing.scm

  (define syncthing
    (make <service>
      #:provides '(syncthing)
      #:respawn? #t
      #:start (make-forkexec-constructor '("syncthing" "-no-browser"))
      #:stop (make-kill-destructor)))

  (register-services syncthing)
  (start syncthing)

#+end_src

** Syncthing-gtk

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/syncthing.scm

  (define syncthing-gtk
    (make <service>
      #:provides '(syncthing-gtk)
      #:respawn? #t
      #:start (make-forkexec-constructor '("syncthing-gtk" "--minimized"))
      #:stop (make-kill-destructor)))

  (register-services syncthing-gtk)

#+end_src

** Xss-lock

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/xss-lock.scm

  (define xss-lock
    (make <service>
      #:provides '(xss-lock)
      #:respawn? #t
      #:start (make-forkexec-constructor '("xss-lock" "--" "slock"))
      #:stop (make-kill-destructor)))

  (register-services xss-lock)

#+end_src

* Applications

** Audio Device Control

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/audio.scm :noweb yes

  (packages->manifest
   (list
    (specification->package "alsa-utils")
    (specification->package "pavucontrol")
    (specification->package "pasystray")
    (specification->package "mpd")
    (specification->package "mpd-mpc")
    (specification->package "bluez")))

#+end_src

** Browsers

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/browsers.scm :noweb yes

  (packages->manifest
   (list
    ;; (specification->package "nyxt")
    (specification->package "qutebrowser")))

#+end_src

** Desktop Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "gucharmap")
  (specification->package "brightnessctl")
  (specification->package "xdg-utils")       ;; For xdg-open, etc
  (specification->package "xdg-dbus-proxy")  ;; For Flatpak
  (specification->package+output "gtk+:bin") ;; For gtk-launch
  ;; (specification->package+output "glib:bin") ;; For gio-launch-desktop
  (specification->package "shared-mime-info")
  (specification->package "htop")

#+end_src

** Flatpak

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "flatpak")

#+end_src

** Image Viewers and Editors

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/media.scm :noweb yes

  (packages->manifest
   (list
    (specification->package "feh")
    (specification->package "imagemagick")
    (specification->package "scrot")
    (specification->package "xclip")
    (specification->package "libreoffice")
    ;; (specification->package "gimp")
    (specification->package "evince")
    (specification->package "simple-scan")
    (specification->package "xdg-desktop-portal-gtk")
    (specification->package "openboard")
    ;; (specification->package "xournal")
    (specification->package "xournalpp")))

#+end_src

** Video Players

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/video.scm :noweb yes

  (packages->manifest
   (list
    (specification->package "mpv")
    (specification->package "youtube-dl")
    (specification->package "gstreamer")
    (specification->package "gst-plugins-base")
    (specification->package "gst-plugins-good")
    (specification->package "gst-plugins-bad")
    (specification->package "gst-plugins-ugly")
    (specification->package "gst-libav")
    (specification->package "intel-vaapi-driver")
    (specification->package "libva-utils")))

#+end_src

** Network

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "net-tools")
  (specification->package "curl")

#+end_src

** Password Management

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "password-store")
  (specification->package "mcron")

#+end_src

** Printing

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "system-config-printer")

#+end_src

** Synching

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "syncthing")
  (specification->package "syncthing-gtk")

#+end_src

** System Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "openssh")
  (specification->package "gnupg")
  (specification->package "zip")
  (specification->package "unzip")
  (specification->package "p7zip")
  (specification->package "unrar")
  (specification->package "udiskie")
  (specification->package "trash-cli")

#+end_src

** Virtual machines

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "virt-manager")
  (specification->package "dconf")
  (specification->package "gtksourceview@4")
  (specification->package "virt-viewer")
  (specification->package "spice-vdagent")

#+end_src

** Xorg Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "xev")
  (specification->package "xset")
  (specification->package "xrdb")
  (specification->package "xhost")
  (specification->package "xmodmap")
  (specification->package "setxkbmap")
  (specification->package "xss-lock")
  (specification->package "libinput")
  (specification->package "xinput")

#+end_src

* Desktop Profile

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (provide 'pg-desktop)

#+end_src

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/desktop.scm :noweb yes

  (packages->manifest
   (list
     <<packages>>
     ))

#+end_src
