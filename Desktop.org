#+title: Emacs Desktop Environment
#+author: Philippe Gabriel
#+property: header-args    :tangle-mode (identity #o444)
#+property: header-args:sh :tangle-mode (identity #o555)

* Fonts

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; Settings Manager
  (specification->package "xsettingsd")

#+end_src

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/themes-fonts.scm :noweb yes

  (packages->manifest
   (list
    (specification->package "compton")
    (specification->package "fontmanager")

    ;; GTK Themes
    (specification->package "arc-icon-theme")
    (specification->package "matcha-theme")
    (specification->package "hicolor-icon-theme")
    (specification->package "adwaita-icon-theme")
    (specification->package "gnome-backgrounds")
    (specification->package "papirus-icon-theme")
    (specification->package "breeze-icons")

    ;; Fonts
    (specification->package "font-fira-code")
    (specification->package "font-jetbrains-mono")
    (specification->package "font-iosevka")
    (specification->package "font-iosevka-aile")
    (specification->package "font-abattis-cantarell")
    (specification->package "font-dejavu")
    (specification->package "font-google-noto")
    (specification->package "font-gnu-freefont")
    (specification->package "font-gnu-unifont")
    (specification->package "font-liberation")
    (specification->package "font-awesome")
    (specification->package "font-google-material-design-icons")
    (specification->package "font-ghostscript")))

#+end_src

* Window Management

Various settings and packages to alllow emacs to act as the operating system.

** Package | app-launcher

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (straight-use-package '(app-launcher :host github
                                       :repo "SebastienWae/app-launcher"))
  (require 'app-launcher)

#+end_src

** Package | exwm

Many useful keybindings to know:

Managing windows:
- ~M-&~ - Launch a process asy/nchronously
- ~s-t~ - Binding from EXWM to launch without popup
- ~exwm-floating-toggle-floating~ - Floating windows
- ~exwm-layout-toggle-fullscreen~ - Fullscreen
- ~s-SPC~ - Select an app to open

Workspaces:
- ~s-(0-9)~ - Switch to numbered workspace (=~= can also be used instead of ~0~)
- ~s-w~ - Workspace selector
- ~C-c RET~ - Move window to numbered workspace (EXWM windows are attached to a single workspace)
- ~C-x B~ - Move to any buffer across all workspaces

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (defun pg/exwm-update-class ()
    "Sets buffer names to be app names."
    (exwm-workspace-rename-buffer exwm-class-name))

  (defun pg/configure-window-by-class ()
    "Per application configuration."
    (pcase exwm-class-name
      ("qutebrowser" (exwm-layout-hide-mode-line))
      ("mpv" (exwm-layout-hide-mode-line))
      ("PPSSPPSDL" (exwm-layout-hide-mode-line))
      ("edu-mit-csail-sdg-alloy4whole-Alloy" (exwm-layout-hide-mode-line))))

  (defun pg/run-in-background (command)
    "Runs a process in the background."
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun pg/herd-service (service)
    "Starts herd process."
    (start-process-shell-command "herd" nil (concat "herd start " service)))

  (defun pg/set-wallpaper ()
    "Sets desktop wallpaper."
    (interactive)
    (pg/herd-service "feh"))

  (defun pg/update-displays ()
    "Multiple display management."
    (interactive)
    (pg/herd-service "autorandr")
    ;; Change this with respect to the different screen configuration
    ;; Check arandr for display names
    (customize-set-variable 'exwm-randr-workspace-monitor-plist
                            (pcase (string-trim (shell-command-to-string "autorandr --detected"))
                              ("work" '(5 "HDMI-1"))
                              ("work+" '(5 "HDMI-1"))
                              ("jclab" '(5 "HDMI-1"))
                              ("jb-0305" '(5 "HDMI-1"))
                              ("jb-4205" '(5 "HDMI-1"))
                              ("aa-1360\naa-1140\naa-1207" '(5 "HDMI-1"))
                              ("aa-1340" '(5 "HDMI-1"))
                              ("aa-2369" '(5 "HDMI-1"))
                              ("rg-e310" '(5 "HDMI-1"))
                              ("jc-s139" '(5 "HDMI-1"))
                              ("jc-s1139" '(5 "DP-1"))
                              ("rg-s142" '(5 "HDMI-1"))
                              ("rg-p310" '(5 "DP-1"))
                              ("cm-z240" '(5 "HDMI-1"))
                              ("entertainment" '(5 "HDMI-1"))))
    (pg/set-wallpaper)
    (message "Display config: %s"
             (string-trim (shell-command-to-string "autorandr --current"))))

  (defun pg/exwm-startup ()
    "Initializations."
    (pg/start-panel)
    (pg/herd-service "compton")
    (pg/herd-service "dunst")
    (pg/herd-service "nm-applet")
    (pg/herd-service "xss-lock")
    (pg/herd-service "udiskie")
    (pg/herd-service "pasystray")
    (pg/herd-service "xmodmap"))

  (unless pg/is-guix-system
    (straight-use-package 'exwm))
  (require 'exwm)
  (require 'exwm-config)
  (require 'exwm-randr)
  (require 'exwm-input)
  (with-eval-after-load 'exwm

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'pg/exwm-update-class)
    ;; When exwm starts up
    (add-hook 'exwm-init-hook #'pg/exwm-startup)
    ;; Configure launching of some x windows
    (add-hook 'exwm-manage-finish-hook #'pg/configure-window-by-class)

    (pg/customize-set-variables
     `((exwm-workspace-number . 6)
       (exwm-workspace-show-all-buffers . t)
       (exwm-input-prefix-keys . (?\C-x
                                  ?\C-g
                                  ?\C-h
                                  ?\M-x
                                  ?\M-`
                                  ?\M-&
                                  ?\M-:
                                  ?\C-\s))
       ;; Reset to line-mode (C-c C-k switches to char-mode via
       ;; `exwm-input-release-keyboard')
       (exwm-input-global-keys . (([?\s-r] . exwm-reset)

                                  ([?\s-n] . (lambda ()
                                               (interactive)
                                               (pg/dunstctl "history-pop")))

                                  ([?\s-c] . (lambda ()
                                               (interactive)
                                               (pg/dunstctl "close")))

                                  ([?\s-\s] . app-launcher-run-app)

                                  ;; Switch between char and line mode
                                  ([?\s-s] . exwm-input-toggle-keyboard)

                                  ;; Launch applications via shell command
                                  ([?\s-t] . (lambda (command)
                                               (interactive (list (read-shell-command "$ ")))
                                               (start-process-shell-command command nil command)))

                                  ;; Switch workspace
                                  ([?\s-w] . exwm-workspace-switch)

                                  ;; Bind the tilde key to workspace 0 when
                                  ;; switching/creating
                                  ([?\s-`] . (lambda ()
                                               (interactive)
                                               (exwm-workspace-switch-create 0)))

                                  ;; 's-N': Switch to certain workspace with Super
                                  ;; plus a number key (0 - 9)
                                  ,@(mapcar (lambda (i)
                                              `(,(kbd (format "s-%d" i)) .
                                                (lambda ()
                                                  (interactive)
                                                  (exwm-workspace-switch-create ,i))))
                                            (number-sequence 0 9))))
       (exwm-manage-configurations . (((string-equal exwm-class-name "Nyxt") char-mode t)))))
    (global-set-key (kbd "C-x B") #'exwm-workspace-switch-to-buffer)
    (define-key exwm-mode-map (kbd "C-q") #'exwm-input-send-next-key)

    (pg/update-displays)

    (exwm-randr-enable)
    (exwm-enable))

    #+end_src

** Package | desktop-environment

Allows for some of the keybindings to use while in exwm.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (unless pg/is-guix-system
    (straight-use-package 'desktop-environment))
  (with-eval-after-load 'exwm
    (require 'desktop-environment))
  (with-eval-after-load 'desktop-environment
    (pg/customize-set-variables
     '((desktop-environment-brightness-normal-increment . "5%+")
       (desktop-environment-brightness-normal-decrement . "5%-")
       (desktop-environment-music-toggle-command . "mpc toggle")))
    (desktop-environment-mode)
    (if (fboundp 'diminish)
        (diminish #'desktop-environment-mode)
      (with-eval-after-load 'diminish
        (diminish #'desktop-environment-mode))))

#+end_src

** Multiple monitors

In order to setup exwm for multiple monitors, the ~arandr~ and ~autorandr~ applications can come in handy. Some useful commands to know:
- ~autorandr --save profile~ - Saves the current display setup under the name profile
- ~autorandr --change~ - Changes to the appopriate profile with respect to the current display setup; the profile name can be explicitly given to change to it
- ~autorandr~ - Displays the created profiles

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "autorandr")
  (specification->package "xrandr")
  (specification->package "arandr")

#+end_src

** Polybar

Some utility functions.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (defvar pg/polybar-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun pg/kill-panel ()
    "Kills active polybar panel."
    (interactive)
    (when pg/polybar-process
      (ignore-errors
        (kill-process pg/polybar-process)))
    (setq pg/polybar-process nil))

  (defun pg/start-panel ()
    "Starts a polybar panel."
    (interactive)
    (pg/kill-panel)
    (setq pg/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

  (defun pg/send-polybar-hook (module-name hook-index)
    "Displays message using polybar."
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun pg/exwm-workspace-current-index ()
    "Displays current workspace."
    (concat "WS: " (int-to-string exwm-workspace-current-index)))

  (defun pg/send-polybar-exwm-workspace ()
    "Sends workspace information to polybar."
    (pg/send-polybar-hook "exwm-workspace" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'pg/send-polybar-exwm-workspace)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "polybar")

#+end_src

** Dunst

Some utility functions:

- Below are the available ~dunstctl~ commands. Usage: ~dunstctl <command> [parameters]~

| Commands                           | Description                                                                                     |
|------------------------------------+-------------------------------------------------------------------------------------------------|
| ~action~                             | Perform the default action, or open the contexte meny of the notification at the given position |
| ~close~                              | Close the last notification                                                                     |
| ~close-all~                          | Close all notifications                                                                         |
| ~context~                            | Open context menu                                                                               |
| ~history-pop~                        | Pop one notification from history                                                               |
| ~is-paused~                          | Check if dunst is running or paused                                                             |
| ~set-paused [true : false : toggle]~ | Set the pause status                                                                            |
| ~debug~                              | Print debugging information                                                                     |
| ~help~                               | Show this help message                                                                          |

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (defun pg/dunstctl (cmd)
    "Calls dunst special commands."
    (start-process-shell-command "dunstctl" nil (concat "dunstctl " cmd)))

  (defun pg/disable-desktop-notifications ()
    "Stops notifications from popping."
    (interactive)
    (start-process-shell-command "dunstctl" nil "dunstctl set-paused true"))

  (defun pg/enable-desktop-notifications ()
    "Enables notifications to pop."
    (interactive)
    (start-process-shell-command "dunstctl" nil "dunstctl set-paused false"))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "dunst")
  (specification->package "libnotify") ;; For notify-send

#+end_src

* User Services

Using [[https://www.gnu.org/software/shepherd/][GNU Shepherd]] to manage user-level services that run in the background when logging in.

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.scm

  (use-modules
   (shepherd service)
   ((ice-9 ftw) #:select (scandir)))

  ;; Run shepherd in background
  (perform-service-action (lookup-running 'shepherd) 'daemonize)

  ;; Load all the files in the directory 'init.d' with a suffix '.scm'.
  (for-each
   (lambda (file)
     (load (string-append "init.d/" file)))
   (scandir (string-append (dirname (current-filename)) "/init.d")
            (lambda (file)
              (string-suffix? ".scm" file))))

  ;; Register services
  (register-services (list autorandr
                           compton
                           dunst
                           feh
                           gpg-agent
                           mcron
                           mpd
                           nm-applet
                           pasystray
                           polkit-gnome
                           pulseaudio
                           syncthing
                           syncthing-gtk
                           udiskie
                           xfce4-clipman
                           xmodmap
                           xsettingsd
                           xss-lock))

  ;; Start services
  (start-in-the-background '(gpg-agent
                             mcron
                             polkit-gnome
                             pulseaudio
                             syncthing
                             syncthing-gtk
                             xfce4-clipman
                             xmodmap
                             xsettingsd))

#+end_src

** GPG-Agent

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/gpg-agent.scm

  (define gpg-agent
    (service '(gpg-agent)
      #:documentation "Runs `gpg-agent'"
      #:respawn? #t
      #:start (make-system-constructor "gpg-connect-agent /bye")
      #:stop (make-system-destructor "gpgconf --kill gpg-agent")))

#+end_src

** Mcron

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/mcron.scm

  (define mcron
    (service '(mcron)
      #:documentation "Runs `mcron'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("mcron"))
      #:stop (make-kill-destructor)))

#+end_src

** Pulseaudio

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/pulseaudio.scm

  (define pulseaudio
    (service '(pulseaudio)
      #:documentation "Runs `pulseaudio'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("pulseaudio"))
      #:stop (make-kill-destructor)))

#+end_src

** SSH-Agent

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/ssh-agent.scm

  (use-modules
   (shepherd support))

  (define ssh-agent
    (service '(ssh-agent)
      #:documentation "Run `ssh-agent'"
      #:respawn? #t
      #:start (lambda ()
                (let ((socket-dir (string-append %user-runtime-dir "/ssh-agent")))
                  (unless (file-exists? socket-dir)
                    (mkdir-p socket-dir)
                    (chmod socket-dir #o700))
                  (fork+exec-command
                   `("ssh-agent" "-D" "-a" ,(string-append socket-dir "/socket"))
                   #:log-file (string-append %user-log-dir "/ssh-agent.log"))))
      #:stop (make-kill-destructor)))

#+end_src

** Compton

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/compton.scm

  (define compton
    (service '(compton)
      #:documentation "Runs `compton'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("compton"))
      #:stop (make-kill-destructor)))

#+end_src

** Xsettingsd

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/xsettingsd.scm

  (define xsettingsd
    (service '(xsettingsd)
      #:documentation "Runs `xsettingsd'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("xsettingsd"))
      #:stop (make-kill-destructor)))

#+end_src

** Mpd

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/mpd.scm

  (define mpd
    (service '(mpd)
      #:documentation "Runs `mpd'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("mpd" "--no-daemon"))
      #:stop (make-kill-destructor)))

#+end_src

** Feh

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/feh.scm

  (define feh
    (service '(feh)
      #:documentation "Runs `feh'"
      #:respawn? #f
      #:one-shot? #t
      #:start (make-system-constructor "feh --bg-scale ~/Pictures/wp-color-triangle.png")))

#+end_src

** Dunst

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/dunst.scm

  (define dunst
    (service '(dunst)
      #:documentation "Runs `dunst'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("dunst"))
      #:stop (make-kill-destructor)))

#+end_src

** Nm-applet

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/nm-applet.scm

  (define nm-applet
    (service '(nm-applet)
      #:documentation "Runs `nm-applet'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("nm-applet"))
      #:stop (make-kill-destructor)))

#+end_src

** Udiskie

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/udiskie.scm

  (define udiskie
    (service '(udiskie)
      #:documentation "Runs `udiskie'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("udiskie" "-t"))
      #:stop (make-kill-destructor)))

#+end_src

** Pasystray

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/pasystray.scm

  (define pasystray
    (service '(pasystray)
      #:documentation "Runs `pasystray'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("pasystray"))
      #:stop (make-kill-destructor)))

#+end_src

** Autorandr

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/autorandr.scm

  (define autorandr
    (service '(autorandr)
      #:documentation "Runs `autorandr'"
      #:respawn? #f
      #:one-shot? #t
      #:start (make-system-constructor "autorandr --change --force")))

#+end_src

** Xmodmap

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/xmodmap.scm

  (define xmodmap
    (service '(xmodmap)
      #:documentation "Runs `xmodmap'"
      #:respawn? #f
      #:one-shot? #t
      #:start (make-system-constructor "xmodmap ~/.xmodmaprc")))

#+end_src

** Syncthing

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/syncthing.scm

  (define syncthing
    (service '(syncthing)
      #:documentation "Runs `syncthing'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("syncthing" "--no-browser"))
      #:stop (make-kill-destructor)))

#+end_src

** Syncthing-gtk

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/syncthing.scm

  (define syncthing-gtk
    (service '(syncthing-gtk)
      #:documentation "Runs `syncthing-gtk'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("syncthing-gtk" "--minimized"))
      #:stop (make-kill-destructor)))

#+end_src

** Xfce4-clipman

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/xfce4-clipman.scm

  (define xfce4-clipman
    (service '(xfce4-clipman)
      #:documentation "Runs `xfce4-clipman"
      #:respawn? #t
      #:start (make-forkexec-constructor '("xfce4-clipman"))
      #:stop (make-kill-destructor)))

#+end_src

** Xss-lock

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/xss-lock.scm

  (define xss-lock
    (service '(xss-lock)
      #:documentation "Runs `xss-lock'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("xss-lock" "--" "slock"))
      #:stop (make-kill-destructor)))

#+end_src

** Polkit-gnome

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/polkit-gnome.scm

  (define polkit-gnome
    (service '(polkit-gnome)
      #:documentation "Runs `polkit-gnome'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("/home/phil-gab99/.guix-extra-profiles/desktop/desktop/libexec/polkit-gnome-authentication-agent-1"))
      #:stop (make-kill-destructor)))

#+end_src

* Applications

** Audio Device Control

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/audio.scm :noweb yes

  (packages->manifest
   (list
    (specification->package "alsa-utils")
    (specification->package "pavucontrol")
    (specification->package "pasystray")
    (specification->package "mpd")
    (specification->package "mpd-mpc")
    (specification->package "bluez")))

#+end_src

** Browsers

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/browsers.scm :noweb yes

  (packages->manifest
   (list
    ;; (specification->package "nyxt")
    (specification->package "qutebrowser")))

#+end_src

** Desktop Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "gucharmap")
  (specification->package "brightnessctl")
  (specification->package "xdg-utils")       ;; For xdg-open, etc
  (specification->package "xdg-dbus-proxy")  ;; For Flatpak
  (specification->package "xdg-desktop-portal-gtk")
  ;; (specification->package "gtk")
  ;; (specification->package "gtk+")
  (specification->package+output "gtk+:bin") ;; For gtk-launch
  (specification->package "polkit-gnome")
  (specification->package "wol")
  ;; (specification->package+output "glib:bin") ;; For gio-launch-desktop
  (specification->package "shared-mime-info")
  (specification->package "htop")

#+end_src

** Flatpak

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "flatpak")

#+end_src

** Image Viewers and Editors

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/media.scm :noweb yes

  (packages->manifest
   (list
    (specification->package "feh")
    (specification->package "imagemagick")
    (specification->package "scrot")
    (specification->package "xclip")
    (specification->package "libreoffice")
    (specification->package "gimp")
    (specification->package "evince")
    (specification->package "simple-scan")
    (specification->package "xdg-desktop-portal-gtk")
    (specification->package "openboard")
    ;; (specification->package "xournal")
    (specification->package "xournalpp")))

#+end_src

** Video Players

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/video.scm :noweb yes

  (packages->manifest
   (list
    (specification->package "mpv")
    (specification->package "youtube-dl")
    (specification->package "gstreamer")
    (specification->package "gst-plugins-base")
    (specification->package "gst-plugins-good")
    (specification->package "gst-plugins-bad")
    (specification->package "gst-plugins-ugly")
    (specification->package "gst-libav")
    (specification->package "intel-vaapi-driver")
    (specification->package "libva-utils")))

#+end_src

** Network

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "net-tools")
  (specification->package "curl")

#+end_src

** Password Management

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "password-store")
  (specification->package "mcron")

#+end_src

** Printing

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "system-config-printer")

#+end_src

** Synching

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "syncthing")
  (specification->package "syncthing-gtk")

#+end_src

** System Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "openssh")
  (specification->package "gnupg")
  (specification->package "zip")
  (specification->package "unzip")
  (specification->package "p7zip")
  (specification->package "unrar")
  (specification->package "udiskie")
  (specification->package "trash-cli")

#+end_src

** Virtual machines

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "virt-manager")
  (specification->package "dconf")
  (specification->package "gtksourceview@4")
  (specification->package "virt-viewer")
  (specification->package "spice-vdagent")

#+end_src

** Xorg Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "xev")
  (specification->package "xset")
  (specification->package "xrdb")
  (specification->package "xhost")
  (specification->package "xmodmap")
  (specification->package "setxkbmap")
  (specification->package "xss-lock")
  (specification->package "libinput")
  (specification->package "xinput")

#+end_src

* Desktop Profile

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (provide 'pg-desktop)

#+end_src

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/desktop.scm :noweb yes

  (packages->manifest
   (list
     <<packages>>
     ))

#+end_src
