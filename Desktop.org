#+title: Emacs Desktop Environment
#+author: Philippe Gabriel
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)

* Fonts

The ~xsettingsd~ configuration file. Below is the table for each property:

| Name                          | Type    | Description                    | Values                                     |
|-------------------------------+---------+--------------------------------+--------------------------------------------|
| Gtk/CursorThemeName           | string  | Cursor theme                   | Subdirs of =/usr/share/icons=                |
| Net/EnableEventSounds         | integer | Play event sounds              | 0 (no), 1 (yes)                            |
| Net/EnableInputFeedbackSounds | integer | Event sounds response to input | 0 (no), 1 (yes)                            |
| Net/IconThemeName             | string  | Icon theme                     | Subdirs of =/usr/share/icons=                |
| Net/SoundThemeName            | string  | Sound theme                    |                                            |
| Net/ThemeName                 | string  | Widget theme                   | Subdirs of =/usr/share/themes=               |
| Xft/Antialias                 | integer | Text antialiasing              | 0 (no), 1 (yes), -1 (default)              |
| Xft/DPI                       | integer | Display DPI                    | 1024*dots/inch, -1 (default)               |
| Xft/HintStyle                 | string  | Text hinting style             | hintnone, hintslight, hintmedium, hintfull |
| Xft/Hinting                   | integer | Text hinting                   | 0 (no), 1 (yes), -1 (default)              |
| Xft/RGBA                      | string  | Text subpixel rendering        | none, rgb, bgr, vrgb, vbgr                 |

#+begin_src conf :tangle ~/.dotfiles/.config/xsettingsd/xsettingsd.conf

  Gtk/DecorationLayout "menu:minimize,maximize,close"
  Gtk/FontName "Cantarell 12"
  Gtk/MonospaceFontName "Fira Mono 12"
  Gtk/CursorThemeName "Adwaita"
  Net/IconThemeName "Papirus-Dark"
  Net/ThemeName "Matcha-dark-azul"
  Xft/Antialias 1
  Xft/Hinting 0
  Xft/HintStyle "hintnone"
        
#+end_src

Make sure Emacs can find the font path from the ~themes-fonts~ profile:

#+begin_src xml :tangle ~/.dotfiles/.config/fontconfig/fonts.conf

  <?xml version="1.0"?>
  <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
  <fontconfig>
    <dir>~/.guix-extra-profiles/themes-fonts/themes-fonts/share/fonts</dir>
    <alias>
      <family>Apple Color Emoji</family>
      <prefer>
        <family>Noto Color Emoji</family>
      </prefer>
    </alias>
  </fontconfig>

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; Settings Manager
  (specification->package "xsettingsd")

#+end_src

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/themes-fonts.scm :noweb yes

  (packages->manifest
   (list
    (specification->package "compton")
    (specification->package "fontmanager")

    ;; GTK Themes
    (specification->package "arc-icon-theme")
    (specification->package "matcha-theme")
    (specification->package "hicolor-icon-theme")
    ;; (specification->package "gnome-icon-theme")
    (specification->package "gnome-backgrounds")
    (specification->package "papirus-icon-theme")
    (specification->package "breeze-icons")

    ;; Fonts
    (specification->package "font-fira-code")
    (specification->package "font-jetbrains-mono")
    (specification->package "font-iosevka")
    (specification->package "font-iosevka-aile")
    (specification->package "font-abattis-cantarell")
    (specification->package "font-dejavu")
    (specification->package "font-google-noto")
    (specification->package "font-gnu-freefont")
    (specification->package "font-gnu-unifont")
    (specification->package "font-liberation")
    (specification->package "font-awesome")
    (specification->package "font-google-material-design-icons")
    (specification->package "font-ghostscript")))

#+end_src

* Window Management

Various settings and packages to alllow emacs to act as the operating system.

** Package | app-launcher

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (straight-use-package '(app-launcher :host github
                                       :repo "SebastienWae/app-launcher"))
  (require 'app-launcher)

#+end_src

** Package | exwm

Many useful keybindings to know:

Managing windows:
- ~M-&~ - Launch a process asy/nchronously
- ~s-t~ - Binding from EXWM to launch without popup
- ~exwm-floating-toggle-floating~ - Floating windows
- ~exwm-layout-toggle-fullscreen~ - Fullscreen
- ~s-SPC~ - Select an app to open

Workspaces:
- ~s-(0-9)~ - Switch to numbered workspace (=~= can also be used instead of ~0~)
- ~s-w~ - Workspace selector
- ~C-c RET~ - Move window to numbered workspace (EXWM windows are attached to a single workspace)
- ~C-x B~ - Move to any buffer across all workspaces

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (defun pg/exwm-update-class ()
    "Sets buffer names to be app names."
    (exwm-workspace-rename-buffer exwm-class-name))

  (defun pg/configure-window-by-class ()
    "Per application configuration."
    (pcase exwm-class-name
      ("qutebrowser" (exwm-layout-hide-mode-line))
      ("mpv" (exwm-layout-hide-mode-line))
      ("PPSSPPSDL" (exwm-layout-hide-mode-line))
      ("edu-mit-csail-sdg-alloy4whole-Alloy" (exwm-layout-hide-mode-line))))

  (defun pg/run-in-background (command)
    "Runs a process in the background."
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun pg/herd-service (service)
    "Starts herd process."
    (start-process-shell-command "herd start" nil (concat "herd start " service)))

  (defun pg/set-wallpaper ()
    "Sets desktop wallpaper."
    (interactive)
    (pg/herd-service "feh"))

  (defun pg/update-displays ()
    "Multiple display management."
    (interactive)
    (pg/herd-service "autorandr")
    ;; Change this with respect to the different screen configuration
    ;; Check arandr for display names
    (customize-set-variable 'exwm-randr-workspace-monitor-plist
                            (pcase (shell-command-to-string "autorandr --detected")
                              ("work\n" '(5 "HDMI-1"))
                              ("work+\n" '(5 "HDMI-1"))
                              ("jclab\n" '(5 "HDMI-1"))
                              ("jb-0305\n" '(5 "HDMI-1"))
                              ("aa-1140\n" '(5 "HDMI-1"))
                              ("rg-e310\n" '(5 "HDMI-1"))
                              ("jc-s139\n" '(5 "HDMI-1"))
                              ("jc-s1139\n" '(5 "DP-1"))
                              ("rg-p310\n" '(5 "DP-1"))
                              ("entertainment\n" '(5 "HDMI-1"))))
    (pg/set-wallpaper)
    (message "Display config: %s"
             (string-trim (shell-command-to-string "autorandr --current"))))

  (defun pg/exwm-startup ()
    "Initializations."
    (pg/start-panel)
    (pg/herd-service "compton")
    (pg/herd-service "xsettingsd")
    (pg/herd-service "dunst")
    (pg/herd-service "nm-applet")
    (pg/herd-service "syncthing-gtk")
    (pg/herd-service "xss-lock")
    (pg/herd-service "udiskie")
    (pg/herd-service "pasystray")
    (pg/herd-service "xmodmap"))

  ;; (straight-use-package 'exwm)
  (require 'exwm)
  (require 'exwm-config)
  (require 'exwm-randr)
  (require 'exwm-input)
  (with-eval-after-load 'exwm

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'pg/exwm-update-class)
    ;; When exwm starts up
    (add-hook 'exwm-init-hook #'pg/exwm-startup)
    ;; Configure launching of some x windows
    (add-hook 'exwm-manage-finish-hook #'pg/configure-window-by-class)
    ;; Smart display adpatation
    (add-hook 'exwm-randr-screen-change-hook #'pg/update-displays)

    (pg/customize-set-variables
     `((exwm-workspace-number . 6)
       (exwm-workspace-show-all-buffers . t)
       (exwm-input-prefix-keys . (?\C-x
                                  ?\C-g
                                  ?\C-h
                                  ?\M-x
                                  ?\M-`
                                  ?\M-&
                                  ?\M-:
                                  ?\C-\s)) ;; C-SPC
       ;; Reset to line-mode (C-c C-k switches to char-mode via
       ;; `exwm-input-release-keyboard')
       (exwm-input-global-keys . (([?\s-r] . exwm-reset)

                                  ([?\s-\s] . app-launcher-run-app)

                                  ;; Switch between char and line mode
                                  ([?\s-s] . exwm-input-toggle-keyboard)

                                  ;; Launch applications via shell command
                                  ([?\s-t] . (lambda (command)
                                               (interactive (list (read-shell-command "$ ")))
                                               (start-process-shell-command command nil command)))

                                  ;; Switch workspace
                                  ([?\s-w] . exwm-workspace-switch)

                                  ;; Bind the tilde key to workspace 0 when
                                  ;; switching/creating
                                  ([?\s-`] . (lambda ()
                                               (interactive)
                                               (exwm-workspace-switch-create 0)))

                                  ;; 's-N': Switch to certain workspace with Super
                                  ;; plus a number key (0 - 9)
                                  ,@(mapcar (lambda (i)
                                              `(,(kbd (format "s-%d" i)) .
                                                (lambda ()
                                                  (interactive)
                                                  (exwm-workspace-switch-create ,i))))
                                            (number-sequence 0 9))))
       (exwm-manage-configurations . (((string-equal exwm-class-name "Nyxt") char-mode t)))))
    (global-set-key (kbd "C-x B") #'exwm-workspace-switch-to-buffer)
    (define-key exwm-mode-map (kbd "C-q") #'exwm-input-send-next-key)

    (pg/update-displays)

    (exwm-randr-enable)
    (exwm-enable))

    #+end_src

** Package | desktop-environment

Allows for some of the keybindings to use while in exwm.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  ;; (straight-use-package 'desktop-environment)
  (with-eval-after-load 'exwm
    (require 'desktop-environment))
  (with-eval-after-load 'desktop-environment
    (pg/customize-set-variables
     '((desktop-environment-brightness-normal-increment . "5%+")
       (desktop-environment-brightness-normal-decrement . "5%-")
       (desktop-environment-music-toggle-command . "mpc toggle")))
    (desktop-environment-mode)
    (if (fboundp 'diminish)
        (diminish #'desktop-environment-mode)
      (with-eval-after-load 'diminish
        (diminish #'desktop-environment-mode))))

#+end_src

** Keyboard configuration

Remapping some keys to work inside of the desktop environment

#+begin_src sh :tangle ~/.dotfiles/.xmodmaprc

  clear lock
  clear control
  keycode 66 = Control_L
  add control = Control_L
  keycode 105 = Multi_key

#+end_src

** Multiple monitors

In order to setup exwm for multiple monitors, the ~arandr~ and ~autorandr~ applications can come in handy. Some useful commands to know:
- ~autorandr --save profile~ - Saves the current display setup under the name profile
- ~autorandr --change~ - Changes to the appopriate profile with respect to the current display setup; the profile name can be explicitly given to change to it
- ~autorandr~ - Displays the created profiles

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "autorandr")
  (specification->package "xrandr")
  (specification->package "arandr")

#+end_src

** Polybar

Some utility functions.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (defvar pg/polybar-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun pg/kill-panel ()
    "Kills active polybar panel."
    (interactive)
    (when pg/polybar-process
      (ignore-errors
        (kill-process pg/polybar-process)))
    (setq pg/polybar-process nil))

  (defun pg/start-panel ()
    "Starts a polybar panel."
    (interactive)
    (pg/kill-panel)
    (setq pg/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

  (defun pg/send-polybar-hook (module-name hook-index)
    "Displays message using polybar."
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun pg/exwm-workspace-current-index ()
    "Displays current workspace."
    (concat "WS: " (int-to-string exwm-workspace-current-index)))

  (defun pg/send-polybar-exwm-workspace ()
    "Sends workspace information to polybar."
    (pg/send-polybar-hook "exwm-workspace" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'pg/send-polybar-exwm-workspace)

#+end_src

Below is the config file with the various parameters.

#+begin_src conf :tangle ~/.dotfiles/.config/polybar/config

  ; Docs: https://github.com/polybar/polybar
  ;==========================================================

  [settings]
  screenchange-reload = true

  [global/wm]
  margin-top = 0
  margin-bottom = 0

  [colors]
  background = #f0232635
  background-alt = #576075
  foreground = #A6Accd
  foreground-alt = #555
  primary = #ffb52a
  secondary = #e60053
  alert = #bd2c40
  underline-1 = #c792ea

  [bar/panel]
  width = 100%
  height = 30
  offset-x = 0
  offset-y = 0
  fixed-center = true
  enable-ipc = true

  background = ${colors.background}
  foreground = ${colors.foreground}

  line-size = 2
  line-color = #f00

  border-size = 0
  border-color = #00000000

  padding-top = 15
  padding-left = 0
  padding-right = 1

  module-margin = 1
  font-0 = "Cantarell:size=13:weight=bold;1"
  font-1 = "Font Awesome:size=14;2"
  font-2 = "Material Icons:size=14;5"
  font-3 = "Fira Mono:size=12;-3"

  modules-left = exwm-workspace xkeyboard cpu memory
  modules-right = temperature battery backlight date

  tray-position = center
  tray-padding = 2
  tray-maxsize = 28
  ; tray-background = #ffffff

  cursor-click = pointer
  cursor-scroll = ns-resize


  [module/exwm-workspace]
  type = custom/ipc
  hook-0 = emacsclient -e "(pg/exwm-workspace-current-index)" | sed -e 's/^"//' -e 's/"$//'
  initial = 1
  ; format-underline = ${colors.underline-1}
  format-padding = 1

  [module/xkeyboard]
  type = internal/xkeyboard
  ; blacklist-0 = num lock
  format = |   <label-layout>
  format-prefix-font = 1
  format-prefix-foreground = ${colors.foreground-alt}
  label-layout = %icon% %name%
  label-indicator-padding = 2
  label-indicator-margin = 1

  [module/memory]
  type = internal/memory
  interval = 1
  format = |  <label> RAM <bar-used>
  label = %gb_used% / %gb_total%
  bar-used-indicator =
  bar-used-width = 10
  bar-used-foreground-0 = #55aa55
  bar-used-foreground-1 = #557755
  bar-used-foreground-2 = #f5a70a
  bar-used-foreground-3 = #ff5555
  bar-used-fill = ▐
  bar-used-empty = ▐
  bar-used-empty-foreground = #444444

  [module/cpu]
  type = internal/cpu
  interval = 2
  format = | <label> CPU <ramp-coreload>
  ; format-underline = ${colors.underline-1}
  ; click-left = emacsclient -e "(proced)"
  label =  %percentage%%
  ramp-coreload-spacing = 0
  ;ramp-load-0-foreground = ${colors.foreground-alt}
  ramp-coreload-0 = ▁
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇
  ramp-coreload-7 = █

  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  interval = 0.5
  warn-temperature = 60
  format = <ramp> <label> |
  ;format-underline = ${colors.underline-1}
  format-warn = <ramp> <label-warn>
  ;format-warn-underline = ${self.format-underline}
  label = %temperature-c%
  label-warn = %temperature-c%!
  label-warn-foreground = ${colors.secondary}
  ramp-0 = 
  ramp-1 = 
  ramp-2 = 
  ramp-3 = 
  ramp-4 = 

  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = ADP1
  full-at = 100
  time-format = %-l:%M
  label-charging = %percentage%% / %time%
  format-charging = <animation-charging> <label-charging>
  ;format-charging-underline = ${colors.underline-1}
  label-discharging = %percentage%% / %time%
  format-discharging = <ramp-capacity> <label-discharging>
  ;format-discharging-underline = ${self.format-charging-underline}
  format-full = <ramp-capacity> <label-full>
  ;format-full-underline = ${self.format-charging-underline}
  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 
  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-framerate = 750

  [module/backlight]
  type = internal/backlight
  card = intel_backlight
  format = | <ramp> <label> |
  label = %percentage%%
  ramp-0 = 🌕
  ramp-1 = 🌔
  ramp-2 = 🌓
  ramp-3 = 🌒
  ramp-4 = 🌑

  [module/date]
  type = internal/date
  interval = 1.0
  date = "%F %a %b %d"
  time = %I:%M:%S %p
  format = <label>
  ;format-prefix-foreground = ${colors.foreground-alt}
  ;format-underline = ${colors.underline-1}
  label =  %date% |  %time%

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "polybar")

#+end_src

** Dunst

Some utility functions:

- Below are the available ~dunstctl~ commands. Usage: ~dunstctl <command> [parameters]~

| Commands                           | Description                                                                                     |
|------------------------------------+-------------------------------------------------------------------------------------------------|
| ~action~                             | Perform the default action, or open the contexte meny of the notification at the given position |
| ~close~                              | Close the last notification                                                                     |
| ~close-all~                          | Close all notifications                                                                         |
| ~context~                            | Open context menu                                                                               |
| ~history-pop~                        | Pop one notification from history                                                               |
| ~is-paused~                          | Check if dunst is running or paused                                                             |
| ~set-paused [true : false : toggle]~ | Set the pause status                                                                            |
| ~debug~                              | Print debugging information                                                                     |
| ~help~                               | Show this help message                                                                          |

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (defun pg/dunstctl (cmd)
    "Calls dunst special commands."
    (start-process-shell-command "dunstctl" nil (concat "dunstctl " cmd)))

  (exwm-input-set-key (kbd "s-n") (lambda () (interactive) (pg/dunstctl "history-pop")))
  (exwm-input-set-key (kbd "s-c") (lambda () (interactive) (pg/dunstctl "close")))

  (defun pg/disable-desktop-notifications ()
    "Stops notifications from popping."
    (interactive)
    (start-process-shell-command "dunstctl" nil "dunstctl set-paused true"))

  (defun pg/enable-desktop-notifications ()
    "Enables notifications to pop."
    (interactive)
    (start-process-shell-command "dunstctl" nil "dunstctl set-paused false"))

#+end_src

For desktop notifications

#+begin_src conf :tangle ~/.dotfiles/.config/dunst/dunstrc

  [global]
  ### Display ###
  monitor = 0

  # The geometry of the window:
  #   [{width}]x{height}[+/-{x}+/-{y}]
  geometry = "250x10-10+50"

  # Show how many messages are currently hidden (because of geometry).
  indicate_hidden = yes

  # Shrink window if it's smaller than the width.  Will be ignored if
  # width is 0.
  shrink = no

  # The transparency of the window.  Range: [0; 100].
  transparency = 10

  # The height of the entire notification.  If the height is smaller
  # than the font height and padding combined, it will be raised
  # to the font height and padding.
  notification_height = 0

  # Draw a line of "separator_height" pixel height between two
  # notifications.
  # Set to 0 to disable.
  separator_height = 1
  separator_color = frame

  # Padding between text and separator.
  padding = 8

  # Horizontal padding.
  horizontal_padding = 8

  # Defines width in pixels of frame around the notification window.
  # Set to 0 to disable.
  frame_width = 2

  # Defines color of the frame around the notification window.
  frame_color = "#89aaeb"

  # Sort messages by urgency.
  sort = yes

  # Don't remove messages, if the user is idle (no mouse or keyboard input)
  # for longer than idle_threshold seconds.
  idle_threshold = 60

  ### Text ###

  font = Cantarell 16

  # The spacing between lines.  If the height is smaller than the
  # font height, it will get raised to the font height.
  line_height = 0
  markup = full

  # The format of the message.  Possible variables are:
  #   %a  appname
  #   %s  summary
  #   %b  body
  #   %i  iconname (including its path)
  #   %I  iconname (without its path)
  #   %p  progress value if set ([  0%] to [100%]) or nothing
  #   %n  progress value if set without any extra characters
  #   %%  Literal %
  # Markup is allowed
  format = "<b>%s</b>\n%b"

  # Alignment of message text.
  # Possible values are "left", "center" and "right".
  alignment = left

  # Show age of message if message is older than show_age_threshold
  # seconds.
  # Set to -1 to disable.
  show_age_threshold = 60

  # Split notifications into multiple lines if they don't fit into
  # geometry.
  word_wrap = yes

  # When word_wrap is set to no, specify where to make an ellipsis in long lines.
  # Possible values are "start", "middle" and "end".
  ellipsize = middle

  # Ignore newlines '\n' in notifications.
  ignore_newline = no

  # Stack together notifications with the same content
  stack_duplicates = true

  # Hide the count of stacked notifications with the same content
  hide_duplicate_count = false

  # Display indicators for URLs (U) and actions (A).
  show_indicators = yes

  ### Icons ###

  # Align icons left/right/off
  icon_position = left

  # Scale larger icons down to this size, set to 0 to disable
  max_icon_size = 88

  # Paths to default icons.
  icon_path = /home/phil-gab99/.guix-extra-profiles/themes-fonts/themes-fonts/share/icons/Arc/status/128@2x/:/home/phil-gab99/.guix-extra-profiles/themes-fonts/themes-fonts/share/icons/Arc/devices/128@2x/:/home/phil-gab99/.guix-extra-profiles/themes-fonts/themes-fonts/share/icons/Arc/emblems/64@2x/:/home/phil-gab99/.guix-extra-profiles/themes-fonts/themes-fonts/share/icons/Arc/panel/22/

  ### History ###

  # Should a notification popped up from history be sticky or timeout
  # as if it would normally do.
  sticky_history = no

  # Maximum amount of notifications kept in history
  history_length = 20

  ### Misc/Advanced ###

  # Browser for opening urls in context menu.
  browser = qutebrowser

  # Always run rule-defined scripts, even if the notification is suppressed
  always_run_script = true

  # Define the title of the windows spawned by dunst
  title = Dunst

  # Define the class of the windows spawned by dunst
  class = Dunst

  startup_notification = false
  verbosity = mesg

  # Define the corner radius of the notification window
  # in pixel size. If the radius is 0, you have no rounded
  # corners.
  # The radius will be automatically lowered if it exceeds half of the
  # notification height to avoid clipping text and/or icons.
  corner_radius = 4

  mouse_left_click = close_current
  mouse_middle_click = do_action
  mouse_right_click = close_all

  # Experimental features that may or may not work correctly. Do not expect them
  # to have a consistent behaviour across releases.
  [experimental]
  # Calculate the dpi to use on a per-monitor basis.
  # If this setting is enabled the Xft.dpi value will be ignored and instead
  # dunst will attempt to calculate an appropriate dpi value for each monitor
  # using the resolution and physical size. This might be useful in setups
  # where there are multiple screens with very different dpi values.
  per_monitor_dpi = false

  [shortcuts]

  # Shortcuts are specified as [modifier+][modifier+]...key
  # Available modifiers are "ctrl", "mod1" (the alt-key), "mod2",
  # "mod3" and "mod4" (windows-key).
  # Xev might be helpful to find names for keys.

  # Close notification.
  # close = ctrl+space

  # Close all notifications.
  # close_all = ctrl+shift+space

  # Redisplay last message(s).
  # On the US keyboard layout "grave" is normally above TAB and left
  # of "1". Make sure this key actually exists on your keyboard layout,
  # e.g. check output of 'xmodmap -pke'
  # history = mod4+n

  # Context menu.
  # context = ctrl+shift+period

  [urgency_low]
  # IMPORTANT: colors have to be defined in quotation marks.
  # Otherwise the "#" and following would be interpreted as a comment.
  background = "#11bdbd"
  foreground = "#ffffff"
  timeout = 10
  # Icon for notifications with low urgency, uncomment to enable
  #icon = /path/to/icon

  [urgency_normal]
  background = "#1c1f26"
  foreground = "#ffffff"
  timeout = 10
  # Icon for notifications with normal urgency, uncomment to enable
  #icon = /path/to/icon

  [urgency_critical]
  background = "#900000"
  foreground = "#ffffff"
  frame_color = "#ff0000"
  timeout = 10
  # Icon for notifications with critical urgency, uncomment to enable
  #icon = /path/to/icon

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "dunst")
  (specification->package "libnotify") ;; For notify-send

#+end_src

* User Services

Using [[https://www.gnu.org/software/shepherd/][GNU Shepherd]] to manage user-level services that run in the background when logging in.

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.scm

  (use-modules ((ice-9 ftw) #:select (scandir)))

  ;; Run shepherd in background
  (action 'shepherd 'daemonize)

  ;; Load all the files in the directory 'init.d' with a suffix '.scm'.
  (for-each
   (lambda (file)
     (load (string-append "init.d/" file)))
   (scandir (string-append (dirname (current-filename)) "/init.d")
            (lambda (file)
              (string-suffix? ".scm" file))))

#+end_src

** GPG-Agent

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/gpg-agent.scm

  (define gpg-agent
    (make <service>
      #:provides '(gpg-agent)
      #:docstring "Runs `gpg-agent'"
      #:respawn? #t
      #:start (make-system-constructor "gpg-connect-agent /bye")
      #:stop (make-system-destructor "gpgconf --kill gpg-agent")))

  (register-services gpg-agent)
  (start gpg-agent)

#+end_src

** Mcron

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/mcron.scm

  (define mcron
    (make <service>
      #:provides '(mcron)
      #:docstring "Runs `mcron'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("mcron"))
      #:stop (make-kill-destructor)))

  (register-services mcron)
  (start mcron)

#+end_src

** Pulseaudio

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/pulseaudio.scm

  (define pulseaudio
    (make <service>
      #:provides '(pulseaudio)
      #:docstring "Runs `pulseaudio'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("pulseaudio"))
      #:stop (make-kill-destructor)))

  (register-services pulseaudio)
  (start pulseaudio)

#+end_src

** SSH-Agent

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/ssh-agent.scm

  (use-modules (shepherd support))

  (define ssh-agent
    (make <service>
      #:provides '(ssh-agent)
      #:docstring "Run `ssh-agent'"
      #:respawn? #t
      #:start (lambda ()
                (let ((socket-dir (string-append %user-runtime-dir "/ssh-agent")))
                  (unless (file-exists? socket-dir)
                    (mkdir-p socket-dir)
                    (chmod socket-dir #o700))
                  (fork+exec-command
                   `("ssh-agent" "-D" "-a" ,(string-append socket-dir "/socket"))
                   #:log-file (string-append %user-log-dir "/ssh-agent.log"))))
      #:stop (make-kill-destructor)))

  ;; (register-services ssh-agent)
  ;; (start ssh-agent)

#+end_src

** Compton

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/compton.scm

  (define compton
    (make <service>
      #:provides '(compton)
      #:docstring "Runs `compton'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("compton"))
      #:stop (make-kill-destructor)))

  (register-services compton)

#+end_src

** Xsettingsd

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/xsettingsd.scm

  (define xsettingsd
    (make <service>
      #:provides '(xsettingsd)
      #:docstring "Runs `xsettingsd'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("xsettingsd"))
      #:stop (make-kill-destructor)))

  (register-services xsettingsd)

#+end_src

** MPD

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/mpd.scm

  (define mpd
    (make <service>
      #:provides '(mpd)
      #:docstring "Runs `mpd'"
      #:respawn? #f
      #:start (make-forkexec-constructor '("mpd")
                                         #:pid-file "/home/phil-gab99/.config/mpd.pid")
      #:stop (make-kill-destructor)))

  (register-services mpd)
  ;; (start mpd)

#+end_src

** Feh

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/feh.scm

  (define feh
    (make <service>
      #:provides '(feh)
      #:docstring "Runs `feh'"
      #:respawn? #f
      #:one-shot? #t
      #:start (make-system-constructor "feh --bg-scale ~/Pictures/wp-color-triangle.png")))

  (register-services feh)

#+end_src

** Dunst

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/dunst.scm

  (define dunst
    (make <service>
      #:provides '(dunst)
      #:docstring "Runs `dunst'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("dunst"))
      #:stop (make-kill-destructor)))

  (register-services dunst)

#+end_src

** Nm-applet

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/nm-applet.scm

  (define nm-applet
    (make <service>
      #:provides '(nm-applet)
      #:docstring "Runs `nm-applet'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("nm-applet"))
      #:stop (make-kill-destructor)))

  (register-services nm-applet)

#+end_src

** Udiskie

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/udiskie.scm

  (define udiskie
    (make <service>
      #:provides '(udiskie)
      #:docstring "Runs `udiskie'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("udiskie" "-t"))
      #:stop (make-kill-destructor)))

  (register-services udiskie)

#+end_src

** Pasystray

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/pasystray.scm

  (define pasystray
    (make <service>
      #:provides '(pasystray)
      #:docstring "Runs `pasystray'"
      #:respawn? #t
      #:start (make-forkexec-constructor '("pasystray"))
      #:stop (make-kill-destructor)))

  (register-services pasystray)

#+end_src

** Autorandr

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/autorandr.scm

  (define autorandr
    (make <service>
      #:provides '(autorandr)
      #:docstring "Runs `autorandr'"
      #:respawn? #f
      #:one-shot? #t
      #:start (make-system-constructor "autorandr --change --force")))

  (register-services autorandr)

#+end_src

** Xmodmap

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/xmodmap.scm

  (define xmodmap
    (make <service>
      #:provides '(xmodmap)
      #:docstring "Runs `xmodmap'"
      #:respawn? #f
      #:one-shot? #t
      #:start (make-system-constructor "xmodmap ~/.xmodmaprc")))

  (register-services xmodmap)

#+end_src

** Syncthing

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/syncthing.scm

  (define syncthing
    (make <service>
      #:provides '(syncthing)
      #:respawn? #t
      #:start (make-forkexec-constructor '("syncthing" "-no-browser"))
      #:stop (make-kill-destructor)))

  (register-services syncthing)
  (start syncthing)

#+end_src

** Syncthing-gtk

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/syncthing.scm

  (define syncthing-gtk
    (make <service>
      #:provides '(syncthing-gtk)
      #:respawn? #t
      #:start (make-forkexec-constructor '("syncthing-gtk" "--minimized"))
      #:stop (make-kill-destructor)))

  (register-services syncthing-gtk)

#+end_src

** XSS-lock

#+begin_src scheme :tangle ~/.dotfiles/.config/shepherd/init.d/xss-lock.scm

  (define xss-lock
    (make <service>
      #:provides '(xss-lock)
      #:respawn? #t
      #:start (make-forkexec-constructor '("xss-lock" "--" "slock"))
      #:stop (make-kill-destructor)))

  (register-services xss-lock)

#+end_src

* Applications

** Audio Device Control

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/audio.scm :noweb yes

  (packages->manifest
   (list
    (specification->package "alsa-utils")
    (specification->package "pavucontrol")
    (specification->package "pasystray")
    (specification->package "mpd")
    (specification->package "mpd-mpc")
    (specification->package "bluez")))

#+end_src

** Bluetooth Setup

If need to manually connect to Bluetooth audio devices using ~bluetoothctl~, enter these commands at the ~bluetoothctl~ prompt:

#+begin_src sh

  system-alias "my-hostname" # To configure your laptop's device name, ex: s76-laptop
  default-agent
  power on
  scan on
  # Wait for your device to appear
  pair 04:52:C7:5E:5C:A8
  trust 04:52:C7:5E:5C:A8 # To enable auto-connect
  connect 04:52:C7:5E:5C:A8

#+end_src

** Browsers

*** Nyxt

*init.lisp*
    
#+begin_src lisp :tangle ~/.dotfiles/.config/nyxt/init.lisp

  (in-package #:nyxt-user)

  (defvar *request-resource-handlers* nil
    "The list of handlers to add to `request-resource-hook'.
  These handlers are usually used to block/redirect the requests.")

  (dolist (file
	   (list (nyxt-init-file "evil-mode.lisp")
		 (nyxt-init-file "status.lisp")
		 (nyxt-init-file "adblock.lisp")
		 (nyxt-init-file "style.lisp")))
    (load file))

  (load-after-system :nx-search-engines (nyxt-init-file "search-engines.lisp"))
  (load-after-system :nx-freestance-handler (nyxt-init-file "freestance.lisp"))
  ;; (load-after-system :nx-dark-reader (nyxt-init-file "dark-reader.lisp"))

  (define-configuration web-buffer
      ((request-resource-hook
	(reduce #'hooks:add-hook
		(mapcar #'make-handler-resource
			,*request-resource-handlers*)
		:initial-value %slot-default%))))

  (define-configuration browser
    ;; This is for Nyxt to never prompt me about restoring the previous session.
      ((session-restore-prompt :never-restore)
       (external-editor-program (list "emacsclient" "-c"))))

  ;;; Those are settings that every type of buffer should share
  (define-configuration (buffer web-buffer internal-buffer editor-buffer prompt-buffer)
    ((default-modes (append '(evil-normal-mode) %slot-default%))
     (download-engine :renderer)
     (current-zoom-ratio 1.25)))

  (define-configuration (prompt-buffer)
      ((default-modes (append '(evil-insert-mode) %slot-default%))))

  (define-configuration buffer
    ((default-new-buffer-url "https://duckduckgo.com")))

#+end_src

*evil-mode.lisp*

#+begin_src lisp :tangle ~/.dotfiles/.config/nyxt/evil-mode.lisp

  (in-package #:nyxt-user)

  ;; * Evil normal
  (define-mode evil-normal-mode ()
    "Enable evil style modal bindings (normal mode).
  To enable these bindings by default, add the mode to the list of default modes
  in your configuration file.

  Example:

  \(define-configuration buffer
    ((default-modes (append '(evil-normal-mode) %slot-default%))))

  In `evil-insert-mode', CUA bindings are still available unless
  `application-mode-p' is non-nil in `evil-insert-mode'.
  You can also enable `application-mode' manually to forward all keybindings to
  the web page.

  See also `evil-insert-mode'."
    ((glyph "N")
     (previous-keymap-scheme-name
      nil
      :type (or keymap:scheme-name null)
      :documentation "The previous keymap scheme that will be used when ending
      normal-mode")
     (keymap-scheme
      (define-scheme "evil-normal"
	scheme:vi-normal
	'("i" evil-insert-mode
	  "button1" evil-button1)))
     (destructor
      (lambda (mode)
	(setf (keymap-scheme-name (buffer mode))
	      (previous-keymap-scheme-name mode))
	 (setf (forward-input-events-p (buffer mode)) t)))
     (constructor
      (lambda (mode)
	(with-accessors
	 ((buffer buffer)) mode
	 (let ((evil-insert (find-submode buffer 'evil-insert-mode)))
	   (setf (previous-keymap-scheme-name mode)
		 (if evil-insert
		     (previous-keymap-scheme-name evil-insert)
		   (keymap-scheme-name buffer))))
	 ;; Destroy evil-normal mode after setting previous-keymap-scheme-name,
	 ;; or else we can't save the previous keymap scheme.
	 (evil-insert-mode :activate nil :buffer buffer)
	 (setf (keymap-scheme-name buffer) scheme:vi-normal)
	 (setf (forward-input-events-p buffer) nil))))))

  ;; * Evil insert
  (define-mode evil-insert-mode ()
    "Enable evil-insert-style modal bindings (insert mode).
  See `evil-normal-mode'."
    ((glyph "I")
     (rememberable-p nil)
     (previous-keymap-scheme-name nil
      :type (or keymap:scheme-name null)
      :documentation "The previous keymap scheme that will be used when ending
  vi-normal-mode.")
     (previous-evil-normal-mode nil
      :type (or evil-normal-mode null)
      :documentation "The `evil-normal-mode' that this insert mode is tied to.")
     (keymap-scheme
      (define-scheme "evil-insert"
	scheme:vi-insert
	'("button1" evil-button1
	  "C-g" nyxt/prompt-buffer-mode:cancel-input
	  "escape" switch-to-evil-normal-mode)))
     (destructor
      (lambda (mode)
	(setf (keymap-scheme-name (buffer mode))
	      (previous-keymap-scheme-name mode))))
     (constructor
      (lambda (mode)
	(with-accessors ((buffer buffer)) mode
	  (let ((evil-normal (find-submode buffer 'evil-normal-mode)))
	    (setf (previous-keymap-scheme-name mode)
		  (if evil-normal
		      (previous-keymap-scheme-name evil-normal)
		      (keymap-scheme-name buffer))
		  (previous-evil-normal-mode mode)
		  evil-normal))
	  (evil-normal-mode :activate nil :buffer buffer)
	  (setf (keymap-scheme-name buffer) scheme:vi-insert))))))


  ;; * Insert to normal
  (define-command switch-to-evil-normal-mode
      (&optional (mode
		  (find-submode (or (current-prompt-buffer) (current-buffer))
				'evil-insert-mode)))
    "Switch to the mode remembered to be the matching evil-normal one for this
    MODE. See also `evil-normal-mode' and `evil-insert-mode'."
    (when mode
      (enable-modes (list (or (and (previous-evil-normal-mode mode)
				   (mode-name (previous-evil-normal-mode mode)))
			      'evil-normal-mode))
		    (buffer mode))))

  (define-command evil-button1
      (&optional (buffer (or (current-prompt-buffer)
			     (current-buffer))))
    "Enable evil insert mode when focus is on an input element on the web page.
  See also `evil-normal-mode' and `evil-insert-mode'."
    (forward-to-renderer :window (current-window) :buffer buffer)
    (let ((response (nyxt/web-mode:%clicked-in-input? buffer)))
      (cond
	((and (nyxt/web-mode:input-tag-p response)
	      (find-submode buffer 'evil-normal-mode))
	 (evil-insert-mode))
	((and (not (nyxt/web-mode:input-tag-p response))
	      (find-submode buffer 'evil-insert-mode))
	 (evil-normal-mode)))))

  (define-configuration base-mode
      ((keymap-scheme
	(define-scheme "evil-base"
	  scheme:vi-normal
	  '("C-x C-c" quit
	    "C-x C-f" open-file
	    "[" switch-buffer-previous
	    "]" switch-buffer-next
	    "M-x" execute-command
	    "C-x k" delete-buffer
	    "C-x b" switch-buffer
	    "g r" reload-current-buffer
	    "o" set-url
	    "O" set-url-new-buffer
	    "m u" bookmark-url
	    "m d" delete-bookmark
	    "m l" list-bookmarks
	    "y u" copy-url
	    "y t" copy-title
	    "C-h h" help
	    "C-h C" describe-class
	    "C-h b" describe-bindings
	    "C-h c" describe-command
	    "C-h f" describe-function
	    "C-h k" describe-key
	    "C-h r" manual
	    "C-h s" describe-slot
	    "C-h t" tutorial
	    "C-h v" describe-variable
	    "w w" make-window
	    "w q" delete-current-window
	    "v" nyxt/visual-mode:visual-mode
	    "u" reopen-buffer)))))

  (define-configuration prompt-buffer
      ((keymap-scheme
	(define-scheme "evil-prompt"
	  scheme:vi-normal
	  '("C-j" select-next
	    "C-k" select-previous
	    "C-g" cancel-input)))))

  (define-configuration nyxt/web-mode:web-mode
      ((keymap-scheme
	(define-scheme "evil-web"
	  scheme:vi-normal
	  '("C-s" nyxt/web-mode:search-buffer
	    "H" nyxt/web-mode:history-backwards
	    "L" nyxt/web-mode:history-forwards
	    "y y" nyxt/web-mode:copy
	    "p" nyxt/web-mode:paste
	    "d d" nyxt/web-mode:cut
	    "u" nyxt/web-mode:undo
	    "f" nyxt/web-mode:follow-hint
	    "F" nyxt/web-mode:follow-hint-new-buffer
	    "C-r" nyxt/web-mode:redo
	    "m f" nyxt/web-mode:bookmark-hint
	    "+" nyxt/web-mode:zoom-page
	    "hyphen" nyxt/web-mode:unzoom-page
	    "=" nyxt/web-mode:reset-page-zoom
	    "j" nyxt/web-mode:scroll-down
	    "k" nyxt/web-mode:scroll-up
	    "h" nyxt/web-mode:scroll-left
	    "j" nyxt/web-mode:scroll-down
	    "k" nyxt/web-mode:scroll-up
	    "l" nyxt/web-mode:scroll-right
	    "G" nyxt/web-mode:scroll-to-bottom
	    "g g" nyxt/web-mode:scroll-to-top
	    "C-d" nyxt/web-mode:scroll-page-down
	    "C-u" nyxt/web-mode:scroll-page-up)))))

  (define-configuration nyxt/visual-mode:visual-mode
    ((keymap-scheme
      (define-scheme "evil-visual"
	scheme:vi-normal
	'("h" nyxt/visual-mode:backward-char
	  "j" nyxt/visual-mode:forward-line
	  "k" nyxt/visual-mode:backward-line
	  "l" nyxt/visual-mode:forward-char
	  "w" nyxt/visual-mode:forward-word
	  "e" nyxt/visual-mode:forward-word
	  "b" nyxt/visual-mode:backward-word
	  "$" nyxt/visual-mode:end-line
	  ")" nyxt/visual-mode:forward-sentence
	  "(" nyxt/visual-mode:backward-sentence
	  "}" nyxt/visual-mode:forward-paragraph
	  "{" nyxt/visual-mode:backward-paragraph
	  "C-u" nyxt/visual-mode:forward-document
	  "C-d" nyxt/visual-mode:backward-document
	  "0" nyxt/visual-mode:beginning-line
	  "C-g" nyxt/visual-mode:toggle-mark
	  "C-c" nyxt/visual-mode:visual-mode)))))

#+end_src

*status.lisp*

#+begin_src lisp :tangle ~/.dotfiles/.config/nyxt/status.lisp

  (in-package #:nyxt-user)

  ;;; Display modes as short glyphs (listed below) in the mode line
  ;;; (bottom-right of the screen).
  (define-configuration status-buffer
    ((glyph-mode-presentation-p t)))

  (define-configuration nyxt/force-https-mode:force-https-mode ((glyph "ϕ")))
  (define-configuration nyxt/blocker-mode:blocker-mode ((glyph "β")))
  (define-configuration nyxt/proxy-mode:proxy-mode ((glyph "π")))
  (define-configuration nyxt/reduce-tracking-mode:reduce-tracking-mode
    ((glyph "τ")))
  (define-configuration nyxt/certificate-exception-mode:certificate-exception-mode
    ((glyph "χ")))
  (define-configuration nyxt/style-mode:style-mode ((glyph "ϕ")))
  (define-configuration nyxt/help-mode:help-mode ((glyph "?")))
  (define-configuration nyxt/web-mode:web-mode ((glyph "ω")))
  (define-configuration nyxt/auto-mode:auto-mode ((glyph "α")))
  (define-configuration nyxt/cruise-control-mode:cruise-control-mode ((glyph "σ")))

#+end_src

*adblock.lisp*

#+begin_src lisp :tangle ~/.dotfiles/.config/nyxt/adblock.lisp

  (in-package #:nyxt)

  (define-configuration nyxt/blocker-mode:blocker-mode
    ((nyxt/blocker-mode:hostlists
      (mapcar (lambda (h)
		;; Update every minute
		(setf (nyxt/blocker-mode:update-interval h) 60))
	      %slot-default%))))

  (define-configuration buffer
    ((default-modes (append '(blocker-mode noscript-mode) %slot-default%))))

#+end_src

*style.lisp*

#+begin_src lisp :tangle ~/.dotfiles/.config/nyxt/style.lisp

  (in-package #:nyxt-user)

  (define-configuration window
      ((message-buffer-style
	(str:concat
	 %slot-default%
	 (cl-css:css
	  '((body
	     :background-color "#282c34"
	     :color "#cccccc")))))))
  ;;; Color config for prompt-buffer (minibuffer in Emacs parlance).
  (define-configuration prompt-buffer
      ((style (str:concat
	       %slot-default%
	       (cl-css:css
		'((body
		   :background-color "#282c34"
		   :color "#cccccc")
		  ("#prompt-area"
		   :background-color "#282c34")
		  ;; The area you input text in.
		  ("#input"
		   :background-color "#cccccc")
		  (".source-name"
		   :color "#cccccc"
		   :background-color "#202231")
		  (".source-content"
		   :background-color "#282c34")
		  (".source-content th"
		   :border "1px solid #202231"
		   :background-color "#282c34")
		  ;; The currently highlighted option.
		  ("#selection"
		   :background-color "#98f979"
		   :color "#282c34")
		  (.marked :background-color "#4682d9"
			   :font-weight "bold"
			   :color "#cccccc")
		  (.selected :background-color "#282c34"
			     :color "#cccccc")))))))
  ;;; Internal (i.e. help, info, describe-* buffers). Usually work for
  ;;; simple HTML display, so I'm overriding lots of things there.
  ;;;
  ;;; Panel buffers are the same in regards to style.
  (define-configuration (internal-buffer panel-buffer)
      ((style
	(str:concat
	 %slot-default%
	 (cl-css:css
	  '((title
	     :color "#cccccc")
	    (body
	     :background-color "#282c34"
	     :color "#cccccc")
	    (hr
	     :color "#eead0e")
	    (a
	     :color "#61afef")
	    (.button
	     :color "#ffffff"
	     :background-color "#006fff")))))))
  ;;; History-tree-mode is a mode used in `history-tree' and
  ;;; `buffer-history-tree' buffers. It's not enough to customize
  ;;; `internal-buffer' to cover it, thus I'm customizing it
  ;;; specifically.
  (define-configuration nyxt/history-tree-mode:history-tree-mode
      ((nyxt/history-tree-mode::style
	(str:concat
	 %slot-default%
	 (cl-css:css
	  '((body
	     :background-color "#282c34"
	     :color "#cccccc")
	    (hr
	     :color "#cccccc")
	    (a
	     :color "#61afef")
	    ;; Those three below are here to color the tree-branching list
	    ;; markers in white.
	    ("ul li::before"
	     :background-color "#cccccc")
	    ("ul li::after"
	     :background-color "#cccccc")
	    ("ul li:only-child::before"
	     :background-color "#cccccc")))))))
  (define-configuration nyxt/web-mode:web-mode
      ;; The style of highlighted boxes, e.g. link hints.
      ((nyxt/web-mode:highlighted-box-style
	(cl-css:css
	 '((".nyxt-hint.nyxt-highlight-hint"
	    :font-weight "normal"
	    :background "#494949"))))))
  ;;; Status buffer is the strip above the message buffer/echo area.
  ;;; Modeline in Emacs parlance.
  (define-configuration status-buffer
      ((style (str:concat
	       %slot-default%
	       (cl-css:css
	      ;; Arrows on the left.
		'(("#controls"
		   :border-top "1px solid #ffffff"
		   :background-color "#737373")
		  ;; To the right of the arrows.
		  ("#url"
		   :background-color "#21252b"
		   :color "#cccccc"
		   :border-top "1px solid #cccccc")
		  ;; Far to the right.
		  ("#modes"
		   :background-color "#21252b"
		   :border-top "1px solid #cccccc")
		  ;; The center segment.
		  ("#tabs"
		   :background-color "#737373"
		   :color "#282c34"
		   :border-top "1px solid #cccccc")))))))
  (define-configuration nyxt/style-mode:dark-mode
      ((style #.(cl-css:css
		 '((*
		    :background-color "#282c34 !important"
		    :background-image "none !important"
		    :color "#cccccc")
		   (a
		    :background-color "#282c34 !important"
		    :background-image "none !important"
		    :color "#556B2F !important"))))))

#+end_src

*freestance.lisp*

#+begin_src lisp :tangle ~/.dotfiles/.config/nyxt/freestance.lisp

  (in-package #:nyxt-user)

  (setq *request-resource-handlers*
	(nconc *request-resource-handlers*
	       nx-freestance-handler:*freestance-handlers*))

#+end_src

*dark-reader.lisp*

#+begin_src lisp :tangle ~/.dotfiles/.config/nyxt/dark-reader.lisp

  (in-package #:nyxt-user)

  (define-configuration nx-dark-reader:dark-reader-mode
    ((nxdr:selection-color "#494949")
     (nxdr:background-color "#282c34")
     (nxdr:text-color "#cccccc")))

  (push 'nx-dark-reader:dark-reader-mode *web-buffer-modes*)

#+end_src

*search-engines.lisp*

#+begin_src lisp :tangle ~/.dotfiles/.config/nyxt/search-engines.lisp

  (in-package #:nyxt-user)

  ;;;; This is a file with settings for my nx-search-engines extension.

  ;;; My DDG settings, shared between the usual, image-search and other
  ;;; types of DuckDuckGo.
  (defvar *duckduckgo-keywords*
    '(:theme :dark
      :help-improve-duckduckgo nil
      :homepage-privacy-tips nil
      :privacy-newsletter nil
      :newsletter-reminders nil
      :install-reminders nil
      :install-duckduckgo nil
      :units-of-measure :metric
      :keyboard-shortcuts t
      :advertisements nil
      :open-in-new-tab nil
      :infinite-scroll t
      :safe-search :off
      :font-size :medium
      :header-behavior :on-fixed
      :font :helvetica
      :background-color "000000"
      :center-alignment t))

  (define-configuration buffer
      ((search-engines
	(list
	 ;; engines: is a prefix for `nx-search-engines',
	 ;; it only works if you load nx-search-engines.
	 (engines:google :shortcut "gmaps"
			 :object :maps)
	 (engines:wikipedia :shortcut "w")
	 (engines:google :shortcut "g"
			 :safe-search nil)
	 (apply #'engines:duckduckgo-images
		:shortcut "i" *duckduckgo-keywords*)
	 (engines:duckduckgo-html-only :shortcut "dho")
	 (engines:github :shortcut "git")
	 (apply #'engines:duckduckgo
		:shortcut "d" *duckduckgo-keywords*)))))

#+end_src

*** Qutebrowser

*Main configuration*

#+begin_src python :tangle ~/.dotfiles/.config/qutebrowser/config.py :noweb yes

  import sys, os

  ################################################################################
  # ALIASES
  ################################################################################

  # Type - dict
  c.aliases = {
      'w': 'session-save',
      'q': 'close',
      'qa': 'quit',
      'wq': 'quit --save',
      'wqa': 'quit --save'
  }

  ################################################################################
  # TABS AND WINDOW MANAGEMENT
  ################################################################################

  # Open new window for every tab
  # Type - Bool
  c.tabs.tabs_are_windows = False

  # When to show tab bar
  # Type - String
  # Values - always    -> Always show tab bar
  #          never     -> Always hide tab bar
  #          multuple  -> Hide tab bar if only one tab open
  #          switching -> Show tab bar when switching tabs
  c.tabs.show = 'multiple'

  # Behaviour on last closed tab
  # Type - String
  # Values - ignore       -> Do nothing
  #          blank        -> Load blank page
  #          startpage    -> Load start page
  #          default-page -> Load default page
  #          close        -> Close window
  c.tabs.last_close = 'close'

  # Auto save session
  # Type - Bool
  c.auto_save.session = True

  # Enable smooth scrolling
  # Type - Bool
  c.scrolling.smooth = True

  # Load a restored tab as soon as it takes focus.
  # Type - Bool
  c.session.lazy_restore = True

  ################################################################################
  # FONTS AND THEMES
  ################################################################################

  # Font family for standard fonts
  # Type - FontFamily
  c.fonts.web.family.standard = 'Bitstream Vera Sans'

  # Font family for serif fonts
  # Type - FontFamily
  c.fonts.web.family.serif = 'Bitstream Vera Serif'

  # Font family for sans-serif fonts.
  # Type: FontFamily
  c.fonts.web.family.sans_serif = 'Bitstream Vera Sans'

  # Font family for fixed fonts.
  # Type: FontFamily
  c.fonts.web.family.fixed = 'Fira Mono'

  # Font used for hints
  # Type - Font
  c.fonts.hints = 'bold 12pt monospace'

  # Font used in statusbar
  # Type - Font
  c.fonts.statusbar = '12pt Cantarell'

  # Render web contents using dark theme
  # Type - Bool
  c.colors.webpage.darkmode.enabled = False

  # Which images to apply dark mode to
  # Type - String
  # Values - always -> Apply dark mode filter to all images
  #          never  -> Never apply dark mode filter to any images
  #          smart  -> Apply dark mode based on image content
  c.colors.webpage.darkmode.policy.images = 'never'

  # Background color for webpages
  # Type - QtColor
  # c.colors.webpage.bg = 'black'

  ################################################################################
  # EDITING
  ################################################################################

  # Automatically turn on insert mode when a loaded page focuses a text field
  # Type - Bool
  c.input.insert_mode.auto_load = True

  # Edit fields in Emacs with Ctrl+E
  # Type - ShellCommand
  c.editor.command = ["emacsclient", "+{line}:{column}", "{file}"]

  ################################################################################
  # CONTENT VIEWING
  ################################################################################

  # Allow pdf.js to view PDF files in browser
  # Type - Bool
  c.content.pdfjs = False

  # Autoplay video elements
  # Type - Bool
  c.content.autoplay = False

  ################################################################################
  # ADBLOCKING - TODO
  ################################################################################
  # sys.path.append(os.path.join(sys.path[0], 'jmatrix'))
  # config.source("jmatrix/jmatrix/integrations/qutebrowser.py")
  # c.content.blocking.enabled = True
  # c.content.blocking.method = "auto"
  # c.content.blocking.adblock.lists = [
  #     'https://easylist.to/easylist/easylist.txt',
  #     'https://easylist.to/easylist/easyprivacy.txt',
  #     'https://easylist.to/easylist/fanboy-annoyance.txt',
  #     'https://easylist-downloads.adblockplus.org/abp-filters-anti-cv.txt',
  #     'https://secure.fanboy.co.nz/fanboy-annoyance.txt',
  #     'https://secure.fanboy.co.nz/fanboy-cookiemonster.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/legacy.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/annoyances.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/badware.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/privacy.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/resource-abuse.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/unbreak.txt'
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/badlists.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2020.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2021.txt',
  #     'https://www.malwaredomainlist.com/hostslist/hosts.txt',
  #     'https://www.i-dont-care-about-cookies.eu/abp/',
  #     'https://pgl.yoyo.org/adservers/serverlist.php?showintro=0;hostformat=hosts',
  #     'https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=1&mimetype=plaintext'
  # ]

  ################################################################################
  # KEYBINDINGS
  ################################################################################

  ## Normal mode ##
  config.bind('J', 'tab-prev')
  config.bind('K', 'tab-next')
  config.unbind('d') # Don't close tab on lower-case 'd'
  config.bind('yy', 'yank')
  config.bind(',m', 'spawn mpv {url}')
  config.bind(',M', 'hint links spawn mpv {hint-url}')

  ## Command mode ##
  config.bind('<ctrl-g>', 'mode-leave', mode='command')
  config.bind('<ctrl-j>', 'completion-item-focus --history next', mode='command')
  config.bind('<ctrl-k>', 'completion-item-focus --history prev', mode='command')

  ## Hint mode ##
  config.bind('<Ctrl-g>', 'mode-leave', mode='hint')

  ## Insert mode ##
  config.bind('<ctrl-g>', 'mode-leave', mode='insert')

  ## Prompt mode ##
  config.bind('<ctrl-g>', 'mode-leave', mode='prompt')
  config.bind('<ctrl-j>', 'prompt-item-focus next', mode='prompt')
  config.bind('<ctrl-k>', 'prompt-item-focus prev', mode='prompt')
  config.unbind('<Tab>', mode='prompt')

  ################################################################################
  # MISC
  ################################################################################

  # Additional arguments to pass to Qt, without leading '--'
  # Type - List of String
  c.qt.args = ['disable-seccomp-filter-sandbox'] # Fix rendering issue

  # Load the autoconfig file (quteconfig.py)
  config.load_autoconfig()

#+end_src

*Relevant bookmarks*

#+begin_src conf :tangle ~/.dotfiles/.config/qutebrowser/quickmarks

  gn https://github.com/notifications
  dot https://github.com/phil-gab99/dotfiles
  ddg https://duckduckgo.com/?q
  gh https://github.com
  yt https://youtube.com
  st https://studium.umontreal.ca/my/index.php
  sc https://academique-dmz.synchro.umontreal.ca
  cups http://localhost:631
  sync http://localhost:8384
  fb https://www.facebook.com/philippe.gabriel99
  li https://www.linkedin.com/in/philippe-gabriel-52b945149
  sb https://www.scotiaonline.scotiabank.com/online/views/accounts/summary/summaryStandard.bns?SBL=all&convid=60975
  rbc https://secure.royalbank.com/statics/login-service-ui/index#/full/signin?LANGUAGE=ENGLISH
  ctfs https://www.ctfs.com/content/dash/en/private/Summary.html
  naruto https://www18.naruspot.tv
  ygo https://9anime.st/watch-anime/yugioh-go-rush/eps/001
  op https://9anime.st/watch-anime/one-piece/eps/001
  mal https://myanimelist.net/animelist/Ramenphile
  whatsapp https://web.whatsapp.com
  msdesk http://mydesk.morganstanley.com

#+end_src

*JMatrix Rules*

#+begin_src conf :tangle ~/.dotfiles/.config/qutebrowser/jmatrix-rules

  # WARNING: This file can be overwritten easily with the :jmatrix-write-rules command
  # When data is overwritten, formatting and comments will be lost.
  # Please exercise caution when editing this file directly, and make sure to keep backups.
  # * cookie css image media script xhr frame other

  https-strict: behind-the-scene false
  matrix-off: about-scheme true
  matrix-off: behind-the-scene true
  matrix-off: chrome-extension-scheme true
  matrix-off: chrome-scheme true
  matrix-off: moz-extension-scheme true
  matrix-off: opera-scheme true
  matrix-off: vivaldi-scheme true
  matrix-off: wyciwyg-scheme true
  matrix-off: qute-scheme true
  noscript-spoof: * true
  referrer-spoof: * true
  referrer-spoof: behind-the-scene false
  * * * block
  * * css allow
  * * frame block
  * * image allow
  * 1st-party * allow
  * 1st-party frame allow

  # Github
  github.com * script allow

  # Youtube
  # youtube.com rr1---sn-t0a7sn7d.googlevideo.com xhr block
  # youtube.com rr1---sn-8qu-t0a6.googlevideo.com xhr block
  # youtube.com rr1---sn-8qu-t0ak.googlevideo.com xhr block
  # youtube.com rr1---sn-t0a7ln7d.googlevideo.com xhr block
  youtube.com rr1---sn-8qu-t0aee.googlevideo.com image block
  youtube.com rr1---sn-8qu-t0aee.googlevideo.com xhr block
  youtube.com rr1---sn-8qu-t0ak.googlevideo.com image block
  youtube.com rr1---sn-8qu-t0a6.googlevideo.com image block
  youtube.com rr2---sn-8qu-t0aee.googlevideo.com xhr block
  youtube.com rr2---sn-t0a7sn7d.googlevideo.com xhr block
  youtube.com rr3---sn-t0a7ln7d.googlevideo.com xhr block
  youtube.com rr3---sn-t0a7sn7d.googlevideo.com xhr block
  youtube.com rr3---sn-8qu-t0aee.googlevideo.com xhr block
  youtube.com rr3---sn-8qu-t0aee.googlevideo.com image block
  # youtube.com rr3---sn-t0a7sn7d.googlevideo.com xhr block
  youtube.com rr4---sn-vgqsknll.googlevideo.com xhr block
  youtube.com rr4---sn-8qu-t0ak.googlevideo.com xhr block
  youtube.com rr4---sn-8qu-t0ay.googlevideo.com xhr block
  youtube.com rr4---sn-8qu-t0ak.googlevideo.com image block
  youtube.com rr4---sn-8qu-t0ay.googlevideo.com image block
  youtube.com rr4---sn-t0a7ln7d.googlevideo.com xhr block
  youtube.com r5---sn-8qu-t0ay.googlevideo.com other block
  youtube.com rr5---sn-t0a7sn7d.googlevideo.com xhr block
  youtube.com rr5---sn-t0a7ln7d.googlevideo.com xhr block
  youtube.com rr5---sn-vgqsrnz7.googlevideo.com xhr block
  youtube.com rr6---sn-8qu-t0ay.googlevideo.com xhr block
  youtube.com rr6---sn-8qu-t0a6.googlevideo.com xhr block
  youtube.com rr7---sn-8qu-t0a6.googlevideo.com xhr block
  youtube.com rr7---sn-8qu-t0ay.googlevideo.com image block
  youtube.com rr7---sn-8qu-t0ay.googlevideo.com xhr block
  youtube.com rr7---sn-8qu-t0a6.googlevideo.com image block
  youtube.com r8---sn-8qu-t0a6.googlevideo.com other allow
  youtube.com rr8---sn-8qu-t0ak.googlevideo.com xhr block
  youtube.com rr8---sn-8qu-t0ak.googlevideo.com image block
  youtube.com rr8---sn-8qu-t0a6.googlevideo.com xhr block
  # youtube.com yt3.ggpht.com image block
  youtube.com tpc.googlesyndication.com image block
  youtube.com tpc.googlesyndication.com script block
  # youtube.com googleads.g.doubleclick.net image block
  # youtube.com googleads.g.doubleclick.net xhr block
  youtube.com jnn-pa.googleapis.com xhr allow
  youtube.com static.doubleclick.net script allow
  youtube.com www.googleadservices.com * block
  youtube.com lh6.googleusercontent.com image block
  # youtube.com fonts.googleapis.com css block
  youtube.com fonts.gstatic.com other allow
  youtube.com lh4.googleusercontent.com image block
  # youtube.com www.gstatic.com image block
  youtube.com www.gstatic.com script allow
  youtube.com www.gstatic.com xhr allow
  youtube.com play.google.com xhr allow
  youtube.com www.google.com script allow
  # youtube.com www.google.com image block
  # youtube.com www.google.ca image block
  youtube.com googlevideo.com xhr allow
  youtube.com s.ytimg.com script allow
  youtube.com s.ytimg.com xhr allow
  youtube.com i.ytimg.com other allow
  youtube.com suggestqueries-clients6.youtube.com script block
  youtube.com ad.doubleclick.net

  # Google
  google.com content.googleapis.com frame allow
  google.com content.googleapis.com script allow
  google.com ssl.gstatic.com media allow
  google.com ssl.gstatic.com script allow
  google.com ssl.gstatic.com xhr allow
  google.com translate.googleapis.com script allow
  google.com translate.googleapis.com xhr allow
  google.com translate.googleusercontent.com frame allow
  google.com translate.googleusercontent.com script allow
  google.com www.gstatic.com script allow
  google.com www.gstatic.com xhr allow

  # System Crafters
  systemcrafters.cc * * allow
  systemcrafters.net * * allow

  # 9anime
  9anime.st * media allow
  9anime.st * xhr allow
  9anime.st * script allow
  9anime.st * frame allow
  9anime.st * css allow
  9anime.st player.min.js * block
  9anime.st descendantmystery.com * block
  # 9anime.st toglooman.com script block
  # 9anime.st dozubatan.cpm script block
  9anime.st 3rd-party * block
  9anime.st outoctillerytor.com * block
  9anime.st pijmdswtxtcg.com * block
  9anime.st el.risingbelouke.com * block
  9anime.st thaudray.com * block
  9anime.st tzegilo.com * block
  9anime.st lc.impavidcircean.com * block
  # 9anime.st gogohd.net * block
  # 9anime.st ssl.p.jwpcdn.com * block
  # 9anime.st ld.heartedicefall.com * block
  9anime.st waust.at * block
  9anime.st whos.amung.us * block
  9anime.st rlxkmkyrvqt.com xhr block 
  9anime.st my.rtmark.net xhr block
  9anime.st offerimage.com xhr block
  9anime.st rlxkmkyrvqt.com frame block
  9anime.st v10.bunnycdn.se frame block
  # 9anime.st v11.bunnycdn.se frame block
  9anime.st offerimage.com image block
  9anime.st inpage-push.com * block
  9anime.st anicli.click xhr block
  # 9anime.st goload.pro * block
  9anime.st api.movcloud.net script block
  9anime.st v6.bunnycdn.se frame block
  9anime.st delivery.taroads.com xhr block
  # 9anime.st ssl.p.jwpcdn.com script block
  9anime.st dmbinqebajoeca.com xhr block
  9anime.st zikroarg.com script block

  # Narutospot.tv
  naruspot.tv * frame allow
  naruspot.tv * script allow
  naruspot.tv * media allow

  # My Anime List
  myanimelist.net google.com script allow

  # Studium
  matrix-off: udemontreal-my.share true
  matrix-off: studium.umontreal.ca true
  # udemontreal-my.sharepoint.com * * allow
  # udemontreal-my.sharepoint.com odspserviceworkerproxy.aspx script allow
  # udemontreal-my.sharepoint.com res-1.cdn.office.net script allow
  # udemontreal-my.sharepoint.com res-2.cdn.office.net script allow
  # udemontreal-my.sharepoint.com res-2.cdn.office.net xhr allow
  # udemontreal-my.sharepoint.com res-2.cdn.office.net other allow
  # udemontreal-my.sharepoint.com browser.pipe.aria.microsoft.com script allow
  # udemontreal-my.sharepoint.com browser.pipe.aria.microsoft.com xhr allow
  # udemontreal-my.sharepoint.com cac-word-view.officeapps.live.com frame allow
  # udemontreal-my.sharepoint.com cac-word-view.officeapps.live.com xhr allow
  # udemontreal-my.sharepoint.com canadaeast1-mediap.svc.ms xhr allow
  # udemontreal-my.sharepoint.com static2.sharepointonline.com other allow
  # udemontreal-my.sharepoint.com ocws.officeapps.live.com xhr allow
  # udemontreal-my.sharepoint.com statica.akamai.odsp.cdn.office.net script allow
  # udemontreal-my.sharepoint.com graph.microsoft.com xhr allow
  # udemontreal-my.sharepoint.com login.windows.net frame allow
  # udemontreal-my.sharepoint.com clh-word-view-15.cdn.office.net script allow
  # udemontreal-my.sharepoint.com chromewebdata script allow
  # udemontreal-my.sharepoint.com udemontreal-my.sharepoint.com script allow

  # Facebook
  facebook.com static.xx.fbcdn.net script allow

  # amazon.com
  amazon.ca m.media-amazon.com other allow
  amazon.ca m.media-amazon.com xhr allow
  amazon.ca m.media-amazon.com script allow
  amazon.ca m.media-amazon.com media allow
  amazon.ca images-na.ssl-images-amazon.com other allow
  amazon.ca images-na.ssl-images-amazon.com script allow

  # LinkedIn
  linkedin.com * script allow
  linkedin.com * media allow
  linkedin.com * image allow
  linkedin.com * xhr allow

  # CodeBoot
  codeboot.org * * allow

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/browsers.scm :noweb yes

  (packages->manifest
   (list
    ;; (specification->package "nyxt")
    (specification->package "qutebrowser")))

#+end_src

** Default Applications

#+begin_src conf :tangle ~/.dotfiles/.config/mimeapps.list

  [Default Applications]
  text/html=qutebrowser.desktop
  x-scheme-handler/http=org.qutebrowser.qutebrowser.desktop
  x-scheme-handler/https=org.qutebrowser.qutebrowser.desktop
  x-scheme-handler/about=org.qutebrowser.qutebrowser.desktop
  x-scheme-handler/unknown=org.qutebrowser.qutebrowser.desktop
  application/xhtml+xml=org.qutebrowser.qutebrowser.desktop

  [Added Associations]
  x-scheme-handler/http=org.qutebrowser.qutebrowser.desktop;
  text/html=org.qutebrowser.qutebrowser.desktop;
  application/xhtml+xml=org.qutebrowser.qutebrowser.desktop;
  x-scheme-handler/https=org.qutebrowser.qutebrowser.desktop;

#+end_src

** Desktop Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "gucharmap")
  (specification->package "brightnessctl")
  (specification->package "xdg-utils")       ;; For xdg-open, etc
  (specification->package "xdg-dbus-proxy")  ;; For Flatpak
  (specification->package+output "gtk+:bin") ;; For gtk-launch
  ;; (specification->package+output "glib:bin") ;; For gio-launch-desktop
  (specification->package "shared-mime-info")
  (specification->package "htop")

#+end_src

** Flatpak

Applications to install which are otherwise difficult to install Guix systems.
    
#+begin_src sh

  flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  flatpak remote-add --user --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo
  flatpak install --user flathub com.spotify.Client
  flatpak install --user flathub com.valvesoftware.Steam
  flatpak install --user flathub com.microsoft.Teams
  flatpak install --user flathub com.discordapp.Discord
  flatpak install --user flathub-beta com.obsproject.Studio

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "flatpak")

#+end_src

** Image Viewers and Editors

*Wacom tablet scripts*

#+begin_src sh :tangle ~/.dotfiles/bin/wacom-laptop :shebang #!/usr/bin/env sh

  xinput map-to-output "Wacom Intuos PT S Pen Pen (0)" eDP-1
  xinput map-to-output "Wacom Intuos PT S Pen Eraser (0)" eDP-1

  echo "Mapped to laptop!"

  exit 0

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/wacom-screen :shebang #!/usr/bin/env sh

  xinput map-to-output "Wacom Intuos PT S Pen Pen (0)" HDMI-1
  xinput map-to-output "Wacom Intuos PT S Pen Eraser (0)" HDMI-1

  echo "Mapped to HDMI!"

  exit 0

#+end_src

*Screenshot to clipboard*

#+begin_src sh :tangle ~/.dotfiles/bin/scrot-clipboard :shebang #!/usr/bin/env sh

  scrot -s -e 'xclip -selection clipboard -t image/png -i $f && rm -f $f'

  exit 0

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/media.scm :noweb yes

  (packages->manifest
   (list
    (specification->package "feh")
    (specification->package "imagemagick")
    (specification->package "scrot")
    (specification->package "xclip")
    (specification->package "libreoffice")
    ;; (specification->package "gimp")
    (specification->package "evince")
    (specification->package "simple-scan")
    (specification->package "xdg-desktop-portal-gtk")
    ;; (specification->package "xournal")
    (specification->package "xournalpp")))

#+end_src

** Video Players

*Download music script*

#+begin_src sh :tangle ~/.dotfiles/bin/download-music :shebang #!/usr/bin/env sh

  for music in $*; do
      youtube-dl -x --audio-format "mp3" -o '~/Music/%(title)s.%(ext)s' $music
  done

  exit 0

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/video.scm :noweb yes

  (packages->manifest
   (list
    (specification->package "mpv")
    (specification->package "youtube-dl")
    (specification->package "gstreamer")
    (specification->package "gst-plugins-base")
    (specification->package "gst-plugins-good")
    (specification->package "gst-plugins-bad")
    (specification->package "gst-plugins-ugly")
    (specification->package "gst-libav")
    (specification->package "intel-vaapi-driver")
    (specification->package "libva-utils")))

#+end_src

** Network

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "net-tools")
  (specification->package "curl")

#+end_src

** Password Management

*Password sync script*

#+begin_src sh :tangle ~/.dotfiles/bin/sync-passwords :shebang #!/usr/bin/env sh

  pass git pull
  pass git push

  notify-send -i "emblem-synchronizing" "Passwords synced!"

  exit 0

#+end_src

*Scheduling with mcron*

#+begin_src scheme :tangle ~/.dotfiles/.config/cron/pass-sync.guile

  (job
   '(next-hour (range 0 24 4))
   "~/bin/sync-passwords")

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "password-store")
  (specification->package "mcron")

#+end_src

** Printing

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "system-config-printer")

#+end_src

** Synching

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "syncthing")
  (specification->package "syncthing-gtk")

#+end_src

** System Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "openssh")
  (specification->package "gnupg")
  (specification->package "zip")
  (specification->package "unzip")
  (specification->package "p7zip")
  (specification->package "udiskie")
  (specification->package "trash-cli")

#+end_src

** Virtual machines

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "virt-manager")
  (specification->package "gtksourceview@4")
  (specification->package "virt-viewer")
  (specification->package "spice-vdagent")

#+end_src

** Xorg Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "xev")
  (specification->package "xset")
  (specification->package "xrdb")
  (specification->package "xhost")
  (specification->package "xmodmap")
  (specification->package "setxkbmap")
  (specification->package "xss-lock")
  (specification->package "libinput")
  (specification->package "xinput")

#+end_src

* Desktop Profile

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-desktop.el

  (provide 'pg-desktop)

#+end_src

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/desktop.scm :noweb yes

  (packages->manifest
   (list
     <<packages>>
     ))

#+end_src
