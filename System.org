#+title: System Configuration with Guix
#+author: Philippe Gabriel
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)

* Channels

#+begin_src scheme :tangle ~/.config/guix/base-channels.scm

  (list (channel
         (name 'flat)
         (url "https://github.com/flatwhatson/guix-channel.git")
         (introduction
          (make-channel-introduction
           "33f86a4b48205c0dc19d7c036c85393f0766f806"
           (openpgp-fingerprint
            "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
        (channel
         (name 'rde)
         (url "https://git.sr.ht/~abcdw/rde")
         (introduction
          (make-channel-introduction
           "257cebd587b66e4d865b3537a9a88cccd7107c95"
           (openpgp-fingerprint
            "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))
        (channel
         (name 'nonguix)
         (url "https://gitlab.com/nonguix/nonguix"))
        (channel
         (name 'guix)
         (url "https://git.savannah.gnu.org/git/guix.git")
         (introduction
          (make-channel-introduction
           "9edb3f66fd807b096b48283debdcddccfea34bad"
           (openpgp-fingerprint
            "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))

#+end_src

* Systems

** Base Configuration

This base configuration is shared between all of the machines I manage with Guix.

#+begin_src scheme :tangle ~/.config/guix/systems/base.scm

  (define-module (systems base)
    #:use-module (gnu)
    #:use-module (gnu packages audio)
    #:use-module (gnu packages cups)
    #:use-module (gnu packages dns)
    #:use-module (gnu packages emacs)
    #:use-module (gnu packages emacs-xyz)
    #:use-module (gnu packages file-systems)
    #:use-module (gnu packages gnome)
    #:use-module (gnu packages gtk)
    #:use-module (gnu packages linux)
    #:use-module (gnu packages mtools)
    #:use-module (gnu packages package-management)
    #:use-module (gnu packages pulseaudio)
    #:use-module (gnu packages version-control)
    #:use-module (gnu packages vim)
    #:use-module (gnu packages virtualization)
    #:use-module (gnu packages web-browsers)
    #:use-module (gnu packages wm)
    #:use-module (gnu packages xorg)
    #:use-module (gnu services cups)
    #:use-module (gnu services desktop)
    #:use-module (gnu services docker)
    #:use-module (gnu services networking)
    #:use-module (gnu services pm)
    #:use-module (gnu services virtualization)
    #:use-module (gnu system nss)
    #:use-module (nongnu packages linux)
    #:use-module (srfi srfi-1))

  (use-service-modules nix
                       desktop
                       xorg
                       networking
                       cups
                       ssh)

  (use-package-modules certs
                       shells)

#+end_src

Add a ~udev~ rule to enable members of the ~charge~ group to control charging thresholds.

#+begin_src scheme :tangle ~/.config/guix/systems/base.scm

  (define %charge-thresholds-udev-rule
    (udev-rule
     "90-charge-thresholds.rules"
     (string-append "KERNEL==\"BAT0\", "
                    "SUBSYSTEM==\"power_supply\", "
                    "RUN+=\"/run/current-system/profile/bin/chgrp charge /sys/class/power_supply/%k/charge_control_start_threshold /sys/class/power_supply/%k/charge_control_end_threshold\""
                    "\n"
                    "KERNEL==\"BAT0\", "
                    "SUBSYSTEM==\"power_supply\", "
                    "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/power_supply/%k/charge_control_start_threshold /sys/class/power_supply/%k/charge_control_end_threshold\"")))

#+end_src

Add a ~udev~ rule to enable members of the ~spice~ group to enable USB redirection with virtual machines.

#+begin_src scheme :tangle ~/.config/guix/systems/base.scm

  (define %spice-devices-udev-rule
    (udev-rule
     "50-spice.rules"
     (string-append "SUBSYSTEM==\"usb\", "
                    "GROUP=\"spice\", "
                    "MODE=\"0660\""
                    "\n"
                    "SUBSYSTEM==\"usb-device\", "
                    "GROUP=\"spice\", "
                    "MODE=\"0660\"")))

#+end_src

Override the default ~%desktop-services~ to add ~udev~ rules and apply other configuration.

#+begin_src scheme :tangle ~/.config/guix/systems/base.scm

  (define %my-desktop-services
    (modify-services %desktop-services
                     (elogind-service-type config =>
                                           (elogind-configuration
                                            (inherit config)
                                            (handle-lid-switch-external-power 'suspend)))
                     (udev-service-type config =>
                                        (udev-configuration
                                         (inherit config)
                                         (rules (cons* %charge-thresholds-udev-rule
                                                       %spice-devices-udev-rule
                                                       (udev-configuration-rules config)))))
                     (network-manager-service-type config =>
                                                   (network-manager-configuration (inherit config)
                                                                                  (vpn-plugins (list network-manager-openvpn))))))

#+end_src

Use the ~libinput~ driver for all input devices since it's a bit more modern than the default.

#+begin_src scheme :tangle ~/.config/guix/systems/base.scm

  (define %xorg-libinput-config
    "Section \"InputClass\"
    Identifier \"Touchpads\"

    Driver \"libinput\"
    MatchDevicePath \"/dev/input/event*\"
    MatchIsTouchpad \"on\"

    Option \"Tapping\" \"on\"
    Option \"TappingDrag\" \"on\"
    Option \"NaturalScrolling\" \"on\"
    Option \"DisableWhileTyping\" \"on\"
    Option \"ScrollMethod\" \"twofinger\"
    Option \"MiddleEmulation\" \"on\"
  EndSection
  Section \"InputClass\"
    Identifier \"Keyboards\"
    Driver \"libinput\"
    MatchDevicePath \"/dev/input/event*\"
    MatchIsKeyboard \"on\"
  EndSection
  ")

#+end_src

Define the ~base-operating-system~ which will be inherited by all machine configurations. TODO

#+begin_src scheme :tangle ~/.config/guix/systems/base.scm

  (define-public base-operating-system
    (operating-system
     ;; Use non-free Linux and firmware
     (kernel linux)
     (firmware (list linux-firmware))

     ;; Generic information that may be overriden
     (locale "en_CA.utf8")
     (timezone "America/Toronto")
     (keyboard-layout (keyboard-layout "us"))
     (host-name "tmp")

     ;; Default user
     (users
      (cons
       (user-account (name "phil-gab99")
                     (comment "Philippe Gabriel")
                     (group "users")
                     (home-directory "/home/phil-gab99")
                     (supplementary-groups '("wheel"     ;; sudo
                                             "netdev"    ;; network devices
                                             "spice"     ;; usb devices
                                             "kvm"
                                             "tty"
                                             "input"
                                             "libvirt"
                                             "charge"
                                             "docker"
                                             ;; "realtime"  ;; Enable realtime scheduling
                                             "lp"        ;; control bluetooth devices
                                             "audio"     ;; control audio devices
                                             "video")))  ;; control video devices
       %base-user-accounts))

     ;; Add extra groupes
     (groups
      (cons*
       (user-group (system? #t)
                   (name "charge"))
       (user-group (system? #t)
                   (name "spice"))
       %base-groups))

     ;; Partition mounted on /boot/efi.
     (bootloader (bootloader-configuration
                  (bootloader grub-efi-bootloader)
                  (targets (list "/boot/efi"))
                  (keyboard-layout keyboard-layout)))

     ;; File system to be overridden
     (file-systems
      (cons
       (file-system (mount-point "/tmp")
                    (device "none")
                    (type "tmpfs")
                    (check? #f))
       %base-file-systems))

     ;; System packages
     (packages
      (append
       (list emacs
             emacs-exwm
             emacs-desktop-environment
             nss-certs     ;; for HTTPS access
             git
             ntfs-3g
             exfat-utils
             fuse-exfat
             vim
             nix
             pulseaudio
             xf86-input-libinput
             gvfs          ;; for user mounts
             xterm
             bluez
             bluez-alsa)
       %base-packages))

     ;; System services
     (services
      (cons*
       (service slim-service-type
                (slim-configuration
                 (theme-name "0.x")
                 (xorg-configuration
                  (xorg-configuration
                   (keyboard-layout keyboard-layout)
                   (extra-config (list %xorg-libinput-config))))))
       (service openssh-service-type)
       (service tor-service-type)
       (service cups-service-type
                (cups-configuration
                 (web-interface? #t)
                 (extensions
                  (list cups-filters))))
       (service nix-service-type)
       (service docker-service-type)
       (service libvirt-service-type
                (libvirt-configuration
                 (unix-sock-group "libvirt")
                 (tls-port "16555")))
       (service virtlog-service-type
                (virtlog-configuration
                 (max-clients 1000)))
       ;; (service thermald-service-type)
       (extra-special-file "/bin/env"
                           (file-append coreutils "/bin/env"))
       (bluetooth-service #:auto-enable? #t)
       (remove (lambda (service)
                 (eq? (service-kind service) gdm-service-type))
               %my-desktop-services)))))

#+end_src

** Machines

*** s76-laptop

#+begin_src scheme :tangle ~/.config/guix/systems/s76-laptop.scm

  (define-module (systems s76-laptop)
    #:use-module (systems base)
    #:use-module (gnu)
    #:use-module (gnu packages file-systems))

  (operating-system
   (inherit base-operating-system)

   (host-name "s76-laptop")

   (swap-devices
    (list
     (swap-space (target
                  (uuid "5c2ecf42-19e0-46c0-ba33-51ced052be15")))))

   (file-systems
    (cons*
     (file-system (device "/dev/nvme0n1p1")
                  (mount-point "/boot/efi")
                  (type "vfat"))
     (file-system (device "/dev/nvme0n1p3")
                  (mount-point "/")
                  (type "ext4"))
     %base-file-systems)))

#+end_src

* Profile Management

Profiles get installed under the ~~/.guix-extra-profiles~ path and sourced by ~~/.profile~ when logging in.

A couple of shell scripts for managing the profiles:

** List Available profiles

This script simply lists the profiles available to activate/update:

#+begin_src sh

  list-profiles

#+end_src

#+begin_src sh :tangle ~/bin/list-profiles :shebang #!/bin/sh

  echo -e "\nAvailable profiles are:\n"
  for profile in "$HOME/.config/guix/manifests/*.scm"; do
      profileName=$(basename -s .scm $profile)
      echo "$profileName"
  done

  echo -e "\n\nYour active profiles are:\n"
  profiles=$(guix package --list-profiles)
  for active in $profiles; do
      base=$(basename $active)
      if [ "$base" != "current" ] && [ "$base" != ".guix-profile" ]; then
          echo "$base"
      fi
  done

#+end_src

** List Profile Generations

This script lists the generations of a given profile:

#+begin_src sh

  list-generations emacs

#+end_src

#+begin_src sh :tangle ~/bin/list-generations :shebang #!/bin/sh

  profile=$1
  guix package --profile=$GUIX_EXTRA_PROFILES/$profile/$profile --list-generations

#+end_src

** Delete Profile Generations

This script deletes the generations of a given profile:

#+begin_src sh

  delete-generations emacs 1..5

#+end_src

#+begin_src sh :tangle ~/bin/delete-generations :shebang #!/bin/sh

  profile=$1
  echo Deleting all generations from $profile
  guix package --profile=$GUIX_EXTRA_PROFILES/$profile/$profile --delete-generations

#+end_src

** Activating Profiles

This script accepts a space-separated list of manifest file names (without extension) under the ~~/.config/guix/manifests~ folder and then installs those profiles for the first time.
For example:

#+begin_src sh

  activate-profiles desktop emacs

#+end_src

#+begin_src sh :tangle ~/bin/activate-profiles :shebang #!/bin/sh

  GREEN='\033[1;32m'
  RED='\033[1;30m'
  NC='\033[0m'

  profiles=$*
  if [[ $# -eq 0 ]]; then
      profiles="$XDG_CONFIG_HOME/guix/manifests/*.scm";
  fi

  for profile in $profiles; do
      # Remove the path and file extension, if any
      profileName=$(basename $profile)
      profileName="${profileName%.*}"

      profilePath="$GUIX_EXTRA_PROFILES/$profileName"

      manifestPath=$HOME/.config/guix/manifests/$profileName.scm

    if [ -f $manifestPath ]; then
      echo
      echo -e "${GREEN}Activating profile:" $manifestPath "${NC}"
      echo

      mkdir -p $profilePath
      guix package --manifest=$manifestPath --profile="$profilePath/$profileName"

      # Source the new profile
      GUIX_PROFILE="$profilePath/$profileName"
      if [ -f $GUIX_PROFILE/etc/profile ]; then
          . "$GUIX_PROFILE"/etc/profile
      else
          echo -e "${RED}Couldn't find profile:" $GUIX_PROFILE/etc/profile "${NC}"
      fi
    else
      echo "No profile found at path" $profilePath
    fi
  done

#+end_src

** Updating Profiles

This script accepts a space-separated list of manifest file names (without extension) under the ~~/.config/guix/manifests~ folder and then installs any updates to the packages contained within them.
If no profile names are provided, it walks the list of profile directories under ~~/.guix-extra-profiles~ and updates each one of them.

#+begin_src sh

  update-profiles emacs

#+end_src

#+begin_src sh :tangle ~/bin/update-profiles :shebang #!/bin/sh

  GREEN='\033[1;32m'
  NC='\033[0m'

  profiles=$*
  if [[ $# -eq 0 ]]; then
      profiles="$GUIX_EXTRA_PROFILES/*";
  fi

  for profile in $profiles; do
    profileName=$(basename $profile)
    profilePath=$GUIX_EXTRA_PROFILES/$profileName

    echo
    echo -e "${GREEN}Updating profile:" $profilePath "${NC}"
    echo

    guix package --profile="$profilePath/$profileName" --manifest="$XDG_CONFIG_HOME/guix/manifests/$profileName.scm" --fallback
  done

#+end_src

** Updating Channels

This script makes it easy to update all channels to the latest commit based on an original channel file (see the Channels section at the top of this document).

#+begin_src sh

  update-channels

#+end_src

#+begin_src sh :tangle ~/bin/update-channels :shebang #!/bin/sh

  guix pull --channels=$XDG_CONFIG_HOME/guix/base-channels.scm
  guix describe --format=channels > $XDG_CONFIG_HOME/guix/channels.scm

#+end_src

** Updating System

This script makes it easy to update the system to the latest configuration based on the ~$HOSTNAME~ environment variable mapping to the appropriate file.

#+begin_src sh

  update-system

#+end_src

#+begin_src sh :tangle ~/bin/update-system :shebang #!/usr/bin/env sh

  GREEN='\033[1;32m'
  BLUE='\033[1;34m'
  NC='\033[0m'

  echo -e "\n${GREEN}Updating ${BLUE}$HOSTNAME${GREEN}...${NC}\n"

  sudo guix system -L $XDG_CONFIG_HOME/guix --fallback reconfigure $XDG_CONFIG_HOME/guix/systems/$HOSTNAME.scm

#+end_src

* Nix Package Manager

#+begin_src conf :tangle (file-truename "~/.nix-channels")

  https://nixos.org/channels/nixpkgs-unstable nixpkgs

#+end_src

The channel needs to be updated before any packages can be installed:

#+begin_src sh

  nix-channel --update

#+end_src

Installing packages:

#+begin_src sh

  nix-env -i nodejs dotnet-sdk gh hledger
  nix-env -iA nixpkgs.nodejs-12_x # For a specific version

#+end_src
