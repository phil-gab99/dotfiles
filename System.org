#+title: System Configuration with Guix
#+author: Philippe Gabriel
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)

* Channels

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/base-channels.scm

  (list (channel
         (name 'flat)
         (url "https://github.com/flatwhatson/guix-channel.git")
         (introduction
          (make-channel-introduction
           "33f86a4b48205c0dc19d7c036c85393f0766f806"
           (openpgp-fingerprint
            "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
        (channel
         (name 'rde)
         (url "https://git.sr.ht/~abcdw/rde")
         (introduction
          (make-channel-introduction
           "257cebd587b66e4d865b3537a9a88cccd7107c95"
           (openpgp-fingerprint
            "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))
        (channel
         (name 'nonguix)
         (url "https://gitlab.com/nonguix/nonguix"))
        (channel
         (name 'guix)
         (url "https://git.savannah.gnu.org/git/guix.git")
         (introduction
          (make-channel-introduction
           "9edb3f66fd807b096b48283debdcddccfea34bad"
           (openpgp-fingerprint
            "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))

#+end_src

* Systems

** Base Configuration

This base configuration is shared between all of the machines I manage with Guix.

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/systems/base.scm

  (define-module (systems base)
    #:use-module (gnu)
    #:use-module (gnu packages)
    #:use-module (nongnu packages linux)
    #:use-module (srfi srfi-1))

  (use-package-modules audio
                       certs
                       cups
                       dns
                       emacs
                       emacs-xyz
                       file-systems
                       gnome
                       gtk
                       linux
                       mtools
                       package-management
                       pulseaudio
                       shells
                       version-control
                       vim
                       virtualization
                       web-browsers
                       wm
                       xorg)

  (use-service-modules cups
                       desktop
                       docker
                       networking
                       nix
                       pm
                       ssh
                       virtualization
                       xorg)

  (use-system-modules nss)

#+end_src

Add a ~udev~ rule to enable members of the ~charge~ group to control charging thresholds.

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/systems/base.scm

  (define %charge-thresholds-udev-rule
    (udev-rule
     "90-charge-thresholds.rules"
     (string-append "KERNEL==\"BAT0\", "
                    "SUBSYSTEM==\"power_supply\", "
                    "RUN+=\"/run/current-system/profile/bin/chgrp charge /sys/class/power_supply/%k/charge_control_start_threshold /sys/class/power_supply/%k/charge_control_end_threshold\""
                    "\n"
                    "KERNEL==\"BAT0\", "
                    "SUBSYSTEM==\"power_supply\", "
                    "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/power_supply/%k/charge_control_start_threshold /sys/class/power_supply/%k/charge_control_end_threshold\"")))

#+end_src

Override the default ~%desktop-services~ to add ~udev~ rules and apply other configuration.

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/systems/base.scm

  (define %my-desktop-services
    (modify-services %desktop-services
                     (elogind-service-type config =>
                                           (elogind-configuration
                                            (inherit config)
                                            (handle-lid-switch-external-power 'suspend)))
                     (udev-service-type config =>
                                        (udev-configuration
                                         (inherit config)
                                         (rules (cons* %charge-thresholds-udev-rule
                                                       (udev-configuration-rules config)))))
                     (network-manager-service-type config =>
                                                   (network-manager-configuration
                                                    (inherit config)
                                                    (vpn-plugins (list network-manager-openvpn))))))

#+end_src

Use the ~libinput~ driver for all input devices since it's a bit more modern than the default.

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/systems/base.scm

  (define %xorg-libinput-config
    "Section \"InputClass\"
    Identifier \"Touchpads\"

    Driver \"libinput\"
    MatchDevicePath \"/dev/input/event*\"
    MatchIsTouchpad \"on\"

    Option \"Tapping\" \"on\"
    Option \"TappingDrag\" \"on\"
    Option \"NaturalScrolling\" \"on\"
    Option \"DisableWhileTyping\" \"on\"
    Option \"ScrollMethod\" \"twofinger\"
    Option \"MiddleEmulation\" \"on\"
  EndSection
  Section \"InputClass\"
    Identifier \"Keyboards\"
    Driver \"libinput\"
    MatchDevicePath \"/dev/input/event*\"
    MatchIsKeyboard \"on\"
  EndSection
  ")

#+end_src

Define the ~base-operating-system~ which will be inherited by all machine configurations.

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/systems/base.scm

  (define-public base-operating-system
    (operating-system
     ;; Use non-free Linux and firmware
     (kernel linux)
     (firmware (list linux-firmware))

     ;; Generic information that may be overriden
     (locale "en_CA.utf8")
     (timezone "America/Toronto")
     (keyboard-layout (keyboard-layout "us"))
     (host-name "tmp")

     ;; Default user
     (users
      (cons
       (user-account (name "phil-gab99")
                     (comment "Philippe Gabriel")
                     (group "users")
                     (home-directory "/home/phil-gab99")
                     (supplementary-groups '("wheel"     ;; sudo
                                             "netdev"    ;; network devices
                                             "kvm"
                                             "tty"
                                             "input"
                                             "libvirt"
                                             "charge"
                                             "docker"
                                             "lp"        ;; control bluetooth devices
                                             "audio"     ;; control audio devices
                                             "video")))  ;; control video devices
       %base-user-accounts))

     ;; Add extra groupes
     (groups
      (cons*
       (user-group (system? #t)
                   (name "charge"))
       %base-groups))

     ;; Partition mounted on /boot/efi.
     (bootloader (bootloader-configuration
                  (bootloader grub-efi-bootloader)
                  (targets (list "/boot/efi"))
                  (keyboard-layout keyboard-layout)))

     ;; File system to be overridden
     (file-systems
      (cons
       (file-system (mount-point "/tmp")
                    (device "none")
                    (type "tmpfs")
                    (check? #f))
       %base-file-systems))

     ;; System packages
     (packages
      (append
       (list emacs
             emacs-exwm
             emacs-desktop-environment
             nss-certs
             git
             ntfs-3g
             exfat-utils
             fuse-exfat
             vim
             nix
             pulseaudio
             xf86-input-libinput
             gvfs
             xterm
             bluez
             bluez-alsa)
       %base-packages))

     ;; System services
     (services
      (cons*
       (set-xorg-configuration
        (xorg-configuration
         (keyboard-layout keyboard-layout)
         (extra-config (list %xorg-libinput-config))))
       (service openssh-service-type)
       (service cups-service-type
                (cups-configuration
                 (web-interface? #t)
                 (extensions
                  (list cups-filters))))
       (service nix-service-type)
       (service docker-service-type)
       (service libvirt-service-type
                (libvirt-configuration
                 (unix-sock-group "libvirt")
                 (tls-port "16555")))
       (service virtlog-service-type
                (virtlog-configuration
                 (max-clients 1000)))
       (extra-special-file "/bin/env"
                           (file-append coreutils "/bin/env"))
       (bluetooth-service #:auto-enable? #t)
       %my-desktop-services))))

#+end_src

** Machines

*** s76-laptop

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/systems/s76-laptop.scm

  (define-module (systems s76-laptop)
    #:use-module (systems base)
    #:use-module (gnu))

  (use-package-modules file-systems)

  (operating-system
   (inherit base-operating-system)

   (host-name "s76-laptop")

   (swap-devices
    (list
     (swap-space (target
                  (uuid "007cbe9f-5d70-4ded-bd10-898993e4de74")))))

   (file-systems
    (cons*
     (file-system (device "/dev/nvme0n1p1")
                  (mount-point "/boot/efi")
                  (type "vfat"))
     (file-system (device "/dev/nvme0n1p2")
                  (mount-point "/")
                  (type "ext4"))
     (file-system (device "/dev/nvme0n1p4")
                  (mount-point "/home")
                  (type "ext4"))
     %base-file-systems)))

#+end_src

* Guix Profile Management

Guix profiles get installed under the ~~/.guix-extra-profiles~ path and sourced by ~~/.profile~ when logging in.

A couple of shell scripts for managing the profiles:

** List Active Profiles

This script simply lists the active profiles:

#+begin_src sh

  list-profiles

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/list-profiles :shebang #!/usr/bin/env sh

  guix package --list-profiles

#+end_src

** List Profile Generations

This script lists the generations of a given profile:

#+begin_src sh

  list-generations emacs

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/list-generations :shebang #!/usr/bin/env sh

  profile=$1
  guix package --profile=$GUIX_EXTRA_PROFILES/$profile/$profile --list-generations

#+end_src

** Delete Profile Generations

This script deletes the generations of a given profile:

#+begin_src sh

  delete-generations emacs

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/delete-generations :shebang #!/usr/bin/env sh

  profile=$1
  guix package --profile=$GUIX_EXTRA_PROFILES/$profile/$profile --delete-generations

#+end_src

** Activating Profiles

This script accepts a space-separated list of manifest file names (without extension) under the ~~/.config/guix/manifests~ folder and then installs those profiles for the first time:

#+begin_src sh

  activate-profiles desktop emacs

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/activate-profiles :shebang #!/usr/bin/env sh

  GREEN='\033[1;32m'
  RED='\033[1;30m'
  NC='\033[0m'

  profiles=$*
  if [[ $# -eq 0 ]]; then
      profiles="$XDG_CONFIG_HOME/guix/manifests/*.scm";
  fi

  for profile in $profiles; do
      # Remove the path and file extension, if any
      profileName=$(basename $profile)
      profileName="${profileName%.*}"

      profilePath="$GUIX_EXTRA_PROFILES/$profileName"

      manifestPath=$XDG_CONFIG_HOME/guix/manifests/$profileName.scm

    if [ -f $manifestPath ]; then
      echo
      echo -e "${GREEN}Activating profile:" $manifestPath "${NC}"
      echo

      mkdir -p $profilePath
      guix package --manifest=$manifestPath --profile="$profilePath/$profileName"

      # Source the new profile
      GUIX_PROFILE="$profilePath/$profileName"
      if [ -f $GUIX_PROFILE/etc/profile ]; then
          . "$GUIX_PROFILE"/etc/profile
      else
          echo -e "${RED}Couldn't find profile:" $GUIX_PROFILE/etc/profile "${NC}"
          exit 1
      fi
    else
      echo "No profile found at path" $profilePath
      exit 1
    fi
  done

  exit 0

#+end_src

** Updating Profiles

This script accepts a space-separated list of manifest file names (without extension) under the ~~/.config/guix/manifests~ folder and then installs any updates to the packages contained within them.
If no profile names are provided, it walks the list of profile directories under ~~/.guix-extra-profiles~ and updates each one of them:

#+begin_src sh

  update-profiles emacs

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/update-profiles :shebang #!/usr/bin/env sh

  GREEN='\033[1;32m'
  NC='\033[0m'

  profiles=$*
  if [[ $# -eq 0 ]]; then
      profiles="$GUIX_EXTRA_PROFILES/*";
  fi

  for profile in $profiles; do
    profileName=$(basename $profile)
    profilePath=$GUIX_EXTRA_PROFILES/$profileName

    echo
    echo -e "${GREEN}Updating profile:" $profilePath "${NC}"
    echo

    guix package --profile="$profilePath/$profileName" --manifest="$XDG_CONFIG_HOME/guix/manifests/$profileName.scm" --fallback
  done

  exit 0

#+end_src

** Updating Channels

This script makes it easy to update all channels to the latest commit based on an original channel file (see the Channels section at the top of this document):

#+begin_src sh

  update-channels

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/update-channels :shebang #!/usr/bin/env sh

  guix pull --channels=$XDG_CONFIG_HOME/guix/base-channels.scm
  guix describe --format=channels > $XDG_CONFIG_HOME/guix/channels.scm

  exit 0

#+end_src

** Updating System

This script makes it easy to update the system to the latest configuration based on the ~$HOSTNAME~ environment variable mapping to the appropriate file.

#+begin_src sh

  update-system

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/update-system :shebang #!/usr/bin/env sh

  GREEN='\033[1;32m'
  BLUE='\033[1;34m'
  NC='\033[0m'

  echo -e "\n${GREEN}Updating ${BLUE}$HOSTNAME${GREEN}...${NC}\n"

  sudo guix system -L $XDG_CONFIG_HOME/guix --fallback reconfigure $XDG_CONFIG_HOME/guix/systems/$HOSTNAME.scm

  exit 0

#+end_src

* General Profile Management

Configuration files and scripts for basic gnu/linux profile

** Applications

#+begin_src conf :tangle ~/.dotfiles/.local/share/applications/Mars.desktop

  [Desktop Entry]
  Type=Application
  Version=4.5
  Name=Mars
  Comment=A MIPS Simulator
  Exec=java -jar /home/phil-gab99/Packages/Mars4_5.jar
  Terminal=false

#+end_src

** Configuration

*** Bash Configuration

**** Bash Profile

#+begin_src shell :tangle ~/.dotfiles/.bash_profile

  # Defer to .profile
  [ -f ~/.profile ] && . ~/.profile

#+end_src

**** Bash Aliases

#+begin_src shell :tangle ~/.dotfiles/.bash_aliases :shebang ### -*- mode: sh; -*-

  #######################################################
  # GENERAL ALIAS'S
  #######################################################

  # alias ls='ls -p --color=auto'
  # alias dir='dir --color=auto'
  # alias vdir='vdir --color=auto'

  alias grep='grep --color=always'
  alias fgrep='grep -F --color=always'
  alias egrep='grep -E --color=always'

  # To temporarily bypass an alias, we preceed the command with a \
  # EG: the ls command is aliased, but to use the normal ls command you would type \ls

  # Add an "alert" alias for long running commands.  Use like so:
  #   sleep 10; alert
  # alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

  # Alias's to modified commands
  alias cp='cp -iv'
  alias mv='mv -iv'
  alias rm='rm -iv'
  alias mkdir='mkdir -p'
  alias ps='ps auxf'
  alias ping='ping -c 10'
  alias less='less -R'
  alias vi='vim'
  alias qutebrowser='qutebrowser --qt-flag disable-seccomp-filter-sandbox'
  alias cpu="grep 'cpu ' /proc/stat | awk '{usage=(\$2+\$4)*100/(\$2+\$4+\$5)} END {print usage}' | awk '{printf(\"%.1f\n\", \$1)}'"

  # Search files in the current folder
  alias find="find . | grep "

  # Provenance of commands including aliases
  alias which='alias | which --tty-only --read-alias --show-dot --show-tilde'

  # Alias's for multiple directory listing commands
  alias la='ls -Alh'                # show hidden files
  alias ls='ls -AFh --color=always' # add colors and file type extensions
  alias lx='ls -lXBh'               # sort by extension
  alias lk='ls -lSrh'               # sort by size
  alias lc='ls -lcrh'               # sort by change time
  alias lu='ls -lurh'               # sort by access time
  alias lr='ls -lRh'                # recursive ls
  alias lt='ls -ltrh'               # sort by date
  alias lm='ls -alh |more'          # pipe through 'more'
  alias lw='ls -xAh'                # wide listing format
  alias ll='ls -Fls'                # long listing format
  alias labc='ls -lap'              # alphabetical sort
  alias lf="ls -l | egrep -v '^d'"  # files only
  alias ldir="ls -l | egrep '^d'"   # directories only

  # Alias to show disk space
  alias diskspace="du -S | sort -n -r | more"

  # Aliases for multi-versioned commands
  alias python="python3"
  alias cc="gcc"

#+end_src

**** Bash Terminal Configuration

#+begin_src shell :tangle ~/.dotfiles/.bashrc

  # Export 'SHELL' to child processes.  Programs such as 'screen' honor it and
  # otherwise use /bin/sh.
  export SHELL

  if [[ $- != *i* ]]; then
      # We are being invoked from a non-interactive shell.  If this is an SSH
      # session (as in "ssh host command"), source /etc/profile so we get PATH and
      # other essential variables.
      [[ -n "$SSH_CLIENT" ]] && . /etc/profile

      # Don't do anything else.
      return
  fi

  ################################################################################
  # SOURCED ALIAS'S AND SCRIPTS
  ################################################################################

  # Source global definitions
  [ -f /etc/bashrc ] && . /etc/bashrc

  # Enable bash programmable completion features in interactive shells
  [ -f /run/current-system/profile/share/bash-completion/bash-completion ] && . /run/current-system/profile/share/bash-completion/bash-completion

  # Alias definitions
  [ -f ~/.bash_aliases ] && . ~/.bash_aliases

  ################################################################################
  # HISTORY CONTROL
  ################################################################################

  # Don't put duplicate lines or lines starting with space in the history.
  # See bash(1) for more options
  HISTCONTROL=ignoreboth

  # Append to the history file, don't overwrite it
  shopt -s histappend
  PROMPT_COMMAND='history -a'

  # For setting history length see HISTSIZE and HISTFILESIZE in bash(1)
  HISTSIZE=1000
  HISTFILESIZE=2000

  # If set, the pattern "**" used in a pathname expansion context will
  # match all files and zero or more directories and subdirectories.
  #shopt -s globstar

  # Make less more friendly for non-text input files, see lesspipe(1)
  [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

  ################################################################################
  # NAVIGATION
  ################################################################################

  iatest=$(expr index "$-" i)

  # Check the window size after each command and, if necessary, update the values
  # of LINES and COLUMNS
  shopt -s checkwinsize

  # Allow ctrl-S for history navigation (with ctrl-R)
  stty -ixon

  # Ignore case on auto-completion
  # Show auto-completion list automatically, without double tab
  # Note: bind used instead of sticking these in .inputrc
  if [ $iatest -gt 0 ]; then
      bind "set show-all-if-ambiguous On";
      bind "set completion-ignore-case on";
  fi

  ################################################################################
  # COLORED COMMANDS
  ################################################################################

  # To have colors for ls and all grep commands such as grep, egrep and zgrep
  export CLICOLOR=1
  export LS_COLORS='no=00:fi=00:di=00;33:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:*.xml=00;31:'

  # Color for manpages in less makes manpages a little easier to read
  export LESS_TERMCAP_mb=$'\E[01;31m'
  export LESS_TERMCAP_md=$'\E[01;31m'
  export LESS_TERMCAP_me=$'\E[0m'
  export LESS_TERMCAP_se=$'\E[0m'
  export LESS_TERMCAP_so=$'\E[01;44;33m'
  export LESS_TERMCAP_ue=$'\E[0m'
  export LESS_TERMCAP_us=$'\E[01;32m'

  ################################################################################
  # SPECIAL FUNCTIONS
  ################################################################################

  # Parses git current branch when inside git project
  function parse_git_branch {
      git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
  }

  ################################################################################
  # COLORED PROMPT
  ################################################################################

  function __setprompt {
      local LAST_COMMAND=$? # Must come first!

      # Define colors
      local LIGHTGRAY="\033[0;37m"
      local WHITE="\033[1;37m"
      local BLACK="\033[0;30m"
      local DARKGRAY="\033[1;30m"
      local RED="\033[0;31m"
      local LIGHTRED="\033[1;31m"
      local GREEN="\033[0;32m"
      local LIGHTGREEN="\033[1;32m"
      local BROWN="\033[0;33m"
      local YELLOW="\033[1;33m"
      local BLUE="\033[0;34m"
      local LIGHTBLUE="\033[1;34m"
      local MAGENTA="\033[0;35m"
      local LIGHTMAGENTA="\033[1;35m"
      local CYAN="\033[0;36m"
      local LIGHTCYAN="\033[1;36m"
      local NOCOLOR="\033[0m"

      # Show error exit code if there is one
      if [[ $LAST_COMMAND != 0 ]]; then
          PS1="\[${LIGHTGRAY}\](\[${LIGHTRED}\]ERROR\[${LIGHTGRAY}\])-(\[${MAGENTA}\]Exit Code \[${LIGHTRED}\]${LAST_COMMAND}\[${LIGHTGRAY}\])-(\[${LIGHTGRAY}\]"
          if [[ $LAST_COMMAND == 1 ]]; then
              PS1+="General error"
          elif [ $LAST_COMMAND == 2 ]; then
              PS1+="Missing keyword, command, or permission problem"
          elif [ $LAST_COMMAND == 126 ]; then
              PS1+="Permission problem or command is not an executable"
          elif [ $LAST_COMMAND == 127 ]; then
              PS1+="Command not found"
          elif [ $LAST_COMMAND == 128 ]; then
              PS1+="Invalid argument to exit"
          elif [ $LAST_COMMAND == 129 ]; then
              PS1+="Fatal error signal 1"
          elif [ $LAST_COMMAND == 130 ]; then
              PS1+="Script terminated by Control-C"
          elif [ $LAST_COMMAND == 131 ]; then
              PS1+="Fatal error signal 3"
          elif [ $LAST_COMMAND == 132 ]; then
              PS1+="Fatal error signal 4"
          elif [ $LAST_COMMAND == 133 ]; then
              PS1+="Fatal error signal 5"
          elif [ $LAST_COMMAND == 134 ]; then
              PS1+="Fatal error signal 6"
          elif [ $LAST_COMMAND == 135 ]; then
              PS1+="Fatal error signal 7"
          elif [ $LAST_COMMAND == 136 ]; then
              PS1+="Fatal error signal 8"
          elif [ $LAST_COMMAND == 137 ]; then
              PS1+="Fatal error signal 9"
          elif [ $LAST_COMMAND -gt 255 ]; then
              PS1+="Exit status out of range"
          else
              PS1+="Unknown error code"
          fi
          PS1+="\[${LIGHTGRAY}\])\[${NOCOLOR}\]\n"
      else
          PS1=""
      fi

      # Date
      PS1+="\n\[${LIGHTGRAY}\]┌─(\[${CYAN}\]🕓 $(date +%a) $(date +%b-'%-m')"
      PS1+=" $(date +'%-I':%M:%S%P)\[${LIGHTGRAY}\])-"

      # CPU
      PS1+="(\[${MAGENTA}\] CPU $(cpu)%"

      # Jobs
      PS1+="\[${LIGHTGRAY}\]:\[${MAGENTA}\]\j"

      # Network Connections (for a server - comment out for non-server)
      # PS1+="\[${LIGHTGRAY}\]:\[${MAGENTA}\]Net $(awk 'END {print NR}' /proc/net/tcp)"

      PS1+="\[${LIGHTGRAY}\])-"

      # User and server
      local SSH_IP=`echo $SSH_CLIENT | awk '{ print $1 }'`
      local SSH2_IP=`echo $SSH2_CLIENT | awk '{ print $1 }'`
      if [ $SSH2_IP ] || [ $SSH_IP ] ; then
          PS1+="(\[${RED}\]\u@\h"
      else
          PS1+="(\[${RED}\]\u"
      fi

      # Current directory
      PS1+="\[${LIGHTGRAY}\]: \[${BROWN}\]📁 \w\[${LIGHTGRAY}\])-"

      # Git branch
      local BRANCH=$(parse_git_branch)
      if [ "$BRANCH" != "" ]; then
          PS1+="\[${LIGHTGRAY}\](\[${LIGHTGREEN}\]⎇ ${BRANCH}\[${LIGHTGRAY}\])-"
      fi

      # Total size of files in current directory
      PS1+="(\[${GREEN}\]$(ls -lah | command grep -m 1 total | sed 's/total //')\[${LIGHTGRAY}\]:"

      # Number of files
      PS1+="\[${GREEN}\]\$(ls -A -1 | wc -l)\[${LIGHTGRAY}\])"

      # Skip to the next line
      PS1+="\n└─"

      if [[ $EUID -ne 0 ]]; then
          PS1+="\[${GREEN}\]$\[${NOCOLOR}\] " # Normal user
      else
          PS1+="\[${RED}\]$\[${NOCOLOR}\] " # Root user
      fi

      # PS2 is used to continue a command using the \ character
      PS2="\[${LIGHTGRAY}\]$\[${NOCOLOR}\] "

      # PS3 is used to enter a number choice in a script
      PS3='Please enter a number from above list: '

      # PS4 is used for tracing a script in debug mode
      PS4='\[${LIGHTGRAY}\]+\[${NOCOLOR}\] '

      # Adjust the prompt depending on whether we're in 'guix environment'.
      if [ -n "$GUIX_ENVIRONMENT" ]; then
          PS1="$PS1 [dev] "
          PS2="$PS2 [dev] "
          PS3="$PS3 [dev] "
          PS4="$PS4 [dev] "
      fi
  }
  PROMPT_COMMAND='__setprompt'

#+end_src

*** General Profile

#+begin_src shell :tangle ~/.dotfiles/.profile

  # Append user scripts to path
  export PATH="$PATH:$HOME/bin"

  # Load the default Guix profile
  GUIX_PROFILE="$HOME/.guix-profile"
  . "$GUIX_PROFILE"/etc/profile

  # Load additional Guix profiles
  export GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles
  for i in $GUIX_EXTRA_PROFILES/*; do
      profile=$i/$(basename "$i")
      if [ -f "$profile"/etc/profile ]; then
          GUIX_PROFILE="$profile"
          . "$GUIX_PROFILE"/etc/profile
      fi
      unset profile
  done

  # Load Nix environment
  if [ -f /run/current-system/profile/etc/profile.d/nix.sh ]; then
      . /run/current-system/profile/etc/profile.d/nix.sh
  fi

  # Append libraries from Nix user packages to library path
  export LIBRARY_PATH="$LIBRARY_PATH:$HOME/.nix-profile/lib"

  # Don't use the system-wide PulseAudio configuration
  unset PULSE_CONFIG
  unset PULSE_CLIENTCONFIG

  # Export java path so that tools pick it up correctly
  export JAVA_HOME=$(realpath $(dirname $(dirname $(which java))))

  # Export casting program for qutebrowser
  export QUTE_CAST_YTDL_PROGRAM="youtube-dl"

  # Make sure we can reach the GPG agent for SSH auth
  export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"

  # Make sure `ls` collates dotfiles first (for dired)
  export LC_COLLATE="C"

  # Many build scripts expect CC to contain the compiler command
  export CC="gcc"

  # Some scripts make use of path to config directory
  export XDG_CONFIG_HOME="$HOME/.config"

  # Some script make use of path to cache directory
  export XDG_CACHE_HOME="$HOME/.cache"

  # Make Flatpak apps visible to launcher
  export XDG_DATA_DIRS="$XDG_DATA_DIRS:$HOME/.local/share/flatpak/exports/share"

  # Make Nix apps visible to launcher
  export PATH="$PATH:$HOME/.nix-profile/bin"
  export XDG_DATA_DIRS="$XDG_DATA_DIRS:$HOME/.nix-profile/share"

  # Make applications in other profiles visible to launcher
  export XDG_DATA_DIRS="$XDG_DATA_DIRS:$GUIX_EXTRA_PROFILES/audio/audio/share"
  export XDG_DATA_DIRS="$XDG_DATA_DIRS:$GUIX_EXTRA_PROFILES/browsers/browsers/share"
  export XDG_DATA_DIRS="$XDG_DATA_DIRS:$GUIX_EXTRA_PROFILES/latex/latex/share"
  export XDG_DATA_DIRS="$XDG_DATA_DIRS:$GUIX_EXTRA_PROFILES/media/media/share"
  export XDG_DATA_DIRS="$XDG_DATA_DIRS:$GUIX_EXTRA_PROFILES/themes-fonts/themes-fonts/share"

  # Make manual pages in other profiles visible
  export MANPATH="$MANPATH:$GUIX_EXTRA_PROFILES/audio/audio/share/man"
  export MANPATH="$MANPATH:$GUIX_EXTRA_PROFILES/browsers/browsers/share/man"
  export MANPATH="$MANPATH:$GUIX_EXTRA_PROFILES/build-tools/build-tools/share/man"
  export MANPATH="$MANPATH:$GUIX_EXTRA_PROFILES/cc/cc/share/man"
  export MANPATH="$MANPATH:$GUIX_EXTRA_PROFILES/desktop/desktop/share/man"
  export MANPATH="$MANPATH:$GUIX_EXTRA_PROFILES/emacs/emacs/share/man"
  export MANPATH="$MANPATH:$GUIX_EXTRA_PROFILES/java/java/share/man"
  export MANPATH="$MANPATH:$GUIX_EXTRA_PROFILES/latex/latex/share/man"
  export MANPATH="$MANPATH:$GUIX_EXTRA_PROFILES/media/media/share/man"
  export MANPATH="$MANPATH:$GUIX_EXTRA_PROFILES/perl/perl/share/man"
  export MANPATH="$MANPATH:$GUIX_EXTRA_PROFILES/prolog/prolog/share/man"
  export MANPATH="$MANPATH:$GUIX_EXTRA_PROFILES/python/python/share/man"
  export MANPATH="$MANPATH:$GUIX_EXTRA_PROFILES/themes-fonts/themes-fonts/share/man"
  export MANPATH="$MANPATH:$GUIX_EXTRA_PROFILES/video/video/share/man"

  # Make info nodes in other profiles visible
  export INFOPATH="$INFOPATH:$GUIX_EXTRA_PROFILES/audio/audio/share/info"
  export INFOPATH="$INFOPATH:$GUIX_EXTRA_PROFILES/browsers/browsers/share/info"
  export INFOPATH="$INFOPATH:$GUIX_EXTRA_PROFILES/build-tools/build-tools/share/info"
  export INFOPATH="$INFOPATH:$GUIX_EXTRA_PROFILES/cc/cc/share/info"
  export INFOPATH="$INFOPATH:$GUIX_EXTRA_PROFILES/desktop/desktop/share/info"
  export INFOPATH="$INFOPATH:$GUIX_EXTRA_PROFILES/emacs/emacs/share/info"
  export INFOPATH="$INFOPATH:$GUIX_EXTRA_PROFILES/java/java/share/info"
  export INFOPATH="$INFOPATH:$GUIX_EXTRA_PROFILES/latex/latex/share/info"
  export INFOPATH="$INFOPATH:$GUIX_EXTRA_PROFILES/media/media/share/info"
  export INFOPATH="$INFOPATH:$GUIX_EXTRA_PROFILES/python/python/share/info"
  export INFOPATH="$INFOPATH:$GUIX_EXTRA_PROFILES/themes-fonts/themes-fonts/share/info"
  export INFOPATH="$INFOPATH:$GUIX_EXTRA_PROFILES/video/video/share/info"

  # We're in Emacs
  export VISUAL=emacsclient
  export EDITOR="$VISUAL"

  # Less specific variables
  export LESSHISTFILE=$XDG_CACHE_HOME/.lesshst

  # Guile specific variables
  export GUILE_HISTORY=$XDG_CACHE_HOME/.guile_history

  # Python specific variables
  export PYTHONSTARTUP=$XDG_CONFIG_HOME/python/history.py
  [[ -v PYTHONPATH ]] \
      && export PYTHONPATH="$PYTHONPATH:$HOME/.nix-profile/lib/python3.9/site-packages" \
          || export PYTHONPATH="$HOME/.nix-profile/lib/python3.9/site-packages"

  # Bash specific variables
  export HISTFILE=$XDG_CACHE_HOME/.bash_history

  # Start the shepherd daemon
  if [[ ! -S ${XDG_RUNTIME_DIR-$HOME/.cache}/shepherd/socket ]]; then
      shepherd -l $XDG_CONFIG_HOME/shepherd/shepherd.log
  fi

  # System 76 charge thresholds set to safe charge
  [ -f ~/bin/safe-charge ] && ~/bin/safe-charge

  # Load .bashrc to get login environment
  [ -f ~/.bashrc ] && . ~/.bashrc

#+end_src

*** Git Profile

#+begin_src conf :tangle ~/.dotfiles/.gitconfig

  [user]
          name = Philippe Gabriel
          email = pgabriel999@hotmail.com
  [github]
          user = phil-gab99

#+end_src

*** Mpd Configuration

#+begin_src conf :tangle ~/.dotfiles/.config/mpd/mpd.conf

  # An example configuration file for MPD.
  # Read the user manual for documentation: http://www.musicpd.org/doc/user/
  # or /usr/share/doc/mpd/html/user.html
  
  
  # Files and directories #######################################################
  #
  # This setting controls the top directory which MPD will search to discover the
  # available audio files and add them to the daemon's online database. This
  # setting defaults to the XDG directory, otherwise the music directory will be
  # be disabled and audio files will only be accepted over ipc socket (using
  # file:// protocol) or streaming files over an accepted protocol.
  
  music_directory		"/home/phil-gab99/Music"
  
  # This setting sets the MPD internal playlist directory. The purpose of this
  # directory is storage for playlists created by MPD. The server will use
  # playlist files not created by the server but only if they are in the MPD
  # format. This setting defaults to playlist saving being disabled.
  
  # playlist_directory		"/home/phil-gab99/Music/playlists"
  
  # This setting sets the location of the MPD database. This file is used to
  # load the database at server start up and store the database while the
  # server is not up. This setting defaults to disabled which will allow
  # MPD to accept files over ipc socket (using file:// protocol) or streaming
  # files over an accepted protocol.
  
  db_file			"/home/phil-gab99/.config/mpd/mpd.db"
  
  # These settings are the locations for the daemon log files for the daemon.
  # These logs are great for troubleshooting, depending on your log_level
  # settings.
  #
  # The special value "syslog" makes MPD use the local syslog daemon. This
  # setting defaults to logging to syslog, or to journal if mpd was started as
  # a systemd service.
  
  log_file			"/home/phil-gab99/.config/mpd/mpd.log"
  
  # This setting sets the location of the file which stores the process ID
  # for use of mpd --kill and some init scripts. This setting is disabled by
  # default and the pid file will not be stored.
  
  pid_file			"/home/phil-gab99/.config/mpd/mpd.pid"
  
  # This setting sets the location of the file which contains information about
  # most variables to get MPD back into the same general shape it was in before
  # it was brought down. This setting is disabled by default and the server
  # state will be reset on server start up.
  
  state_file			"/home/phil-gab99/.config/mpd/mpdstate"
  
  # The location of the sticker database.  This is a database which
  # manages dynamic information attached to songs.
  
  # sticker_file                   "/var/lib/mpd/sticker.sql"
  
  ###############################################################################
  
  
  # General music daemon options ################################################
  #
  # This setting specifies the user that MPD will run as. MPD should never run as
  # root and you may use this setting to make MPD change its user ID after
  # initialization. This setting is disabled by default and MPD is run as the
  # current user.
  
  # user				"mpd"
  
  # This setting specifies the group that MPD will run as. If not specified
  # primary group of user specified with "user" setting will be used (if set).
  # This is useful if MPD needs to be a member of group such as "audio" to
  # have permission to use sound card.
  
  # group                          "nogroup"
  
  # This setting sets the address for the daemon to listen on. Careful attention
  # should be paid if this is assigned to anything other then the default, any.
  # This setting can deny access to control of the daemon. Choose any if you want
  # to have mpd listen on every address. Not effective if systemd socket
  # activation is in use.
  
  # For network
  bind_to_address		"127.0.0.1"
  
  # And for Unix Socket
  # bind_to_address		"/run/mpd/socket"
  
  # This setting is the TCP port that is desired for the daemon to get assigned
  # to.
  
  port				"6600"
  
  # This setting controls the type of information which is logged. Available
  # setting arguments are "default", "secure" or "verbose". The "verbose" setting
  # argument is recommended for troubleshooting, though can quickly stretch
  # available resources on limited hardware storage.
  
  # log_level			"default"
  
  # Setting "restore_paused" to "yes" puts MPD into pause mode instead
  # of starting playback after startup.
  
  # restore_paused "no"
  
  # This setting enables MPD to create playlists in a format usable by other
  # music players.
  
  # save_absolute_paths_in_playlists	"no"
  
  # This setting defines a list of tag types that will be extracted during the
  # audio file discovery process. The complete list of possible values can be
  # found in the user manual.
  
  # metadata_to_use	"artist,album,title,track,name,genre,date,composer,performer,disc"
  
  # This example just enables the "comment" tag without disabling all
  # the other supported tags:
  
  # metadata_to_use "+comment"
  
  # This setting enables automatic update of MPD's database when files in
  # music_directory are changed.
  
  auto_update    "yes"
  
  # Limit the depth of the directories being watched, 0 means only watch
  # the music directory itself.  There is no limit by default.
  
  # auto_update_depth "3"
  
  ###############################################################################
  
  
  # Symbolic link behavior ######################################################
  #
  # If this setting is set to "yes", MPD will discover audio files by following
  # symbolic links outside of the configured music_directory.
  
  # follow_outside_symlinks	"yes"
  
  # If this setting is set to "yes", MPD will discover audio files by following
  # symbolic links inside of the configured music_directory.
  
  # follow_inside_symlinks		"yes"
  
  ###############################################################################
  
  
  # Zeroconf / Avahi Service Discovery ##########################################
  #
  # If this setting is set to "yes", service information will be published with
  # Zeroconf / Avahi.
  
  # zeroconf_enabled		"yes"
  
  # The argument to this setting will be the Zeroconf / Avahi unique name for
  # this MPD server on the network. %h will be replaced with the hostname.
  
  # zeroconf_name			"Music Player @ %h"
  
  ###############################################################################
  
  
  # Permissions #################################################################
  #
  # If this setting is set, MPD will require password authorization. The password
  # setting can be specified multiple times for different password profiles.
  
  # password                        "password@read,add,control,admin"
  
  # This setting specifies the permissions a user has who has not yet logged in.
  
  # default_permissions             "read,add,control,player,admin"
  
  ###############################################################################
  
  
  # Database #######################################################################
  #
  
  #database {
  #       plugin "proxy"
  #       host "other.mpd.host"
  #       port "6600"
  #}
  
  # Input #######################################################################
  #
  
  input {
          plugin "curl"
  #       proxy "proxy.isp.com:8080"
  #       proxy_user "user"
  #       proxy_password "password"
  }
  
  # QOBUZ input plugin
  input {
          enabled    "no"
          plugin     "qobuz"
  #        app_id     "ID"
  #        app_secret "SECRET"
  #        username   "USERNAME"
  #        password   "PASSWORD"
  #        format_id  "N"
  }
  
  # TIDAL input plugin
  input {
          enabled      "no"
          plugin       "tidal"
  #        token        "TOKEN"
  #        username     "USERNAME"
  #        password     "PASSWORD"
  #        audioquality "Q"
  }
  
  # Decoder #####################################################################
  #
  
  decoder {
          plugin                  "hybrid_dsd"
          enabled                 "no"
  #       gapless                 "no"
  }
  
  ###############################################################################
  
  # Audio Output ################################################################
  #
  # MPD supports various audio output types, as well as playing through multiple
  # audio outputs at the same time, through multiple audio_output settings
  # blocks. Setting this block is optional, though the server will only attempt
  # autodetection for one sound card.
  
  # An example of an ALSA output:
  
  # audio_output {
  # 	type		"alsa"
  # 	name		"My ALSA Device"
  #	device		"hw:0,0"	# optional
  #	mixer_type      "hardware"      # optional
  #	mixer_device	"default"	# optional
  #	mixer_control	"PCM"		# optional
  #	mixer_index	"0"		# optional
  # }
  
  # An example of an OSS output:
  
  # audio_output {
  #	type		"oss"
  #	name		"My OSS Device"
  #	device		"/dev/dsp"	# optional
  #	mixer_type      "hardware"      # optional
  #	mixer_device	"/dev/mixer"	# optional
  #	mixer_control	"PCM"		# optional
  # }
  
  # An example of a shout output (for streaming to Icecast):
  
  # audio_output {
  #	type		"shout"
  #	encoder		"vorbis"		# optional
  #	name		"My Shout Stream"
  #	host		"localhost"
  #	port		"8000"
  #	mount		"/mpd.ogg"
  #	password	"hackme"
  #	quality		"5.0"
  #	bitrate		"128"
  #	format		"44100:16:1"
  #	protocol	"icecast2"		# optional
  #	user		"source"		# optional
  #	description	"My Stream Description"	# optional
  #	url             "http://example.com"    # optional
  #	genre		"jazz"			# optional
  #	public		"no"			# optional
  #	timeout		"2"			# optional
  #	mixer_type      "software"              # optional
  # }
  
  # An example of a recorder output:
  
  # audio_output {
  #       type            "recorder"
  #       name            "My recorder"
  #       encoder         "vorbis"                # optional, vorbis or lame
  #       path            "/var/lib/mpd/recorder/mpd.ogg"
  #       quality         "5.0"                   # do not define if bitrate is defined
  #       bitrate         "128"                   # do not define if quality is defined
  #       format          "44100:16:1"
  # }
  
  # An example of a httpd output (built-in HTTP streaming server):
  
  # audio_output {
  #	type		"httpd"
  #	name		"My HTTP Stream"
  #	encoder		"vorbis"		# optional, vorbis or lame
  #	port		"8000"
  #	bind_to_address "0.0.0.0"               # optional, IPv4 or IPv6
  #	quality		"5.0"			# do not define if bitrate is defined
  #	bitrate		"128"			# do not define if quality is defined
  #	format		"44100:16:1"
  #	max_clients     "0"                     # optional 0=no limit
  # }
  
  # An example of a pulseaudio output (streaming to a remote pulseaudio server)
  # Please see README.Debian if you want mpd to play through the pulseaudio
  # daemon started as part of your graphical desktop session!
  
  audio_output {
  	type		"pulse"
  	name		"My Pulse Output"
  #	server		"remote_server"		# optional
  #	sink		"remote_server_sink"	# optional
  }
  
  # An example of a winmm output (Windows multimedia API).
  
  # audio_output {
  # 	type		"winmm"
  # 	name		"My WinMM output"
  #	device		"Digital Audio (S/PDIF) (High Definition Audio Device)" # optional
  #		or
  #	device		"0"		# optional
  #	mixer_type	"hardware"	# optional
  # }
  
  # An example of an openal output.
  
  # audio_output {
  #	type		"openal"
  #	name		"My OpenAL output"
  #	device		"Digital Audio (S/PDIF) (High Definition Audio Device)" # optional
  # }
  
  # Example "pipe" output:
  
  # audio_output {
  #	type		"pipe"
  #	name		"my pipe"
  #	command		"aplay -f cd 2>/dev/null"
  ## Or if you want to use AudioCompress
  #	command		"AudioCompress -m | aplay -f cd 2>/dev/null"
  ## Or to send raw PCM stream through PCM:
  #	command		"nc example.org 8765"
  #	format		"44100:16:2"
  # }
  
  # An example of a null output (for no audio output):
  
  # audio_output {
  #	type		"null"
  #	name		"My Null Output"
  #	mixer_type      "none"                  # optional
  # }
  
  ###############################################################################
  
  
  # Normalization automatic volume adjustments ##################################
  
  # This setting specifies the type of ReplayGain to use. This setting can have
  # the argument "off", "album", "track" or "auto". "auto" is a special mode that
  # chooses between "track" and "album" depending on the current state of
  # random playback. If random playback is enabled then "track" mode is used.
  # See <http://www.replaygain.org> for more details about ReplayGain.
  # This setting is off by default.
  
  #replaygain			"album"
  
  # This setting sets the pre-amp used for files that have ReplayGain tags. By
  # default this setting is disabled.
  
  # replaygain_preamp		"0"
  
  # This setting sets the pre-amp used for files that do NOT have ReplayGain tags.
  # By default this setting is disabled.
  
  # replaygain_missing_preamp	"0"
  
  # This setting enables or disables ReplayGain limiting.
  # MPD calculates actual amplification based on the ReplayGain tags
  # and replaygain_preamp / replaygain_missing_preamp setting.
  # If replaygain_limit is enabled MPD will never amplify audio signal
  # above its original level. If replaygain_limit is disabled such amplification
  # might occur. By default this setting is enabled.
  
  # replaygain_limit		"yes"
  #
  # This setting enables on-the-fly normalization volume adjustment. This will
  # result in the volume of all playing audio to be adjusted so the output has
  # equal "loudness". This setting is disabled by default.
  
  # volume_normalization		"no"
  
  ###############################################################################
  
  # Character Encoding ##########################################################
  
  # If file or directory names do not display correctly for your locale then you
  # may need to modify this setting.
  
  filesystem_charset		"UTF-8"
  
  ###############################################################################

#+end_src

*** Mpv Configuration

#+begin_src conf :tangle ~/.dotfiles/.config/mpv/mpv.conf

  # Example mpv configuration file
  #
  # Warning:
  #
  # The commented example options usually do _not_ set the default values. Call
  # mpv with --list-options to see the default values for most options. There is
  # no builtin or example mpv.conf with all the defaults.
  #
  #
  # Configuration files are read system-wide from /usr/local/etc/mpv.conf
  # and per-user from ~/.config/mpv/mpv.conf, where per-user settings override
  # system-wide settings, all of which are overridden by the command line.
  #
  # Configuration file settings and the command line options use the same
  # underlying mechanisms. Most options can be put into the configuration file
  # by dropping the preceding '--'. See the man page for a complete list of
  # options.
  #
  # Lines starting with '#' are comments and are ignored.
  #
  # See the CONFIGURATION FILES section in the man page
  # for a detailed description of the syntax.
  #
  # Profiles should be placed at the bottom of the configuration file to ensure
  # that settings wanted as defaults are not restricted to specific profiles.

  ##################
  # video settings #
  ##################

  # Start in fullscreen mode by default.
  fs=yes

  # force starting with centered window
  #geometry=50%:50%

  # don't allow a new window to have a size larger than 90% of the screen size
  #autofit-larger=90%x90%

  # Do not close the window on exit.
  #keep-open=yes

  # Do not wait with showing the video window until it has loaded. (This will
  # resize the window once video is loaded. Also always shows a window with
  # audio.)
  #force-window=immediate

  # Disable the On Screen Controller (OSC).
  #osc=no

  # Keep the player window on top of all other windows.
  #ontop=yes

  # Specify high quality video rendering preset (for --vo=gpu only)
  # Can cause performance problems with some drivers and GPUs.
  #profile=gpu-hq

  # Force video to lock on the display's refresh rate, and change video and audio
  # speed to some degree to ensure synchronous playback - can cause problems
  # with some drivers and desktop environments.
  #video-sync=display-resample

  # Enable hardware decoding if available. Often, this does not work with all
  # video outputs, but should work well with default settings on most systems.
  # If performance or energy usage is an issue, forcing the vdpau or vaapi VOs
  # may or may not help.
  #hwdec=auto

  ##################
  # audio settings #
  ##################

  # Specify default audio device. You can list devices with: --audio-device=help
  # The option takes the device string (the stuff between the '...').
  #audio-device=alsa/default

  # Do not filter audio to keep pitch when changing playback speed.
  #audio-pitch-correction=no

  # Output 5.1 audio natively, and upmix/downmix audio with a different format.
  #audio-channels=5.1
  # Disable any automatic remix, _if_ the audio output accepts the audio format.
  # of the currently played file. See caveats mentioned in the manpage.
  # (The default is "auto-safe", see manpage.)
  #audio-channels=auto

  ##################
  # other settings #
  ##################

  # Pretend to be a web browser. Might fix playback with some streaming sites,
  # but also will break with shoutcast streams.
  #user-agent="Mozilla/5.0"

  # cache settings
  #
  # Use a large seekable RAM cache even for local input.
  #cache=yes
  #
  # Use extra large RAM cache (needs cache=yes to make it useful).
  #demuxer-max-bytes=500M
  #demuxer-max-back-bytes=100M
  #
  # Disable the behavior that the player will pause if the cache goes below a
  # certain fill size.
  #cache-pause=no
  #
  # Store cache payload on the hard disk instead of in RAM. (This may negatively
  # impact performance unless used for slow input such as network.)
  #cache-dir=~/.cache/
  #cache-on-disk=yes

  # Display English subtitles if available.
  #slang=en

  # Play Finnish audio if available, fall back to English otherwise.
  #alang=fi,en

  # Change subtitle encoding. For Arabic subtitles use 'cp1256'.
  # If the file seems to be valid UTF-8, prefer UTF-8.
  # (You can add '+' in front of the codepage to force it.)
  #sub-codepage=cp1256

  # You can also include other configuration files.
  #include=/path/to/the/file/you/want/to/include

  ############
  # Profiles #
  ############

  # The options declared as part of profiles override global default settings,
  # but only take effect when the profile is active.

  # The following profile can be enabled on the command line with: --profile=eye-cancer

  #[eye-cancer]
  #sharpen=5

#+end_src

*** Node Package Manager Configuration

#+begin_src shell :tangle ~/.dotfiles/.npmrc

  prefix=~/.npm

#+end_src

*** Python

#+begin_src python :tangle ~/.dotfiles/.config/python/history.py

  # Enable custom ~/.python_history location on Python interactive console
  # Set PYTHONSTARTUP to this file on ~/.profile or similar for this to work
  # Currently sets history to ~/.cache/.python_history

  import atexit
  import os
  import readline
  import time


  def write_history(path):
      import os
      import readline
      try:
          os.makedirs(os.path.dirname(path), mode=0o700, exist_ok=True)
          readline.write_history_file(path)
      except OSError:
          pass


  history = os.path.join(os.environ.get('XDG_CACHE_HOME') or
                         os.path.expanduser('~/.cache'),
                         '.python_history')
  try:
      readline.read_history_file(history)
  except FileNotFoundError:
      pass

  # Prevents creation of default history if custom is empty
  if readline.get_current_history_length() == 0:
      readline.add_history(f'# History created at {time.asctime()}')

  atexit.register(write_history, history)
  del (atexit, os, readline, time, history, write_history)

#+end_src

*** Terminal Text Editors

**** Nano

#+begin_src conf :tangle ~/.dotfiles/.config/nano/nanorc

  # Include all the syntax highlighting modules.
  include /run/current-system/profile/share/nano/*.nanorc

#+end_src

**** Vim

#+begin_src shell :tangle ~/.dotfiles/.vimrc

  " Encoding
  set encoding=utf-8

  " Syntax
  syntax on

  " Line numbers
  set number
  set relativenumber
  set ruler
  set laststatus=2

  " Search features
  set hlsearch
  set showmatch
  set incsearch
  set ignorecase
  set smartcase

  " Mode
  set showmode

  " Commands
  set showcmd
  set wildmenu
  set wildmode=list:longest

  " Indentation
  set tabstop=4
  set softtabstop=4
  set shiftwidth=4
  set textwidth=80
  set expandtab
  set smartindent

  " Delimiter matching
  set showmatch

  " Key Mappings
  nnoremap j gj
  nnoremap k gk

  " Color theme
  set background=dark
  colorscheme slate

  " Miscellaneous
  set viminfofile=~/.cache/vim/viminfo
  set backupdir=~/.cache/vim
  set dir=~/.cache/vim

#+end_src

*** Termux

**** Termux Properties

#+begin_src conf :tangle ~/.dotfiles/.termux/termux.properties

  ### After making changes and saving you need to run `termux-reload-settings`
  ### to update the terminal.  All information here can also be found on the
  ### wiki: https://wiki.termux.com/wiki/Terminal_Settings

  ###############
  # General
  ###############

  ### Allow external applications to execute arbitrary commands within Termux.
  ### This potentially could be a security issue, so option is disabled by
  ### default. Uncomment to enable.
  # allow-external-apps = true

  ### Default working directory that will be used when launching the app.
  default-working-directory = /data/data/com.termux/files/home

  ### Uncomment to disable toasts shown on terminal session change.
  # disable-terminal-session-change-toast = true

  ### Uncomment to not show soft keyboard on application start.
  # hide-soft-keyboard-on-startup = true

  ### Uncomment to let keyboard toggle button to enable or disable software
  ### keyboard instead of showing/hiding it.
  # soft-keyboard-toggle-behaviour = enable/disable

  ### Adjust terminal scrollback buffer. Max is 50000. May have negative
  ### impact on performance.
  # terminal-transcript-rows = 2000

  ### Uncomment to use volume keys for adjusting volume and not for the
  ### extra keys functionality.
  # volume-keys = volume

  ###############
  # Fullscreen mode
  ###############

  ### Uncomment to let Termux start in full screen mode.
  fullscreen = true

  ### Uncomment to attempt workaround layout issues when running in full screen
  ### mode.
  # use-fullscreen-workaround = true

  ###############
  # Cursor
  ###############

  ### Cursor blink rate. Values 0, 100 - 2000.
  terminal-cursor-blink-rate = 5

  ### Cursor style: block, bar, underline.
  # terminal-cursor-style = bar

  ###############
  # Extra keys
  ###############

  ### Settings for choosing which set of symbols to use for illustrating keys.
  ### Choose between default, arrows-only, arrows-all, all and none
  # extra-keys-style = default

  ### Force capitalize all text in extra keys row button labels.
  # extra-keys-text-all-caps = true

  ### Default extra-key configuration
  # extra-keys = [[ESC, TAB, CTRL, ALT, {key: '-', popup: '|'}, DOWN, UP]]

  ### Two rows with more keys
  # extra-keys = [['ESC','/','-','HOME','UP','END','PGUP'], \
  #               ['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN']]
  extra-keys = [['ESC','CTRL','/','UP','-'], \
  ['TAB','ALT','LEFT','DOWN','RIGHT']]

  ### Configuration with additional popup keys (swipe up from an extra key)
  # extra-keys = [[ \
  #   {key: ESC, popup: {macro: "CTRL f d", display: "tmux exit"}}, \
  #   {key: CTRL, popup: {macro: "CTRL f BKSP", display: "tmux ←"}}, \
  #   {key: ALT, popup: {macro: "CTRL f TAB", display: "tmux →"}}, \
  #   {key: TAB, popup: {macro: "ALT a", display: A-a}}, \
  #   {key: LEFT, popup: HOME}, \
  #   {key: DOWN, popup: PGDN}, \
  #   {key: UP, popup: PGUP}, \
  #   {key: RIGHT, popup: END}, \
  #   {macro: "ALT j", display: A-j, popup: {macro: "ALT g", display: A-g}}, \
  #   {key: KEYBOARD, popup: {macro: "CTRL d", display: exit}} \
  # ]]

  ###############
  # Colors/themes
  ###############

  ### Force black colors for drawer and dialogs
  # use-black-ui = true

  ###############
  # HW keyboard shortcuts
  ###############

  ### Disable hardware keyboard shortcuts.
  # disable-hardware-keyboard-shortcuts = true

  ### Open a new terminal with ctrl + t (volume down + t)
  # shortcut.create-session = ctrl + t

  ### Go one session down with (for example) ctrl + 2
  # shortcut.next-session = ctrl + 2

  ### Go one session up with (for example) ctrl + 1
  # shortcut.previous-session = ctrl + 1

  ### Rename a session with (for example) ctrl + n
  # shortcut.rename-session = ctrl + n

  ###############
  # Bell key
  ###############

  ### Vibrate device (default).
  # bell-character = vibrate

  ### Beep with a sound.
  # bell-character = beep

  ### Ignore bell character.
  bell-character = ignore

  ###############
  # Back key
  ###############

  ### Send the Escape key.
  # back-key=escape

  ### Hide keyboard or leave app (default).
  # back-key=back

  ###############
  # Keyboard issue workarounds
  ###############

  ### Letters might not appear until enter is pressed on Samsung devices
  # enforce-char-based-input = true

  ### ctrl+space (for marking text in emacs) does not work on some devices
  # ctrl-space-workaround = true

#+end_src

**** Termux Color Properties

#+begin_src conf :tangle ~/.dotfiles/.termux/colors.properties

  foreground=#adb0a2
  background=#292b2e
  cursor=#eead0e
  color0=#1C2023
  color1=#C7AE95
  color2=#cc5279
  color3=#6690da
  color4=#000000
  color5=#C795AE
  color6=#4f97d7
  color7=#C7CCD1
  color8=#747C84
  color9=#C7AE95
  color10=#95C7AE
  color11=#AEC795
  color12=#bb6dc4
  color13=#C795AE
  color14=#95AEC7
  color15=#F3F4F5
  color16=#C7C795
  color17=#C79595
  color18=#393F45
  color19=#565E65
  color20=#ADB3BA
  color21=#DFE2E5

#+end_src

**** Termux Startup

#+begin_src sh :tangle ~/.dotfiles/.termux/boot/emacs :shebang #!/bin/env sh

  emacs

#+end_src

*** X Defaults

Xsession default values

#+begin_src conf :tangle ~/.dotfiles/.Xdefaults

  XTerm*utf8: always
  XTerm*metaSendsEscape: true

#+end_src

*** X Session

Acting with respect to window manager selected

#+begin_src sh :tangle ~/.dotfiles/.xsession

  DEFAULT_SESSION=exwm

  case $1 in
      *exwm)
          # Running in EXWM
          export EXWM=1

          # Ensure that font folders are loaded correctly
          xset +fp $(dirname $(readlink -f ~/.guix-extra-profiles/themes-fonts/themes-fonts/share/fonts/truetype/fonts.dir))

          # Make Java applications aware this is a non-reparenting window manager.
          export _JAVA_AWT_WM_NONREPARENTING=1

          # For debugging
          # xterm

          exec $1
          ;;
      *)
          exec $DEFAULT_SESSION
          ;;
  esac

#+end_src

** Scripts

*** Archive Extractor

This script extract most known archive formats:

#+begin_src sh

  extract foo.zip

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/extract :shebang #!/usr/bin/env sh

  for archive in "$@"; do
      if [ -f "$archive" ] ; then
          case "$archive" in
              *.tar.bz2) tar xvjf "$archive" ;;
              *.tar.gz)  tar xvzf "$archive" ;;
              *.tar.xz)  tar xvzf "$archive" ;;
              *.bz2)     bunzip2 "$archive" ;;
              *.gz)      gunzip "$archive" ;;
              *.tar)     tar xvf "$archive" ;;
              *.tbz2)    tar xvjf "$archive" ;;
              *.tgz)     tar xvzf "$archive" ;;
              *.zip)     unzip "$archive" ;;
              *.Z)       uncompress "$archive" ;;
              *.7z)      7z x "$archive" ;;
              *.rar)     unrar x "$archive" ;;
              *)         echo "Can't extract '$archive'" ;;
          esac
      else
          echo "'$archive' is not a valid file!"
      fi
  done

  exit 0

#+end_src

*** Boot Fix

This is not a script though just a set of commands I need to run when Guix fails to boot properly

#+begin_src sh :tangle ~/.dotfiles/bin/bfix

  # Run ls (hd0) or (hd1) and select the appropriate partitions until /boot/grub/ is found
  # Then apply the following (Below is the appropriate values for this machine)

  set prefix=(hd1,3)/boot/grub/
  set root=(hd1,3)
  insmod linux
  insmod normal
  normal

  # It should boot normally afterwards
  # Run update-system to have it boot normally

#+end_src

*** Charge Thresholds

These scripts adjust the charge threshold for a System76 laptop:

#+begin_src sh

  safe-charge

#+end_src

*Max Charge*

#+begin_src sh :tangle ~/.dotfiles/bin/max-charge :shebang #!/usr/bin/env sh

  echo 0 > /sys/class/power_supply/BAT0/charge_control_start_threshold
  echo 100 > /sys/class/power_supply/BAT0/charge_control_end_threshold
  echo "Max Charge Enabled - 100%"

  exit 0

#+end_src

*Normal Charge*

#+begin_src sh :tangle ~/.dotfiles/bin/normal-charge :shebang #!/usr/bin/env sh

  echo 60 > /sys/class/power_supply/BAT0/charge_control_start_threshold
  echo 81 > /sys/class/power_supply/BAT0/charge_control_end_threshold
  echo "Normal Charge Enabled - 80%"

  exit 0

#+end_src

*Safe charge*

#+begin_src sh :tangle ~/.dotfiles/bin/safe-charge :shebang #!/usr/bin/env sh

  echo 50 > /sys/class/power_supply/BAT0/charge_control_start_threshold
  echo 61 > /sys/class/power_supply/BAT0/charge_control_end_threshold
  echo "Safe Charge Enabled - 60%"

  exit 0

#+end_src

*** Mail Setup

This script sets up email accounts using ~mu~:

#+begin_src sh

  mail-init

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/mail-init :shebang #!/usr/bin/env sh

  mu init -m ~/Mail --my-address=pgabriel999@hotmail.com --my-address=philippe.gabriel.1@umontreal.ca
  mu index

  exit 0

#+end_src

*** Music Download

This script helps download music from youtube:

#+begin_src sh

  download-music 

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/download-music :shebang #!/usr/bin/env sh

  for music in $*; do
      youtube-dl -x --audio-format "mp3" -o '~/Music/%(title)s.%(ext)s' $music
  done

  exit 0

#+end_src

*** Password Sync

This script is used with mcron to schedule password synching

#+begin_src sh :tangle ~/.dotfiles/bin/sync-passwords :shebang #!/usr/bin/env sh

  pass git pull
  pass git push

  notify-send -i "emblem-synchronizing" "Passwords synced!"

  exit 0

#+end_src

*Scheduling with mcron*

#+begin_src scheme :tangle ~/.dotfiles/.config/cron/pass-sync.guile

  (job
   '(next-hour (range 0 24 4))
   "~/bin/sync-passwords")

#+end_src

*** Pretty Print

This script pretty prints colon delimited variables such as ~$PATH~:

#+begin_src sh

  echoFormat $PATH

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/echoFormat :shebang #!/usr/bin/env sh

  IFS=:
  for i in $1; do
      echo $i
  done

  exit 0

#+end_src

*** Screenshot to Clipboard

This script helps save a screenshot to clipboard:

#+begin_src sh

  scrot-clipboard

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/scrot-clipboard :shebang #!/usr/bin/env sh

  scrot -s -e 'xclip -selection clipboard -t image/png -i $f && rm -f $f'

  exit 0

#+end_src

*** TA Script

This is a script I tend to use when correcting student assignments to speed up my workflow:

#+begin_src sh

  collect-assignments --unzip 3

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/collect-assignments :shebang #!/usr/bin/env sh

  if [ $# -lt 1 ]
  then
      echo "Usage: collect-assignments option [toskip]"
      echo 
      echo "Available options:"
      echo "    --extract   Unzips zip archives files starting at current directory."
      echo "    --open      Opens file using appropriate program."
      echo "    --collect   Collects corrections into a corr directory."
      echo

      exit 1
  fi

  count=0
  OPTION=$1
  TOSKIP=${2:-0}

  function apply {
      for f in ./"$1"/*; do
          if [ -d "$f" ]; then
              apply "$f"
          elif [ -f "$f" ]; then
              case "$OPTION" in
                  --extract)
                      ABS=$(realpath "$f")
                      DIR=$(dirname "$ABS")
                      case "$f" in
                          *.zip) unzip "$f" -d "$DIR";;
                          *.rar) unrar x "$f" "$DIR" ;;
                          *) ;;
                      esac
                      ;;
                  --open)
                      case "$f" in
                          *.pdf) xournalpp "$f";;
                          *.docx) libreoffice "$f";;
                          *.lmc) emacsclient "$f";;
                          *.hs) emacsclient "$f";;
                          *.sh) emacsclient "$f";;
                          *.txt) emacsclient "$f";;
                          *.py) emacsclient "$f";;
                          *) ;;
                      esac
                      ;;
                  --collect)
                      case "$f" in
                          corr-*) mv "$f" ../*-corr/;;
                          *) ;; # echo "$f"
                      esac
                      ;;
                  *)
                      echo "Unknown option"
                      exit 1
                      ;;
              esac
          fi
      done
  }

  for d in *; do
      if [ -d "$d" ]; then
          echo "---------------------"
          ls "$d"
          echo "------------------"
          if [ $count -ge $TOSKIP ]; then
              echo "Working on $count"
              sleep 2
              apply "$d"
          fi
          ((count++))
          echo
      fi
  done

  exit 0

#+end_src

*** Wacom Tablet Scripts

These are scripts to help quickly configure the screen onto which is mapped the wacom stylus when dealing with multiple screens:

#+begin_src sh

  wacom-laptop

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/wacom-laptop :shebang #!/usr/bin/env sh

  xinput map-to-output "Wacom Intuos PT S Pen Pen (0)" eDP-1
  xinput map-to-output "Wacom Intuos PT S Pen Eraser (0)" eDP-1

  echo "Mapped to laptop!"

  exit 0

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/wacom-screen :shebang #!/usr/bin/env sh

  xinput map-to-output "Wacom Intuos PT S Pen Pen (0)" HDMI-1
  xinput map-to-output "Wacom Intuos PT S Pen Eraser (0)" HDMI-1

  echo "Mapped to HDMI!"

  exit 0

#+end_src

* Nix Package Manager

#+begin_src fundamental :tangle ~/.dotfiles/.nix-channels

  https://nixos.org/channels/nixpkgs-unstable nixpkgs

#+end_src

The channel needs to be updated before any packages can be installed:

#+begin_src sh

  nix-channel --update

#+end_src

Installing packages:

#+begin_src sh

  nix-env -i nodejs dotnet-sdk gh hledger
  nix-env -iA nixpkgs.nodejs-12_x # For a specific version

#+end_src
