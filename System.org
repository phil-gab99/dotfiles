#+title: System Configuration with Guix
#+author: Philippe Gabriel
#+property: header-args    :tangle-mode (identity #o444)
#+property: header-args:sh :tangle-mode (identity #o555)

* Channels

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/base-channels.scm

  (list (channel
         (name 'pg)
         (url (string-append "file://" (getenv "HOME") "/Projects/guix-channel")))
        (channel
         (name 'flat)
         (url "https://github.com/flatwhatson/guix-channel.git")
         (introduction
          (make-channel-introduction
           "33f86a4b48205c0dc19d7c036c85393f0766f806"
           (openpgp-fingerprint
            "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
        (channel
         (name 'rde)
         (url "https://git.sr.ht/~abcdw/rde")
         (introduction
          (make-channel-introduction
           "257cebd587b66e4d865b3537a9a88cccd7107c95"
           (openpgp-fingerprint
            "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))
        (channel
         (name 'nonguix)
         (url "https://gitlab.com/nonguix/nonguix")
         (introduction
          (make-channel-introduction
           "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
           (openpgp-fingerprint
            "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
        (channel
         (name 'guix)
         (url "https://git.savannah.gnu.org/git/guix.git")
         (introduction
          (make-channel-introduction
           "9edb3f66fd807b096b48283debdcddccfea34bad"
           (openpgp-fingerprint
            "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))

#+end_src

* Systems

** Base Configuration

This base configuration is shared between all of the machines I manage with Guix.

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/systems/base.scm

  (define-module (systems base)
    #:use-module (gnu)
    #:use-module (gnu packages)
    #:use-module (nongnu packages linux)
    #:use-module (srfi srfi-1))

  (use-package-modules audio
                       base
                       certs
                       cups
                       dns
                       emacs
                       emacs-xyz
                       file-systems
                       gnome
                       gtk
                       linux
                       mtools
                       ncurses
                       package-management
                       pulseaudio
                       shells
                       version-control
                       vim
                       virtualization
                       web-browsers
                       wm
                       xorg)

  (use-service-modules cups
                       desktop
                       docker
                       networking
                       nix
                       pm
                       ssh
                       virtualization
                       xorg)

  (use-system-modules nss)

#+end_src

Add a ~udev~ rule to enable members of the ~charge~ group to control charging thresholds.

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/systems/base.scm

  (define %charge-thresholds-udev-rule
    (udev-rule
     "90-charge-thresholds.rules"
     (string-append "KERNEL==\"BAT0\", "
                    "SUBSYSTEM==\"power_supply\", "
                    "RUN+=\"/run/current-system/profile/bin/chgrp charge /sys/class/power_supply/%k/charge_control_start_threshold /sys/class/power_supply/%k/charge_control_end_threshold\""
                    "\n"
                    "KERNEL==\"BAT0\", "
                    "SUBSYSTEM==\"power_supply\", "
                    "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/power_supply/%k/charge_control_start_threshold /sys/class/power_supply/%k/charge_control_end_threshold\"")))

#+end_src

Add ~udev~ rules for Arduino setup.

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/systems/base.scm

  (define %acm-udev-rule
    (udev-rule
     "90-extraacl.rules"
     (string-append "KERNEL==\"ttyUSB[0-9]*\", "
                    "TAG+=\"udev-acl\", "
                    "TAG+=\"uaccess\", "
                    "OWNER=\"phil-gab99\""
                    "\n"
                    "KERNEL==\"ttyACM[0-9]*\", "
                    "TAG+=\"udev-acl\", "
                    "TAG+=\"uaccess\", "
                    "OWNER=\"phil-gab99\"")))

  (define %open-ocd-udev-rule
    (udev-rule
     "98-openocd.rules"
     (string-append "ACTION!=\"add|change\", "
                    "GOTO=\"openocd_rules_end\""
                    "\n"
                    "SUBSYSTEM!=\"usb|tty|hidraw\", "
                    "GOTO=\"openocd_rules_end\""
                    "\n"
                    "#Please keep this list sorted by VID:PID"
                    "\n"
                    "#CMSIS-DAP compatible adapters"
                    "ATTRS{product}==\"*CMSIS-DAP*\", "
                    "MODE=\"664\", "
                    "GROUP=\"plugdev\""
                    "\n"
                    "LABEL=\"openocd_rules_end\"")))

  ;; Define rest of rules

#+end_src

Override the default ~%desktop-services~ to add ~udev~ rules and apply other configuration.

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/systems/base.scm

  (define %my-desktop-services
    (modify-services %desktop-services
                     (elogind-service-type config =>
                                           (elogind-configuration
                                            (inherit config)
                                            (handle-lid-switch-external-power 'suspend)))
                     (udev-service-type config =>
                                        (udev-configuration
                                         (inherit config)
                                         (rules (cons* %charge-thresholds-udev-rule
                                                       (udev-configuration-rules config)))))
                     (network-manager-service-type config =>
                                                   (network-manager-configuration
                                                    (inherit config)
                                                    (vpn-plugins (list network-manager-openvpn
                                                                       network-manager-openconnect))))))

#+end_src

Use the ~libinput~ driver for all input devices since it's a bit more modern than the default.

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/systems/base.scm

  (define %xorg-libinput-config
    "Section \"InputClass\"
    Identifier \"Touchpads\"

    Driver \"libinput\"
    MatchDevicePath \"/dev/input/event*\"
    MatchIsTouchpad \"on\"

    Option \"Tapping\" \"on\"
    Option \"TappingDrag\" \"on\"
    Option \"NaturalScrolling\" \"on\"
    Option \"DisableWhileTyping\" \"on\"
    Option \"ScrollMethod\" \"twofinger\"
    Option \"MiddleEmulation\" \"on\"
  EndSection
  Section \"InputClass\"
    Identifier \"Keyboards\"
    Driver \"libinput\"
    MatchDevicePath \"/dev/input/event*\"
    MatchIsKeyboard \"on\"
  EndSection
  ")

#+end_src

Define the ~base-operating-system~ which will be inherited by all machine configurations.

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/systems/base.scm

  (define-public base-operating-system
    (operating-system
     ;; Use non-free Linux and firmware
     (kernel linux)
     (firmware (list linux-firmware))

     ;; Generic information that may be overriden
     (locale "en_CA.utf8")
     (timezone "America/Toronto")
     (keyboard-layout (keyboard-layout "us"))
     (host-name "tmp")

     ;; Default user
     (users
      (cons
       (user-account (name "phil-gab99")
                     (comment "Philippe Gabriel")
                     (group "users")
                     (home-directory "/home/phil-gab99")
                     (supplementary-groups '("wheel"     ;; sudo
                                             "netdev"    ;; network devices
                                             "kvm"
                                             "tty"
                                             "dialout"
                                             "uucp"
                                             "plugdev"
                                             "input"
                                             "libvirt"
                                             "charge"
                                             "docker"
                                             "lp"        ;; control bluetooth devices
                                             "audio"     ;; control audio devices
                                             "video")))  ;; control video devices
       %base-user-accounts))

     ;; Add extra groups
     (groups
      (cons*
       (user-group (system? #t)
                   (name "charge"))
       (user-group (system? #t)
                   (name "uucp"))
       (user-group (system? #t)
                   (name "plugdev"))
       %base-groups))

     ;; Partition mounted on /boot/efi.
     (bootloader (bootloader-configuration
                  (bootloader grub-efi-bootloader)
                  (targets (list "/boot/efi"))
                  (keyboard-layout keyboard-layout)))

     ;; File system to be overridden
     (file-systems
      (cons
       (file-system (mount-point "/tmp")
                    (device "none")
                    (type "tmpfs")
                    (check? #f))
       %base-file-systems))

     ;; System packages
     (packages
      (append
       (list bluez
             bluez-alsa
             coreutils
             emacs
             emacs-exwm
             emacs-desktop-environment
             exfat-utils
             fuse-exfat
             git
             gvfs
             ncurses
             nix
             nss-certs
             ntfs-3g
             pulseaudio
             vim
             xf86-input-libinput
             xterm)
       %base-packages))

     ;; System services
     (services
      (cons*
       (set-xorg-configuration
        (xorg-configuration
         (keyboard-layout keyboard-layout)
         (extra-config (list %xorg-libinput-config))))
       (service openssh-service-type)
       (service cups-service-type
                (cups-configuration
                 (web-interface? #t)
                 (extensions
                  (list cups-filters))))
       (service nix-service-type)
       (service docker-service-type)
       (service libvirt-service-type
                (libvirt-configuration
                 (unix-sock-group "libvirt")
                 (tls-port "16555")))
       (service virtlog-service-type
                (virtlog-configuration
                 (max-clients 1000)))
       (service bluetooth-service-type
                (bluetooth-configuration
                 (auto-enable? #t)))
       (service xfce-desktop-service-type)
       (extra-special-file "/bin/env"
                           (file-append coreutils "/bin/env"))
       (extra-special-file "/lib64/ld-linux-x86-64.so.2"
                           (file-append glibc "/lib/ld-linux-x86-64.so.2"))
       %my-desktop-services))))

#+end_src

** Machines

*** s76-laptop

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/systems/s76-laptop.scm

  (define-module (systems s76-laptop)
    #:use-module (systems base)
    #:use-module (gnu))

  (use-package-modules file-systems)

  (operating-system
   (inherit base-operating-system)

   (host-name "s76-laptop")

   (swap-devices
    (list
     (swap-space (target
                  (uuid "007cbe9f-5d70-4ded-bd10-898993e4de74")))))

   (file-systems
    (cons*
     (file-system (device "/dev/nvme0n1p1")
                  (mount-point "/boot/efi")
                  (type "vfat"))
     (file-system (device "/dev/nvme0n1p2")
                  (mount-point "/")
                  (type "ext4"))
     (file-system (device "/dev/nvme0n1p4")
                  (mount-point "/home")
                  (type "ext4"))
     %base-file-systems)))

#+end_src

* Guix Profile Management

Guix profiles get installed under the ~~/.guix-extra-profiles~ path and sourced by ~~/.profile~ when logging in.

A couple of shell scripts for managing the profiles:

** List Active Profiles

This script simply lists the active profiles:

#+begin_src sh

  list-profiles

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/list-profiles :shebang #!/usr/bin/env sh

  guix package --list-profiles

  exit 0

#+end_src

** List Profile Generations

This script lists the generations of a given profile:

#+begin_src sh

  list-generations emacs

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/list-generations :shebang #!/usr/bin/env sh

  profile=$1
  guix package --profile=$GUIX_EXTRA_PROFILES/$profile/$profile --list-generations

  exit 0

#+end_src

** Delete Profile Generations

This script deletes the generations of all profiles and calls the garbage collector, or when a profile is supplied, removes the generatiosn for that given profile

#+begin_src sh

  delete-generations emacs

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/delete-generations :shebang #!/usr/bin/env sh

  GREEN='\033[1;32m'
  RED='\033[1;30m'
  NC='\033[0m'

  profiles=$*
  if [[ $# -eq 0 ]]; then
      profiles="$XDG_CONFIG_HOME/guix/manifests/*.scm";
      guix pull --delete-generations
      # sudo guix system delete-generations 20d
  fi

  for profile in $profiles; do
      # Remove the path and file extension, if any
      profileName=$(basename $profile)
      profileName="${profileName%.*}"

      profilePath="$GUIX_EXTRA_PROFILES/$profileName"
      manifestPath=$XDG_CONFIG_HOME/guix/manifests/$profileName.scm

    if [ -f $manifestPath ]; then
      echo
      echo -e "${GREEN}Deleting profile generations:" $profileName "${NC}"
      echo

      guix package --profile="$profilePath/$profileName" --delete-generations
    else
      echo "${RED}No profile found at path" $profilePath "${NC}"
      exit 1
    fi
  done

  guix gc -F 80G

  exit 0

#+end_src

** Activating Profiles

This script accepts a space-separated list of manifest file names (without extension) under the ~~/.config/guix/manifests~ folder and then installs those profiles for the first time:

#+begin_src sh

  activate-profiles desktop emacs

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/activate-profiles :shebang #!/usr/bin/env sh

  GREEN='\033[1;32m'
  RED='\033[1;30m'
  NC='\033[0m'

  profiles=$*
  if [[ $# -eq 0 ]]; then
      profiles="$XDG_CONFIG_HOME/guix/manifests/*.scm";
  fi

  for profile in $profiles; do
      # Remove the path and file extension, if any
      profileName=$(basename $profile)
      profileName="${profileName%.*}"

      profilePath="$GUIX_EXTRA_PROFILES/$profileName"

      manifestPath=$XDG_CONFIG_HOME/guix/manifests/$profileName.scm

      if [ -f $manifestPath ]; then
          echo
          echo -e "${GREEN}Activating profile:" $manifestPath "${NC}"
          echo

          mkdir -p $profilePath
          guix package --manifest=$manifestPath --profile="$profilePath/$profileName"

          # Source the new profile
          GUIX_PROFILE="$profilePath/$profileName"
          if [ -f $GUIX_PROFILE/etc/profile ]; then
              . "$GUIX_PROFILE"/etc/profile
          else
              echo -e "${RED}Couldn't find profile:" $GUIX_PROFILE/etc/profile "${NC}"
              exit 1
          fi
      else
          echo "No profile found at path" $profilePath
          exit 1
      fi
  done

  exit 0

#+end_src

** Updating Profiles

This script accepts a space-separated list of manifest file names (without extension) under the ~~/.config/guix/manifests~ folder and then installs any updates to the packages contained within them.
If no profile names are provided, it walks the list of profile directories under ~~/.guix-extra-profiles~ and updates each one of them:

#+begin_src sh

  update-profiles emacs

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/update-profiles :shebang #!/usr/bin/env sh

  GREEN='\033[1;32m'
  NC='\033[0m'

  profiles=$*
  if [[ $# -eq 0 ]]; then
      profiles="$GUIX_EXTRA_PROFILES/*";
  fi

  for profile in $profiles; do
    profileName=$(basename $profile)
    profilePath=$GUIX_EXTRA_PROFILES/$profileName

    echo
    echo -e "${GREEN}Updating profile:" $profilePath "${NC}"
    echo

    guix package --profile="$profilePath/$profileName" --manifest="$XDG_CONFIG_HOME/guix/manifests/$profileName.scm" --fallback
  done

  exit 0

#+end_src

** Updating Channels

This script makes it easy to update all channels to the latest commit based on an original channel file (see the Channels section at the top of this document):

#+begin_src sh

  update-channels

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/update-channels :shebang #!/usr/bin/env sh

  guix pull --channels=$XDG_CONFIG_HOME/guix/base-channels.scm
  guix describe --format=channels > $XDG_CONFIG_HOME/guix/channels.scm

  exit 0

#+end_src

** Updating System

This script makes it easy to update the system to the latest configuration based on the ~$HOSTNAME~ environment variable mapping to the appropriate file.

#+begin_src sh

  update-system

#+end_src

#+begin_src sh :tangle ~/.dotfiles/bin/update-system :shebang #!/usr/bin/env sh

  GREEN='\033[1;32m'
  BLUE='\033[1;34m'
  NC='\033[0m'

  echo -e "\n${GREEN}Updating ${BLUE}$HOSTNAME${GREEN}...${NC}\n"

  sudo guix system -L $XDG_CONFIG_HOME/guix --fallback reconfigure $XDG_CONFIG_HOME/guix/systems/$HOSTNAME.scm

  exit 0

#+end_src

