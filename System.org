#+title: System Configuration with Guix
#+author: Philippe Gabriel
#+property: header-args    :tangle-mode (identity #o444)
#+property: header-args:sh :tangle-mode (identity #o555)

* Channels

#+begin_src scheme :tangle ~/.dotfiles/.files/.config/guix/base-channels.scm

  (use-modules (guix channels))

  (list (channel
         (name 'nonguix)
         (url "https://gitlab.com/nonguix/nonguix")
         (introduction
          (make-channel-introduction
           "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
           (openpgp-fingerprint
            "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
        (channel
         (name 'guix)
         (url "https://git.savannah.gnu.org/git/guix.git")
         (introduction
          (make-channel-introduction
           "9edb3f66fd807b096b48283debdcddccfea34bad"
           (openpgp-fingerprint
            "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))

#+end_src

* Systems

** Base Configuration

This base configuration is shared between all of the machines I manage with Guix.

#+begin_src scheme :tangle ~/.dotfiles/pg/systems/base.scm

  (define-module (pg systems base)
    #:use-module (gnu)
    #:use-module (gnu packages)
    #:use-module (gnu services)
    #:use-module (guix gexp)
    #:use-module (nongnu packages linux)
    #:use-module (nongnu system linux-initrd)
    #:use-module (srfi srfi-1)
    #:export (system-config))

  (use-package-modules admin
                       audio
                       bash
                       compression
                       cups
                       curl
                       emacs
                       file-systems
                       freedesktop
                       fonts
                       gnome
                       gnupg
                       libusb
                       linux
                       package-management
                       ssh
                       version-control
                       vim
                       wm)
  (use-service-modules avahi
                       base
                       cups
                       dbus
                       desktop
                       docker
                       guix
                       linux
                       networking
                       nix
                       pm
                       ssh
                       virtualization
                       xorg)
  (use-system-modules accounts
                      pam
                      nss)

#+end_src

Add ~udev~ rules for Arduino setup.

#+begin_src scheme :tangle ~/.dotfiles/pg/systems/base.scm

  (define %acm-udev-rule
    (udev-rule
     "90-extraacl.rules"
     (string-append "KERNEL==\"ttyUSB[0-9]*\", "
                    "TAG+=\"udev-acl\", "
                    "TAG+=\"uaccess\", "
                    "OWNER=\"phil-gab99\""
                    "\n"
                    "KERNEL==\"ttyACM[0-9]*\", "
                    "TAG+=\"udev-acl\", "
                    "TAG+=\"uaccess\", "
                    "OWNER=\"phil-gab99\"")))

  (define %open-ocd-udev-rule
    (udev-rule
     "98-openocd.rules"
     (string-append "ACTION!=\"add|change\", "
                    "GOTO=\"openocd_rules_end\""
                    "\n"
                    "SUBSYSTEM!=\"usb|tty|hidraw\", "
                    "GOTO=\"openocd_rules_end\""
                    "\n"
                    "#Please keep this list sorted by VID:PID"
                    "\n"
                    "#CMSIS-DAP compatible adapters"
                    "ATTRS{product}==\"*CMSIS-DAP*\", "
                    "MODE=\"664\", "
                    "GROUP=\"plugdev\""
                    "\n"
                    "LABEL=\"openocd_rules_end\"")))

  ;; Define rest of rules

#+end_src

Define the ~base-operating-system~ which will be inherited by all machine configurations.

#+begin_src scheme :tangle ~/.dotfiles/pg/systems/base.scm

  (define* (system-config #:key system home)
    (operating-system
     (inherit system)

     ;; Use non-free Linux and firmware
     (kernel linux)
     (initrd microcode-initrd)
     (firmware (cons iwlwifi-firmware
                     %base-firmware))

     (kernel-loadable-modules (list v4l2loopback-linux-module))

     ;; Generic information that may be overriden
     (locale "en_CA.utf8")
     (timezone "America/Toronto")
     (host-name (operating-system-host-name system))

     ;; Default user
     (users (or (operating-system-users system)
                (cons
                 (user-account (name "phil-gab99")
                               (comment "Philippe Gabriel")
                               (group "users")
                               (home-directory "/home/phil-gab99")
                               (supplementary-groups '("wheel"     ;; sudo
                                                       "netdev"    ;; network devices
                                                       "kvm"
                                                       "tty"
                                                       "dialout"
                                                       "uucp"
                                                       "plugdev"
                                                       "input"
                                                       "libvirt"
                                                       "docker"
                                                       "realtime"
                                                       "lp"        ;; control bluetooth devices
                                                       "audio"     ;; control audio devices
                                                       "video")))  ;; control video devices
                 %base-user-accounts)))

     ;; Add extra groups
     (groups
      (append (operating-system-groups system)
              (cons* (user-group (system? #t) (name "uucp"))
                     (user-group (system? #t) (name "plugdev"))
                     (user-group (system? #t) (name "realtime"))
                     %base-groups)))

     ;; System packages
     (packages (cons* bluez
                      bluez-alsa
                      brightnessctl
                      curl
                      emacs-no-x-toolkit
                      exfat-utils
                      flatpak
                      fuse-exfat
                      git
                      gvfs
                      htop
                      lm-sensors
                      net-tools
                      nix
                      openssh
                      udiskie
                      unzip
                      vim
                      zip
                      %base-packages))

     ;; System services
     (services (append
                (modify-services %base-services
                                 (delete login-service-type)
                                 (delete mingetty-service-type)
                                 (delete console-font-service-type))
                (operating-system-user-services system)
                (list
                 (service guix-home-service-type
                          (list
                           (list
                            (user-account-name (car (operating-system-users system)))
                            home)))

                 (service elogind-service-type)

                 (service console-font-service-type
                          (map (lambda (tty)
                                 (cons tty
                                       (file-append
                                        font-terminus
                                        "/share/consolefonts/ter-132n")))
                               '("tty1" "tty2" "tty3")))

                 (service greetd-service-type
                          (greetd-configuration
                           (greeter-supplementary-groups (list "video" "input"))
                           (terminals
                            (list (greetd-terminal-configuration
                                   (terminal-vt "1")
                                   (terminal-switch #t)
                                   (source-profile? #f)
                                   (default-session-command
                                     (greetd-wlgreet-sway-session
                                      (wlgreet-session
                                       (greetd-wlgreet-session
                                        (command (file-append bash "/bin/bash"))
                                        (command-args '("-l"))
                                        (background '(0.25 0.25 0.25 0.9))
                                        (headline '(0 0.5 0.5 0.8))
                                        (prompt '(0.22 1 0.08 1))
                                        (prompt-error '(1 0 0 1))
                                        (border '(1 0.84 0 0.5)))))))
                                  (greetd-terminal-configuration
                                   (terminal-vt "2")
                                   (source-profile? #f))
                                  (greetd-terminal-configuration
                                   (terminal-vt "3")
                                   (source-profile? #f))))))

                 (service screen-locker-service-type
                          (screen-locker-configuration
                           (name "swaylock")
                           (program (file-append swaylock "/bin/swaylock"))
                           (using-pam? #t)
                           (using-setuid? #f)))

                 (simple-service 'add-nonguix-substitutes
                                 guix-service-type
                                 (guix-extension
                                  (substitute-urls
                                   (cons "https://substitutes.nonguix.org"
                                         %default-substitute-urls))
                                  (authorized-keys
                                   (cons (plain-file
                                          "nonguix.pub"
                                          "(public-key (ecc (curve Ed25519) (q #C1FD53E5D4CE971933EC50C9F307AE2171A2D3B52C804642A7A35F84F3A4EA98#)))")
                                         %default-authorized-guix-keys))))

                 polkit-wheel-service

                 (service network-manager-service-type
                          (network-manager-configuration
                           (vpn-plugins (list network-manager-openvpn
                                              network-manager-openconnect))))
                 (service wpa-supplicant-service-type)
                 (service modem-manager-service-type)
                 (service bluetooth-service-type
                          (bluetooth-configuration
                           (auto-enable? #t)))
                 (service usb-modeswitch-service-type)

                 (service avahi-service-type)
                 (service udisks-service-type)
                 (service upower-service-type)
                 (service cups-pk-helper-service-type)
                 (service geoclue-service-type)
                 (service polkit-service-type)
                 (service dbus-root-service-type)
                 fontconfig-file-system-service

                 (service thermald-service-type)
                 (service tlp-service-type
                          (tlp-configuration
                           (cpu-boost-on-ac? #t)
                           (wifi-pwr-on-bat? #t)))

                 (service pam-limits-service-type
                          (list
                           (pam-limits-entry "@realtime" 'both 'rtprio 99)
                           (pam-limits-entry "@realtime" 'both 'memlock 'unlimited)
                           (pam-limits-entry "@realtime" 'both 'nice -19)))

                 (service kernel-module-loader-service-type '("v4l2loopback"))
                 (simple-service 'v4l2loopback-config etc-service-type
                                 (list `("modprobe.d/v4l2loopback.conf"
                                         ,(plain-file "v4l2loopback.conf"
                                                      "options v4l2loopback devices=1 video_nr=2 exclusive_caps=1 card_label=\"OBS Virtual Camera\""))))

                 (service docker-service-type)
                 (service libvirt-service-type
                          (libvirt-configuration
                           (unix-sock-group "libvirt")
                           (tls-port "16555")))
                 (service virtlog-service-type
                          (virtlog-configuration
                           (max-clients 1000)))

                 (service openssh-service-type
                          (openssh-configuration
                           (openssh openssh-sans-x)))

                 (service sane-service-type)
                 (service cups-service-type
                          (cups-configuration
                           (web-interface? #t)
                           (extensions (list cups-filters))))

                 (service x11-socket-directory-service-type)
                 
                 (service ntp-service-type)

                 (service nix-service-type)

                 (simple-service 'mtp udev-service-type (list libmtp)) 

                 (extra-special-file "/bin/env"
                                     (file-append coreutils "/bin/env"))
                 (extra-special-file "/lib64/ld-linux-x86-64.so.2"
                                     (file-append glibc "/lib/ld-linux-x86-64.so.2")))))
     (name-service-switch %mdns-host-lookup-nss)))

#+end_src

** Machines

*** s76-laptop

#+begin_src scheme :tangle ~/.dotfiles/pg/systems/s76-laptop.scm

  (define-module (pg systems s76-laptop)
    #:use-module (pg systems base)
    #:use-module (pg home services bash)
    #:use-module (pg home services emacs)
    #:use-module (pg home services gammastep)
    #:use-module (pg home services media)
    #:use-module (pg home services nm-applet)
    #:use-module (pg home services udiskie)
    #:use-module (pg home services wayland)
    #:use-module (gnu)
    #:use-module (gnu home)
    #:use-module (gnu home services desktop)
    #:use-module (gnu home services dotfiles)
    #:use-module (gnu home services gnupg)
    #:use-module (gnu home services mcron)
    #:use-module (gnu home services syncthing))

  (use-package-modules file-systems
        	             fonts
        	             gnupg
        	             gnome
        	             gnome-xyz
        	             music
        	             terminals
        	             video
        	             wm
        	             xdisorg)
  (use-service-modules base)

  (define %charge-thresholds-udev-rule
    (udev-rule
     "90-charge-thresholds.rules"
     (string-append "KERNEL==\"BAT0\", "
        	          "SUBSYSTEM==\"power_supply\", "
        	          "RUN+=\"/run/current-system/profile/bin/chgrp charge /sys/class/power_supply/%k/charge_control_start_threshold /sys/class/power_supply/%k/charge_control_end_threshold\""
        	          "\n"
        	          "KERNEL==\"BAT0\", "
        	          "SUBSYSTEM==\"power_supply\", "
        	          "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/power_supply/%k/charge_control_start_threshold /sys/class/power_supply/%k/charge_control_end_threshold\"")))

  (system-config
   #:home
   (home-environment
    (services (list (service home-bash-service-type
        		           (home-bash-configuration
        		            (bash-profile
        		             (list
                                (local-file
                                 "/home/phil-gab99/.dotfiles/.templates/bash_profile")))
        		            (bashrc
        		             (list
        			      (local-file
                                 "/home/phil-gab99/.dotfiles/.templates/bashrc")))))
        	          (service home-dbus-service-type)
        	          (service home-dotfiles-service-type
        		           (home-dotfiles-configuration
        		            (source-directory "/home/phil-gab99/.dotfiles")
        		            (directories '(".files"))
                              (excluded '(".*~" ".*\\.swp" "\\.git" "\\.gitignore" "\\.config/guix"))))
        	          (service home-emacs-service-type)
        	          (service home-gammastep-service-type)
        	          (service home-gpg-agent-service-type
        		           (home-gpg-agent-configuration
        		            (pinentry-program
        		             (file-append pinentry-emacs "/bin/pinentry-emacs"))
        		            (ssh-support? #t)
        		            (default-cache-ttl 28800)
        		            (max-cache-ttl 28800)
        		            (default-cache-ttl-ssh 28800)
        		            (max-cache-ttl-ssh 28800)))
        	          (service home-mcron-service-type
        		           (home-mcron-configuration
        		            (jobs (list #~(job
        				           '(next-hour (range 0 24 4))
        				           "~/bin/sync-passwords")))))
        	          (service home-media-service-type)
        	          (service home-nm-applet-service-type)
        	          (service home-syncthing-service-type)
        	          (service home-udiskie-service-type)
        	          (service home-wayland-service-type))))

   #:system
   (operating-system
     (host-name "s76-laptop")
     (keyboard-layout (keyboard-layout "us")) 

     (swap-devices
      (list
       (swap-space (target
        	          (uuid "007cbe9f-5d70-4ded-bd10-898993e4de74")))))

     ;; Partition mounted on /boot/efi.
     (bootloader (bootloader-configuration
        	        (bootloader grub-efi-removable-bootloader)
        	        (targets (list "/boot/efi"))
        	        (keyboard-layout keyboard-layout)))

     (file-systems
      (cons*
       (file-system (device "/dev/nvme0n1p1")
        	          (mount-point "/boot/efi")
        	          (type "vfat"))
       (file-system (device "/dev/nvme0n1p2")
        	          (mount-point "/")
        	          (type "ext4"))
       (file-system (device "/dev/nvme0n1p4")
        	          (mount-point "/home")
        	          (type "ext4"))
       %base-file-systems))

     (users
      (cons (user-account (name "phil-gab99")
        		        (comment "Philippe Gabriel")
        		        (group "users")
        		        (home-directory "/home/phil-gab99")
        		        (supplementary-groups '("wheel"     ;; sudo
        					        "netdev"    ;; network devices
        					        "kvm"
        					        "tty"
        					        "dialout"
        					        "uucp"
        					        "plugdev"
        					        "input"
        					        "charge"
        					        "libvirt"
        					        "docker"
        					        "realtime"
        					        "lp"        ;; control bluetooth devices
        					        "audio"     ;; control audio devices
        					        "video")))  ;; control video devices
            %base-user-accounts))

     (groups (list (user-group (system? #t) (name "charge"))))

     (services (list (udev-rules-service 'charge-thresholds
        				       %charge-thresholds-udev-rule)))))

#+end_src

* Guix Profile Management

Guix profiles get installed under the ~~/.guix-extra-profiles~ path and sourced by ~~/.profile~ when logging in.

A couple of shell scripts for managing the profiles:

** Invoke garbage collector

#+begin_src sh :tangle ~/.dotfiles/.files/bin/clean-store :shebang #!/bin/env bash

  guix pull --delete-generations
  guix gc -F 80

#+end_src

** Updating Channels

This script makes it easy to update all channels to the latest commit based on an original channel file (see the Channels section at the top of this document):

#+begin_src sh

  update-channels

#+end_src

#+begin_src sh :tangle ~/.dotfiles/.files/bin/update-channels :shebang #!/bin/env bash

  guix pull --channels=$XDG_CONFIG_HOME/guix/base-channels.scm --allow-downgrades
  guix describe --format=channels > $XDG_CONFIG_HOME/guix/channels.scm

  exit 0

#+end_src

** Updating System

This script makes it easy to update the system to the latest configuration based on the ~$HOSTNAME~ environment variable mapping to the appropriate file.

#+begin_src sh

  update-system

#+end_src

#+begin_src sh :tangle ~/.dotfiles/.files/bin/update-system :shebang #!/bin/env bash

  GREEN='\033[1;32m'
  BLUE='\033[1;34m'
  NC='\033[0m'

  echo -e "\n${GREEN}Updating ${BLUE}$HOSTNAME${GREEN}...${NC}\n"

  sudo guix system -L $HOME/.dotfiles --fallback reconfigure $HOME/.dotfiles/pg/systems/$HOSTNAME.scm

  exit 0

#+end_src

