#+author: Philippe Gabriel
#+title: Emacs configuration
#+property: header-args :tangle-mode (identity #o444)

Below is a sectioned configuration of emacs. Each code blocks gets written out to its own module file before being required by the ~~/.emacs.d/init.el~ config file.

* Startup

** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-startup.el

  ;;; pg-startup.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

** Server Initialization

Starting a server for displaying polybar info

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-startup.el

  (unless pg/is-windows
    (server-start))

#+end_src

** Package Initialization

Some initializations are first set up.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-startup.el

  (unless (featurep 'straight)
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))

#+end_src

** Startup package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-startup.el

  (provide 'pg-startup)

#+end_src

* Native Compilation

** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-native-compilation.el

  ;;; pg-native-compilation.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

** Native compilation settings

Some settings specific to the ~emacs-native-comp~ version of emacs

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-native-compilation.el

  (when (featurep 'native-compile)
    (customize-set-variable 'native-comp-async-report-warnings-errors nil)                         ;; Silence compiler warnings
    (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))) ;; Set directory for cache storage

#+end_src

** Native compilation package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-native-compilation.el

  (provide 'pg-native-compilation)

#+end_src

* Packages

** Guix Management

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-guix.el

  ;;; pg-guix.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | guix

Emacs interface for guix package manager.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-guix.el

  (unless (not pg/is-guix-system)
    (unless (fboundp 'guix)
      (autoload #'guix "guix" nil t))
    (with-eval-after-load 'general
      (pg/leader-keys
        "G" '(:ignore t :which-key "guix")
        "Gg" '(guix :which-key "guix")
        "Gs" '((lambda () (interactive) (dired "/run/current-system/profile/share/guile/site/3.0/")) :which-key "source"))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (first (lookup-inferior-packages inferior "emacs-guix"))

#+end_src

*** Package | geiser

Scheme REPL

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-guix.el

  (unless (not pg/is-guix-system)
    (unless (fboundp 'geiser-guile)
      (autoload #'geiser-guile "geiser" nil t))
    (unless (fboundp 'geiser-repl-clear-buffer)
      (autoload #'geiser-repl-clear-buffer "geiser" nil t))
    (if (boundp 'geiser-repl-mode-map)
        (define-key geiser-repl-mode-map (kbd "C-l") #'geiser-repl-clear-buffer)
      (with-eval-after-load 'geiser
        (define-key geiser-repl-mode-map (kbd "C-l") #'geiser-repl-clear-buffer)))
    (unless (fboundp 'corfu-mode)
      (autoload #'corfu-mode "corfu" nil t))
    (add-hook 'geiser-repl-mode-hook #'corfu-mode)
    (with-eval-after-load 'geiser
      (pg/customize-set-variables
       `((geiser-guile-load-init-file-p . t)
         (geiser-repl-company-p . nil)
         (geiser-guile-manual-lookup-other-window-p . t)
         (geiser-guile-load-path . ("/run/current-system/profile/share/guile/3.0"))
         (geiser-repl-history-filename . ,(concat (getenv "XDG_CACHE_HOME") "/.geiser_history"))))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (first (lookup-inferior-packages inferior "emacs-geiser"))

#+end_src

*** System management package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-guix.el

  (provide 'pg-guix)

#+end_src

** Password Utilities

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  ;;; pg-passwords.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | auth-source

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  (require 'auth-source)
  (with-eval-after-load 'auth-source
    (customize-set-variable 'auth-sources '("~/.authinfo.gpg")))

#+end_src

*** Package | epg-config

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  (unless (or pg/is-termux
              pg/is-windows)
    (require 'epg-config)
    (with-eval-after-load 'epg-config
      (customize-set-variable 'epg-pinentry-mode 'loopback)))

#+end_src

*** Package | pinentry

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  (unless (or pg/is-termux
              pg/is-windows)
    (straight-use-package 'pinentry)
    (require 'pinentry)
    (with-eval-after-load 'pinentry
      (pinentry-start)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-pinentry")
  (specification->package "pinentry-emacs")

#+end_src

*** Package | password-cache

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  (require 'password-cache)
  (with-eval-after-load 'password-cache
    (customize-set-variable 'password-cache-expiry (* 60 60 2)))

#+end_src

*** Package | password-store

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  (unless pg/is-windows
    (straight-use-package 'password-store)
    (require 'password-store)
    (with-eval-after-load 'password-store
      (customize-set-variable 'password-store-time-before-clipboard-restore 60)
      (with-eval-after-load 'general
        (pg/leader-keys
          "a" '(:ignore t :which-key "pass")
          "ac" '(password-store-copy :which-key "copy")
          "af" '(password-store-copy-field :which-key "copy field")))))

#+end_src

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-password-store")

#+end_src

*** Password lookup

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  (defun pg/lookup-password (&rest keys)
    "Looks up passwords from `authinfo' entries."
    (let ((result (apply #'auth-source-search keys)))
      (if result
          (funcall (plist-get (car result) :secret))
        nil)))

#+end_src

*** Password utilities package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  (provide 'pg-passwords)

#+end_src

** Keybind Log

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-keylog.el

  ;;; pg-keylog.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | keycast

Useful when starting out with the various keybindings and when presenting to an audience.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-keylog.el

  (define-minor-mode pg/keycast-mode
    "Show current command and its key binding in the mode line (fix for use with
    doom-mode-line)."
    :global t
    (interactive)
    (if pg/keycast-mode
        (add-hook 'pre-command-hook #'keycast--update t)
      (remove-hook 'pre-command-hook #'keycast--update)))

  (straight-use-package 'keycast)
  (require 'keycast)
  (with-eval-after-load 'keycast
    (customize-set-variable 'keycast-mode-line-format "%2s%k%c%2s")
    (fset #'keycast-mode #'pg/keycast-mode)
    (keycast-mode)
    (add-to-list 'global-mode-string '("" keycast-mode-line)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-keycast")

#+end_src

*** Keybind log package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-keylog.el

  (provide 'pg-keylog)

#+end_src

** Command Completion Framework

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  ;;; pg-completion.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | savehist

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (require 'savehist)
  (with-eval-after-load 'savehist
    (savehist-mode))

#+end_src

*** Package | marginalia

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'marginalia)
  (with-eval-after-load 'vertico
    (require 'marginalia))
  (with-eval-after-load 'marginalia
    (customize-set-variable 'marginalia-annotators '(marginalia-annotators-heavy
                                                     marginalia-annotators-light
                                                     nil))
    (marginalia-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-marginalia")

#+end_src

*** Package | consult

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'consult)
  (unless (fboundp 'consult-line)
    (autoload #'consult-line "consult" nil t))
  (global-set-key (kbd "C-s") #'consult-line)
  (unless (fboundp 'consult-buffer)
    (autoload #'consult-buffer "consult" nil t))
  (global-set-key (kbd "C-x b") #'consult-buffer)
  (with-eval-after-load 'consult
    ;; (customize-set-variable 'consult-preview-key 'any)
    (define-key minibuffer-local-map (kbd "C-r") #'consult-history))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-consult")

#+end_src

*** Package | orderless

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'orderless)
  (with-eval-after-load 'vertico
    (require 'orderless))
  (with-eval-after-load 'orderless
    (pg/customize-set-variables
     '((completion-styles . (orderless))
       (completion-category-defaults . nil)
       (orderless-skip-highlighting . nil)
       (completion-category-overrides . ((file (styles basic partial-completion)))))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-orderless")

#+end_src

*** Package | corfu

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'corfu)
  (unless (fboundp 'corfu-next)
    (autoload #'corfu-next "corfu" nil t))
  (unless (fboundp 'corfu-previous)
    (autoload #'corfu-previous "corfu" nil t))
  (if (boundp 'corfu-map)
      (progn
        (define-key corfu-map (kbd "C-j") #'corfu-next)
        (define-key corfu-map (kbd "C-k") #'corfu-previous))
    (with-eval-after-load 'corfu
      (define-key corfu-map (kbd "C-j") #'corfu-next)
      (define-key corfu-map (kbd "C-k") #'corfu-previous)))
  (unless (fboundp 'corfu-mode)
    (autoload #'corfu-mode "corfu" nil t))
  (with-eval-after-load 'corfu
    (customize-set-variable 'corfu-cycle t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-corfu")

#+end_src

*** Package | vertico

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'vertico)
  (require 'vertico)
  (unless (fboundp 'vertico-next)
    (autoload #'vertico-next "vertico" nil t))
  (unless (fboundp 'vertico-previous)
    (autoload #'vertico-previous "vertico" nil t))
  (if (boundp 'vertico-map)
      (progn
        (define-key vertico-map (kbd "C-j") #'vertico-next)
        (define-key vertico-map (kbd "C-k") #'vertico-previous))
    (with-eval-after-load 'vertico
      (define-key vertico-map (kbd "C-j") #'vertico-next)
      (define-key vertico-map (kbd "C-k") #'vertico-previous)))
  (with-eval-after-load 'vertico
    (customize-set-variable 'vertico-cycle t)
    (vertico-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-vertico")

#+end_src

*** Package | embark

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'embark)
  (with-eval-after-load 'vertico
    (unless (fboundp 'embark-act)
      (autoload #'embark-act "embark" nil t))
    (global-set-key (kbd "C-S-a") #'embark-act)
    (define-key minibuffer-local-map (kbd "C-d") #'embark-act))
  (with-eval-after-load 'embark
    (customize-set-variable 'embark-confirm-act-all nil)
    (setq embark-action-indicator
          (lambda
            (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-embark")

#+end_src

*** Package | embark-consult

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package '(embark-consult :host github
                                         :repo "oantolin/embark"
                                         :files ("embark-consult.el")))
  (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode)
  (with-eval-after-load 'embark
    (with-eval-after-load 'consult
      (require 'embark-consult)))

#+end_src

*** Package | prescient

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'prescient)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-prescient")

#+end_src

*** Package | which-key

Displays additional keybindings subsequent to prefix keybindings

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'which-key)
  (require 'which-key)
  (with-eval-after-load 'which-key
    (customize-set-variable 'which-key-idle-delay 1)
    (which-key-mode)
    (if (fboundp 'diminish)
        (diminish #'which-key-mode)
      (with-eval-after-load 'diminish
        (diminish #'which-key-mode))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-which-key")

#+end_src

*** Package | helm

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'helm)
  (unless (fboundp 'helm-next-line)
    (autoload #'helm-next-line "helm" nil t))
  (unless (fboundp 'helm-previous-line)
    (autoload #'helm-previous-line "helm" nil t))
  (if (boundp 'helm-map)
      (progn
        (define-key helm-map (kbd "C-j") #'helm-next-line)
        (define-key helm-map (kbd "C-k") #'helm-previous-line))
    (with-eval-after-load 'helm
      (define-key helm-map (kbd "C-j") #'helm-next-line)
      (define-key helm-map (kbd "C-k") #'helm-previous-line)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-helm")

#+end_src

*** Command completion framework package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (provide 'pg-completion)

#+end_src

** UI Enhancement

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  ;;; pg-ui.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Theme Definition

Theme inspired by the popular Atom One Dark theme.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/themes/pg-onedark-variant-theme.el

  ;;; pg-onedark-variant-theme.el --- One Dark Variant color theme
  ;; Author: Philippe Gabriel

  (deftheme pg-onedark-variant
    "One Dark Variant - My pg-onedark-variant custom theme.")

  (defvar pg-onedark-variant-colors-alist
    '(("pg-onedark-variant-whitestd"    . "#cccccc")
      ("pg-onedark-variant-white"       . "#ffffff")
      ("pg-onedark-variant-gold"        . "#eead0e")
      ("pg-onedark-variant-black"       . "#282c34")
      ("pg-onedark-variant-dark"        . "#000000")
      ("pg-onedark-variant-doc-box"     . "#1a1a1a")
      ("pg-onedark-variant-cursorbg"    . "#4682d9")
      ("pg-onedark-variant-regionbg"    . "#494949")
      ("pg-onedark-variant-regionds"    . "#828997")
      ("pg-onedark-variant-blue"        . "#00bfff")
      ("pg-onedark-variant-green"       . "#2cff64")
      ("pg-onedark-variant-keywords"    . "#c678dd")
      ("pg-onedark-variant-strings"     . "#98c379")
      ("pg-onedark-variant-docs"        . "#98f979")
      ("pg-onedark-variant-modebox"     . "#181a1f")
      ("pg-onedark-variant-comments"    . "#737373")
      ("pg-onedark-variant-codeblockbg" . "#0d0d0d")
      ("pg-onedark-variant-code"        . "#ffa500")
      ("pg-onedark-variant-verbatim"    . "#00ff00")
      ("pg-onedark-variant-table"       . "#cdb5cd")
      ("pg-onedark-variant-types"       . "#ecbe7b")
      ("pg-onedark-variant-vars"        . "#ff6347")
      ("pg-onedark-variant-link"        . "#61afef")
      ("pg-onedark-variant-constants"   . "#eead0e")
      ("pg-onedark-variant-tags"        . "#00eeee")
      ("pg-onedark-variant-builtin"     . "#00cdcd")
      ("pg-onedark-variant-preproc"     . "#7b447b")
      ("pg-onedark-variant-shexec"      . "#afeeee")
      ("pg-onedark-variant-modelnfg"    . "#9da5b4")
      ("pg-onedark-variant-modelnbg"    . "#21252b")
      ("pg-onedark-variant-modelndiff"  . "#ff4c35")
      ("pg-onedark-variant-modelninfg"  . "#5b6268")
      ("pg-onedark-variant-modelninbg"  . "#21242b")
      ("pg-onedark-variant-lnnumfg"     . "#8f8f8f")
      ("pg-onedark-variant-lnnumbg"     . "#202231")
      ("pg-onedark-variant-lnsltfg"     . "#fefefe")
      ("pg-onedark-variant-mu4eheader"  . "#ff83fa")
      ("pg-onedark-variant-parenmatch"  . "#c678dd")
      ("pg-onedark-variant-error"       . "#ff6666")
      ("pg-onedark-variant-warn"        . "#f2db05")
      ("pg-onedark-variant-minibuf"     . "#f0fff0")
      ("pg-onedark-variant-eviln"       . "#818ff4"))
    "List of One Dark Variant colors.")

  (defmacro pg-onedark-variant-with-color-variables (&rest body)
    "Bind the colors list around BODY."
    (declare (indent 0))
    `(let ((class '((class color) (min-colors 89)))
           ,@ (mapcar (lambda (cons)
                        (list (intern (car cons)) (cdr cons)))
                      pg-onedark-variant-colors-alist))
       ,@body))

  (pg-onedark-variant-with-color-variables
    (custom-theme-set-faces
     'pg-onedark-variant

     ;; General
     `(cursor                   ((t ( :background ,pg-onedark-variant-cursorbg))))
     `(default                  ((t ( :foreground ,pg-onedark-variant-whitestd
                                      :background ,pg-onedark-variant-black))))
     `(italic                   ((t ( :slant italic))))
     `(link                     ((t ( :foreground ,pg-onedark-variant-link
                                      :weight bold
                                      :underline t))))
     `(region                   ((t ( :background ,pg-onedark-variant-regionbg
                                      :distant-foreground ,pg-onedark-variant-regionds))))
     `(highlight                ((t ( :background ,pg-onedark-variant-regionbg
                                      :distant-foreground ,pg-onedark-variant-regionds))))
     `(show-paren-match         ((t ( :foreground ,pg-onedark-variant-parenmatch
                                      :weight bold))))
     `(sh-quoted-exec           ((t ( :foreground ,pg-onedark-variant-shexec))))
     `(line-number              ((t ( :foreground ,pg-onedark-variant-lnnumfg
                                      :background ,pg-onedark-variant-lnnumbg))))
     `(line-number-current-line ((t ( :foreground ,pg-onedark-variant-lnsltfg
                                      :background ,pg-onedark-variant-lnnumbg))))
     `(minibuffer-prompt        ((t ( :foreground ,pg-onedark-variant-minibuf))))
     `(shadow                   ((t ( :foreground ,pg-onedark-variant-white))))
     `(error                    ((t ( :foreground ,pg-onedark-variant-error))))
     `(warning                  ((t ( :foreground ,pg-onedark-variant-warn))))
     `(message-header-name      ((t ( :bold t))))

     ;; Persp
     `(persp-selected-face ((t ( :foreground ,pg-onedark-variant-warn))))

     ;; Man
     `(Man-overstrike ((t ( :foreground ,pg-onedark-variant-types
                            :weight bold))))
     `(Man-underline  ((t ( :foreground ,pg-onedark-variant-keywords
                            :underline t))))

     ;; Info
     `(Info-quoted    ((t ( :foreground ,pg-onedark-variant-code
                            :inherit (fixed-pitch)))))

     ;; Org
     `(org-hide                  ((t ( :foreground ,pg-onedark-variant-black))))
     `(org-level-4               ((t ( :foreground ,pg-onedark-variant-green))))
     `(org-date                  ((t ( :foreground ,pg-onedark-variant-blue))))
     `(org-document-info-keyword ((t ( :inherit (font-lock-comment-face
                                                 fixed-pitch)))))
     `(org-document-title        ((t ( :foreground ,pg-onedark-variant-whitestd
                                       :weight bold))))
     `(org-document-info         ((t ( :foreground ,pg-onedark-variant-whitestd))))
     `(org-ellipsis              ((t ( :underline nil))))
     `(org-block                 ((t ( :foreground nil
                                       :background ,pg-onedark-variant-codeblockbg
                                       :inherit (fixed-pitch)))))
     `(org-code                  ((t ( :foreground ,pg-onedark-variant-code
                                       :inherit (fixed-pitch)))))
     `(org-verbatim              ((t ( :foreground ,pg-onedark-variant-verbatim
                                       :inherit (fixed-pitch)))))
     `(org-table                 ((t ( :foreground ,pg-onedark-variant-table
                                       :inherit (shaodw
                                                 fixed-pitch)))))
     `(org-indent                ((t ( :inherit (org-hide
                                                 fixed-pitch)))))
     `(org-special-keyword       ((t ( :inherit (font-lock-comment-face
                                                 fixed-pitch)))))
     `(org-meta-line             ((t ( :inherit (font-lock-comment-face
                                                 fixed-pitch)))))
     `(org-checkbox              ((t ( :inherit (fixed-pitch)))))

     ;; Outshine
     `(outshine-level-4 ((t ( :foreground ,pg-onedark-variant-green))))

     ;; Sp
     `(sp-pair-overlay-face ((t ( :background ,pg-onedark-variant-regionbg))))

     ;; Company
     `(company-tooltip-selection  ((t ( :background ,pg-onedark-variant-regionbg
                                        :distant-foreground ,pg-onedark-variant-regionds))))
     `(company-tooltip-mouse      ((t ( :background ,pg-onedark-variant-regionbg
                                        :distant-foreground ,pg-onedark-variant-regionds))))
     `(company-tooltip-annotation ((t ( :foreground ,pg-onedark-variant-gold))))
     `(company-box-scrollbar      ((t ( :background ,pg-onedark-variant-regionbg))))
     `(company-tooltip            ((t ( :foreground ,pg-onedark-variant-whitestd 
                                        :background ,pg-onedark-variant-doc-box))))

     ;; Mode line
     `(mode-line                       ((t ( :foreground ,pg-onedark-variant-whitestd
                                             :background ,pg-onedark-variant-modelnbg
                                             :box ,pg-onedark-variant-modebox))))
     `(mode-line-inactive              ((t ( :foreground ,pg-onedark-variant-modelninfg
                                             :background ,pg-onedark-variant-modelninbg))))
     `(doom-modeline-buffer-modified   ((t ( :foreground ,pg-onedark-variant-modelndiff))))
     `(doom-modeline-urgent            ((t ( :foreground ,pg-onedark-variant-error))))
     `(doom-modeline-lsp-success       ((t ( :foreground ,pg-onedark-variant-docs))))
     `(doom-modeline-buffer-major-mode ((t ( :foreground ,pg-onedark-variant-blue))))
     `(doom-modeline-evil-normal-state ((t ( :foreground ,pg-onedark-variant-eviln
                                             :weight bold))))

     ;; mu4e
     `(mu4e-header-key-face ((t ( :foreground ,pg-onedark-variant-mu4eheader))))

     ;; eshell
     `(eshell-prompt ((t ( :foreground ,pg-onedark-variant-gold))))

     ;; Ledger
     `(ledger-font-payee-cleared-face   ((t ( :foreground ,pg-onedark-variant-green))))
     `(ledger-font-posting-account-face ((t ( :inherit (font-lock-builtin-face)))))

     ;; lsp
     `(lsp-lsp-flycheck-warning-unnecessary-face ((t ( :inherit (flycheck-warning)))))

     ;; lsp-ui
     `(lsp-ui-doc-background ((t ( :background ,pg-onedark-variant-doc-box))))

     ;; Flycheck
     `(flycheck-warning ((t ( :underline ( :color ,pg-onedark-variant-warn
                                           :style wave)))))

     ;; Tab bar
     `(tab-bar              ((t ( :foreground ,pg-onedark-variant-whitestd
                                  :background ,pg-onedark-variant-modelnbg))))
     `(tab-bar-tab          ((t ( :foreground ,pg-onedark-variant-white
                                  :box ( :line-width -1
                                         :color ,pg-onedark-variant-modelnbg
                                         :style pressed-button)))))
     `(tab-bar-tab-inactive ((t ( :foreground ,pg-onedark-variant-whitestd
                                  :background ,pg-onedark-variant-modelnbg))))

     ;; Markdown
     `(markdown-code-face ((t ( :background ,pg-onedark-variant-doc-box))))

     ;; nusmv
     `(nusmv-font-lock-variable-name-face ((t ( :inherit (font-lock-variable-name-face)))))
     `(nusmv-font-lock-keyword-face       ((t ( :inherit (font-lock-keyword-face)))))
     `(nusmv-font-lock-constant-face      ((t ( :inherit (font-lock-constant-face)))))
     `(nusmv-font-lock-type-face          ((t ( :inherit (font-lock-type-face)))))
     `(nusmv-font-lock-module-name-face   ((t ( :inherit (font-lock-function-name-face)))))
     `(nusmv-font-lock-directive-face     ((t ( :inherit (font-lock-preprocessor-face)))))
     `(nusmv-font-lock-separator-face     ((t ( :inherit (font-lock-builtin-face)))))

     ;; vterm
     `(which-func ((t ( :foreground ,pg-onedark-variant-blue))))

     ;; sudoku
     `(sudoku-value-face ((t ( :foreground ,pg-onedark-variant-mu4eheader
                               :height 2.0))))

     ;; Makefile
     `(makefile-space ((t ( :background ,pg-onedark-variant-black))))

     ;; slack
     `(slack-message-output-text    ((t ( :inherit (variable-pitch)))))
     `(slack-mrkdwn-code-face       ((t ( :inherit (org-code)))))
     `(slack-mrkdwn-code-block-face ((t ( :inherit (org-verbatim)))))

     ;; General font locks
     `(font-lock-function-name-face ((t ( :foreground ,pg-onedark-variant-blue))))
     `(font-lock-preprocessor-face  ((t ( :foreground ,pg-onedark-variant-preproc))))
     `(font-lock-keyword-face       ((t ( :foreground ,pg-onedark-variant-keywords))))
     `(font-lock-string-face        ((t ( :foreground ,pg-onedark-variant-strings))))
     `(font-lock-doc-face           ((t ( :foreground ,pg-onedark-variant-docs
                                          :slant italic))))
     `(font-lock-comment-face       ((t ( :foreground ,pg-onedark-variant-comments
                                          :slant italic))))
     `(font-lock-type-face          ((t ( :foreground ,pg-onedark-variant-types))))
     `(font-lock-variable-name-face ((t ( :foreground ,pg-onedark-variant-vars))))
     `(font-lock-constant-face      ((t ( :foreground ,pg-onedark-variant-constants))))
     `(font-lock-doc-markup-face    ((t ( :foreground ,pg-onedark-variant-tags))))
     `(font-lock-builtin-face       ((t ( :foreground ,pg-onedark-variant-builtin))))))

  (provide-theme 'pg-onedark-variant)

#+end_src

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/themes/pg-onelight-variant-theme.el

  ;;; pg-onelight-variant-theme.el --- One Light Variant color theme
  ;; Author: Philippe Gabriel

  (deftheme pg-onelight-variant
    "One Light Variant - My pg-onelight-variant custom theme.")

  (defvar pg-onelight-variant-colors-alist
    '(("pg-onelight-variant-blackstd"    . "#333333")
      ("pg-onelight-variant-black"       . "#282c34")
      ("pg-onelight-variant-gold"        . "#eead0e")
      ("pg-onelight-variant-whitebg"     . "#ffffff")
      ("pg-onelight-variant-dark"        . "#000000")
      ("pg-onelight-variant-doc-box"     . "#1a1a1a")
      ("pg-onelight-variant-cursorbg"    . "#4682d9")
      ("pg-onelight-variant-regionbg"    . "#b4eeb4")
      ("pg-onelight-variant-regionds"    . "#828997")
      ("pg-onelight-variant-blue"        . "#00bfff")
      ("pg-onelight-variant-green"       . "#2cff64")
      ("pg-onelight-variant-keywords"    . "#c678dd")
      ("pg-onelight-variant-strings"     . "#50A14F")
      ("pg-onelight-variant-docs"        . "#008b00")
      ("pg-onelight-variant-modebox"     . "#7f7f7f")
      ("pg-onelight-variant-comments"    . "#424243")
      ("pg-onelight-variant-codeblockbg" . "#eee9e9")
      ("pg-onelight-variant-code"        . "#ffa500")
      ("pg-onelight-variant-verbatim"    . "#00dd00")
      ("pg-onelight-variant-table"       . "#68228b")
      ("pg-onelight-variant-types"       . "#cd853f")
      ("pg-onelight-variant-vars"        . "#ff6347")
      ("pg-onelight-variant-link"        . "#61afef")
      ("pg-onelight-variant-constants"   . "#eead0e")
      ("pg-onelight-variant-tags"        . "#ee00ee")
      ("pg-onelight-variant-builtin"     . "#008b8b")
      ("pg-onelight-variant-preproc"     . "#7b447b")
      ("pg-onelight-variant-shexec"      . "#afeeee")
      ("pg-onelight-variant-modelnfg"    . "#030303")
      ("pg-onelight-variant-modelnbg"    . "#bfbfbf")
      ("pg-onelight-variant-modelndiff"  . "#ff4c35")
      ("pg-onelight-variant-modelninfg"  . "#1c1c1c")
      ("pg-onelight-variant-modelninbg"  . "#a6a6a6")
      ("pg-onelight-variant-lnnumfg"     . "#262626")
      ("pg-onelight-variant-lnnumbg"     . "#999999")
      ("pg-onelight-variant-lnsltfg"     . "#fefefe")
      ("pg-onelight-variant-mu4eheader"  . "#ff83fa")
      ("pg-onelight-variant-parenmatch"  . "#c678dd")
      ("pg-onelight-variant-error"       . "#ff6666")
      ("pg-onelight-variant-warn"        . "#8b5a00")
      ("pg-onelight-variant-minibuf"     . "#0000ff")
      ("pg-onelight-variant-eviln"       . "#818ff4"))
    "List of One Dark Variant colors.")

  (defmacro pg-onelight-variant-with-color-variables (&rest body)
    "Bind the colors list around BODY."
    (declare (indent 0))
    `(let ((class '((class color) (min-colors 89)))
           ,@ (mapcar (lambda (cons)
                        (list (intern (car cons)) (cdr cons)))
                      pg-onelight-variant-colors-alist))
       ,@body))

  (pg-onelight-variant-with-color-variables
    (custom-theme-set-faces
     'pg-onelight-variant

     ;; General
     `(cursor                   ((t ( :background ,pg-onelight-variant-cursorbg))))
     `(default                  ((t ( :foreground ,pg-onelight-variant-blackstd
                                      :background ,pg-onelight-variant-whitebg))))
     `(italic                   ((t ( :slant italic))))
     `(link                     ((t ( :foreground ,pg-onelight-variant-link
                                      :weight bold
                                      :underline t))))
     `(region                   ((t ( :background ,pg-onelight-variant-regionbg
                                      :distant-foreground ,pg-onelight-variant-regionds))))
     `(highlight                ((t ( :background ,pg-onelight-variant-regionbg
                                      :distant-foreground ,pg-onelight-variant-regionds))))
     `(show-paren-match         ((t ( :foreground ,pg-onelight-variant-parenmatch
                                      :weight bold))))
     `(sh-quoted-exec           ((t ( :foreground ,pg-onelight-variant-shexec))))
     `(line-number              ((t ( :foreground ,pg-onelight-variant-lnnumfg
                                      :background ,pg-onelight-variant-lnnumbg))))
     `(line-number-current-line ((t ( :foreground ,pg-onelight-variant-lnsltfg
                                      :background ,pg-onelight-variant-lnnumbg))))
     `(minibuffer-prompt        ((t ( :foreground ,pg-onelight-variant-minibuf))))
     `(shadow                   ((t ( :foreground ,pg-onelight-variant-dark))))
     `(error                    ((t ( :foreground ,pg-onelight-variant-error))))
     `(warning                  ((t ( :foreground ,pg-onelight-variant-warn))))
     `(message-header-name      ((t ( :bold t))))

     ;; Persp
     `(persp-selected-face ((t ( :foreground ,pg-onelight-variant-warn))))

     ;; Man
     `(Man-overstrike ((t ( :foreground ,pg-onelight-variant-types
                            :weight bold))))
     `(Man-underline  ((t ( :foreground ,pg-onelight-variant-keywords
                            :underline t))))

     ;; Info
     `(Info-quoted    ((t ( :foreground ,pg-onelight-variant-code
                            :inherit (fixed-pitch)))))

     ;; Org
     `(org-hide                  ((t ( :foreground ,pg-onelight-variant-whitebg))))
     `(org-level-4               ((t ( :foreground ,pg-onelight-variant-green))))
     `(org-date                  ((t ( :foreground ,pg-onelight-variant-blue))))
     `(org-document-info-keyword ((t ( :inherit (font-lock-comment-face
                                                 fixed-pitch)))))
     `(org-document-title        ((t ( :foreground ,pg-onelight-variant-blackstd
                                       :weight bold))))
     `(org-document-info         ((t ( :foreground ,pg-onelight-variant-blackstd))))
     `(org-ellipsis              ((t ( :underline nil))))
     `(org-block                 ((t ( :foreground nil
                                       :background ,pg-onelight-variant-codeblockbg
                                       :inherit (fixed-pitch)))))
     `(org-code                  ((t ( :foreground ,pg-onelight-variant-code
                                       :inherit (fixed-pitch)))))
     `(org-verbatim              ((t ( :foreground ,pg-onelight-variant-verbatim
                                       :inherit (fixed-pitch)))))
     `(org-table                 ((t ( :foreground ,pg-onelight-variant-table
                                       :inherit (shaodw
                                                 fixed-pitch)))))
     `(org-indent                ((t ( :inherit (org-hide
                                                 fixed-pitch)))))
     `(org-special-keyword       ((t ( :inherit (font-lock-comment-face
                                                 fixed-pitch)))))
     `(org-meta-line             ((t ( :inherit (font-lock-comment-face
                                                 fixed-pitch)))))
     `(org-checkbox              ((t ( :inherit (fixed-pitch)))))

     ;; Outshine
     `(outshine-level-4 ((t ( :foreground ,pg-onelight-variant-green))))

     ;; Sp
     `(sp-pair-overlay-face ((t ( :background ,pg-onelight-variant-regionbg))))

     ;; Company
     `(company-tooltip-selection  ((t ( :background ,pg-onelight-variant-regionbg
                                        :distant-foreground ,pg-onelight-variant-regionds))))
     `(company-tooltip-mouse      ((t ( :background ,pg-onelight-variant-regionbg
                                        :distant-foreground ,pg-onelight-variant-regionds))))
     `(company-tooltip-annotation ((t ( :foreground ,pg-onelight-variant-gold))))
     `(company-box-scrollbar      ((t ( :background ,pg-onelight-variant-regionbg))))
     `(company-tooltip            ((t ( :foreground ,pg-onelight-variant-blackstd 
                                        :background ,pg-onelight-variant-doc-box))))

     ;; Mode line
     `(mode-line                       ((t ( :foreground ,pg-onelight-variant-modelnfg
                                             :background ,pg-onelight-variant-modelnbg
                                             :box ,pg-onelight-variant-modebox))))
     `(mode-line-inactive              ((t ( :foreground ,pg-onelight-variant-modelninfg
                                             :background ,pg-onelight-variant-modelninbg))))
     `(doom-modeline-buffer-modified   ((t ( :foreground ,pg-onelight-variant-modelndiff))))
     `(doom-modeline-urgent            ((t ( :foreground ,pg-onelight-variant-error))))
     `(doom-modeline-lsp-success       ((t ( :foreground ,pg-onelight-variant-docs))))
     `(doom-modeline-buffer-major-mode ((t ( :foreground ,pg-onelight-variant-tags))))
     `(doom-modeline-evil-normal-state ((t ( :foreground ,pg-onelight-variant-eviln
                                             :weight bold))))

     ;; mu4e
     `(mu4e-header-key-face ((t ( :foreground ,pg-onelight-variant-mu4eheader))))

     ;; eshell
     `(eshell-prompt ((t ( :foreground ,pg-onelight-variant-gold))))

     ;; Ledger
     `(ledger-font-payee-cleared-face   ((t ( :foreground ,pg-onelight-variant-green))))
     `(ledger-font-posting-account-face ((t ( :inherit (font-lock-builtin-face)))))

     ;; lsp
     `(lsp-lsp-flycheck-warning-unnecessary-face ((t ( :inherit (flycheck-warning)))))

     ;; lsp-ui
     `(lsp-ui-doc-background ((t ( :background ,pg-onelight-variant-doc-box))))

     ;; Flycheck
     `(flycheck-warning ((t ( :underline ( :color ,pg-onelight-variant-warn
                                           :style wave)))))

     ;; Tab bar
     `(tab-bar              ((t ( :foreground ,pg-onelight-variant-blackstd
                                  :background ,pg-onelight-variant-modelnbg))))
     `(tab-bar-tab          ((t ( :foreground ,pg-onelight-variant-dark
                                  :box ( :line-width -1
                                         :color ,pg-onelight-variant-modelnbg
                                         :style pressed-button)))))
     `(tab-bar-tab-inactive ((t ( :foreground ,pg-onelight-variant-blackstd
                                  :background ,pg-onelight-variant-modelnbg))))

     ;; Markdown
     `(markdown-code-face ((t ( :background ,pg-onelight-variant-doc-box))))

     ;; nusmv
     `(nusmv-font-lock-variable-name-face ((t ( :inherit (font-lock-variable-name-face)))))
     `(nusmv-font-lock-keyword-face       ((t ( :inherit (font-lock-keyword-face)))))
     `(nusmv-font-lock-constant-face      ((t ( :inherit (font-lock-constant-face)))))
     `(nusmv-font-lock-type-face          ((t ( :inherit (font-lock-type-face)))))
     `(nusmv-font-lock-module-name-face   ((t ( :inherit (font-lock-function-name-face)))))
     `(nusmv-font-lock-directive-face     ((t ( :inherit (font-lock-preprocessor-face)))))
     `(nusmv-font-lock-separator-face     ((t ( :inherit (font-lock-builtin-face)))))

     ;; vterm
     `(which-func ((t ( :foreground ,pg-onelight-variant-blue))))

     ;; sudoku
     `(sudoku-value-face ((t ( :foreground ,pg-onelight-variant-mu4eheader
                               :height 2.0))))

     ;; Makefile
     `(makefile-space ((t ( :background ,pg-onelight-variant-whitebg))))

     ;; slack
     `(slack-message-output-text    ((t ( :inherit (variable-pitch)))))
     `(slack-mrkdwn-code-face       ((t ( :inherit (org-code)))))
     `(slack-mrkdwn-code-block-face ((t ( :inherit (org-verbatim)))))

     ;; General font locks
     `(font-lock-function-name-face ((t ( :foreground ,pg-onelight-variant-blue))))
     `(font-lock-preprocessor-face  ((t ( :foreground ,pg-onelight-variant-preproc))))
     `(font-lock-keyword-face       ((t ( :foreground ,pg-onelight-variant-keywords))))
     `(font-lock-string-face        ((t ( :foreground ,pg-onelight-variant-strings))))
     `(font-lock-doc-face           ((t ( :foreground ,pg-onelight-variant-docs
                                          :slant italic))))
     `(font-lock-comment-face       ((t ( :foreground ,pg-onelight-variant-comments
                                          :slant italic))))
     `(font-lock-type-face          ((t ( :foreground ,pg-onelight-variant-types))))
     `(font-lock-variable-name-face ((t ( :foreground ,pg-onelight-variant-vars))))
     `(font-lock-constant-face      ((t ( :foreground ,pg-onelight-variant-constants))))
     `(font-lock-doc-markup-face    ((t ( :foreground ,pg-onelight-variant-tags))))
     `(font-lock-builtin-face       ((t ( :foreground ,pg-onelight-variant-builtin))))))

  (provide-theme 'pg-onelight-variant)

#+end_src

*** UI basic settings

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  (load-theme 'pg-onedark-variant t) ;; Load onedark theme
  ;; (load-theme 'pg-onelight-variant t) ;; Load onelight theme
  (setq inhibit-startup-message t    ;; Disable startup message
        scroll-conservatively 1000   ;; Slow scrolling
        split-width-threshold 185)   ;; Width for splitting
  (unless pg/is-termux
    (scroll-bar-mode 0)              ;; Disable visible scrollbar
    (tool-bar-mode 0)                ;; Disable toolbar
    (tooltip-mode 0))
  (menu-bar-mode 0)                  ;; Disable menu bar

  ;; Set frame transparency
  (unless (or pg/is-termux (not pg/exwm-enabled))
    (set-frame-parameter (selected-frame) 'alpha '(80 . 80))
    (add-to-list 'default-frame-alist '(alpha . (80 . 80)))
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized)))

#+end_src

*** Package | diminish

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  (straight-use-package 'diminish)
  (require 'diminish)

  (with-eval-after-load 'diminish
    (dolist (mode '(auto-revert-mode
                    buffer-face-mode
                    visual-line-mode))
      (diminish mode)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-diminish")

#+end_src

*** Package | all-the-icons

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  (straight-use-package 'all-the-icons)
  (require 'all-the-icons)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-all-the-icons")

#+end_src

*** Package | doom-modeline

Customizes the look of the modeline for better aesthetic.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  (straight-use-package 'doom-modeline)
  (require 'doom-modeline)
  (with-eval-after-load 'doom-modeline
    (pg/customize-set-variables
     '((doom-modeline-height . 17)
       (doom-modeline-modal-icon . nil)
       (doom-modeline-enable-word-count . t)
       (doom-modeline-indent-info . t)
       (doom-modeline-buffer-file-name-style . truncate-except-project)
       (doom-modeline-mu4e . t)))
    (doom-modeline-mode 1))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-doom-modeline")

#+end_src

*** Package | dashboard

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  (defun pg/dashboard-setup-startup-hook ()
    "Setup post initialization hooks."
    (add-hook 'after-init-hook #'(lambda ()
                                   ;; Display useful lists of items
                                   (dashboard-insert-startupify-lists)))
    (add-hook 'emacs-startup-hook #'(lambda ()
                                      (switch-to-buffer dashboard-buffer-name)
                                      (goto-char (point-min))
                                      (redisplay)
                                      (run-hooks 'dashboard-after-initialize-hook))))

  (defun pg/display-startup-time ()
    "Displays some startip statistics."
    (let ((package-count 0) (time (float-time (time-subtract after-init-time before-init-time))))
      (when (boundp 'straight--profile-cache)
        (setq package-count (+ (hash-table-count straight--profile-cache) package-count)))
      (if (zerop package-count)
          (format "Emacs started in %.2f" time)
        (format "%d packages loaded in %.2f seconds with %d garbage collections" package-count time gcs-done))))

  (straight-use-package 'dashboard)
  (with-eval-after-load 'projectile
    (fset #'dashboard-setup-startup-hook #'pg/dashboard-setup-startup-hook)
    (require 'dashboard))
  (with-eval-after-load 'dashboard
    (pg/customize-set-variables
     `((dashboard-set-file-icons . t)
       (dashboard-match-agenda-entry . "task")
       (dashboard-items . ((recents . 5)
                           (projects . 5)
                           (agenda . 5)))
       (dashboard-page-separator . "\n\f\n")
       (dashboard-init-info . ,#'pg/display-startup-time)))
    (pg/dashboard-setup-startup-hook))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-dashboard") ;; old version 1.7.0, need 1.8.0

#+end_src

*** Package | page-break-lines

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  (straight-use-package 'page-break-lines)
  (require 'page-break-lines)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-page-break-lines")

#+end_src

*** UI enhancement package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  (provide 'pg-ui)

#+end_src

** Window Management

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-buffer.el

  ;;; pg-buffer.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Window basic management

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-buffer.el

  (setq even-window-sizes nil
        display-buffer-base-action
        '(display-buffer-reuse-mode-window
          display-buffer-reuse-window
          display-buffer-same-window))

#+end_src

*** Package | bufler

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-buffer.el

  (straight-use-package 'bufler)
  (unless (fboundp 'bufler)
    (autoload #'bufler "bufler" nil t))
  (global-set-key (kbd "C-x C-b") #'bufler)
  (with-eval-after-load 'bufler
    (message "bufler has loaded")
    (unless (fboundp 'evil-collection-define-key)
      (autoload #'evil-collection-define-key "evil-collection"))
    (evil-collection-define-key 'normal 'bufler-list-mode-map
      (kbd "RET")   #'bufler-list-buffer-switch
      (kbd "M-RET") #'bufler-list-buffer-peek
      "D"           #'bufler-list-buffer-kill)
    (customize-set-variable 'bufler-groups
                            (bufler-defgroups

                              ;; Subgroup collecting all named workspaces.
                              (group (auto-workspace))

                              ;; Subgroup collecting buffers in a projectile project.
                              (group (auto-projectile))

                              ;; Grouping browser windows
                              (group
                               (group-or "Browsers"
                                         (name-match "Qutebrowser" (rx bos "qutebrowser"))
                                         (name-match "Firefox" (rx bos "firefox"))))

                              (group
                               (group-or "Chat"
                                         (name-match "Discord" (rx bos "discord"))
                                         (mode-match "Slack" (rx bos "slack-"))))

                              (group
                               ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
                               (group-or "Help/Info"
                                         (mode-match "*Help*" (rx bos (or "help-" "helpful-")))
                                         (mode-match "*Info*" (rx bos "info-"))))

                              (group
                               ;; Subgroup collecting all special buffers (i.e. ones that are not
                               ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
                               ;; through to other groups, so they end up grouped with their project buffers).
                               (group-and "*Special*"
                                          (name-match "**Special**"
                                                      (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace" "Pinentry") "*"))
                                          (lambda (buffer)
                                            (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                                                 buffer)
                                                        (funcall (mode-match "Dired" (rx bos "dired"))
                                                                 buffer)
                                                        (funcall (auto-file) buffer))
                                              "*Special*"))))

                              ;; Group remaining buffers by major mode.
                              (auto-mode))))

#+end_src

*** Package | winner-mode

For window configurations

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-buffer.el

  (require 'winner)
  (with-eval-after-load 'winner
    (winner-mode)
    (with-eval-after-load 'general
      (pg/leader-keys
        "wu" '(winner-undo :which-key "undo config")
        "wr" '(winner-redo :which-key "redo config"))))

#+end_src

*** Package | tab-bar

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-buffer.el

  (require 'tab-bar)
  (with-eval-after-load 'tab-bar
    (customize-set-variable 'tab-bar-show 1)
    (tab-bar-mode)
    (with-eval-after-load 'general
      (pg/leader-keys
        "wt" '(:ignore t :which-key "tabs")
        "wtt" '(tab-new :which-key "create")
        "wtw" '(tab-close :which-key "close")
        "wtr" '(tab-rename :which-key "name")
        "wts" '(tab-switch :which-key "switch")
        "wtu" '(tab-undo :which-key "undo"))))

#+end_src

*** Package | perspective

For organizing the buffer list

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-buffer.el

  (straight-use-package 'perspective)
  (require 'perspective)
  (with-eval-after-load 'perspective
    (customize-set-variable 'persp-suppress-no-prefix-key-warning t)
    (global-set-key (kbd "C-x k") #'persp-kill-buffer*)
    (unless (equal persp-mode t)
      (persp-mode))
    (with-eval-after-load 'general
      (pg/leader-keys
        "wp" '(:ignore t :which-key "persp")
        "wpc" '(persp-switch :which-key "create")
        "wps" '(hydra-perspective-switch/body :which-key "switch")
        "wpa" '(persp-add-buffer :which-key "add buf")
        "wpu" '(persp-set-buffer :which-key "set buf")
        "wpk" '(persp-kill :which-key "remove"))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-perspective")

#+end_src

*** Window management package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-buffer.el

  (provide 'pg-buffer)

#+end_src

** Email Management

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-email.el

  ;;; pg-email.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Email configuration file

After having setup the file, make sure to run the following commands:
- ~mu init --maildir=~/Mail --my-address=address1@domain1.com --my-address=address2@domain2.com ...~ - For all different addresses
- ~mu index~ - To index the given addresses

#+begin_src conf :tangle ~/.dotfiles/.mbsyncrc

  # Main hotmail account
  IMAPAccount hotmail
  Host outlook.office365.com
  User pgabriel999@hotmail.com
  Port 993
  PassCmd "emacsclient -e \"(pg/lookup-password :host \\\"hotmail.com\\\" :user \\\"pgabriel999\\\")\" | cut -d '\"' -f2"
  SSLType IMAPS
  CertificateFile /etc/ssl/certs/ca-certificates.crt

  IMAPStore hotmail-remote
  Account hotmail

  MaildirStore hotmail-local
  Subfolders Verbatim
  Path /home/phil-gab99/Mail/Main/
  Inbox /home/phil-gab99/Mail/Main/Inbox

  Channel hotmail
  Far :hotmail-remote:
  Near :hotmail-local:
  Patterns *
  CopyArrivalDate yes
  Create Both
  Expunge Both
  SyncState *

  # University account
  # IMAPAccount umontreal
  # Host outlook.office365.com
  # User philippe.gabriel.1@umontreal.ca
  # Port 993
  # PassCmd oauth2ms
  # SSLType IMAPS
  # AuthMechs XOAUTH2
  # CertificateFile /etc/ssl/certs/ca-certificates.crt

  # IMAPStore umontreal-remote
  # Account umontreal

  # MaildirStore umontreal-local
  # SubFolders Verbatim
  # Path /home/phil-gab99/Mail/University/
  # Inbox /home/phil-gab99/Mail/University/Inbox

  # Channel umontreal
  # Far :umontreal-remote:
  # Near :umontreal-local:
  # Patterns *
  # CopyArrivalDate yes
  # Create Both
  # Expunge Both
  # SyncState *

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "mu")
  (specification->package "isync")
  (specification->package "oauth2ms")

#+end_src

*** Package | mu4e

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-email.el

  (unless (or pg/is-termux
              pg/is-windows)
    (straight-use-package '(mu4e :type git
                                 :host github
                                 :repo "djcb/mu"
                                 :branch "release/1.8"))
    (unless (fboundp 'mu4e)
      (autoload #'mu4e "mu4e" nil t))
    (unless (fboundp 'mu4e-compose-new)
      (autoload #'mu4e-compose-new "mu4e" nil t))
    (unless (fboundp 'corfu-mode)
      (autoload #'corfu-mode "corfu" nil t))
    (add-hook 'mu4e-compose-mode-hook #'corfu-mode)
    (with-eval-after-load 'general
      (pg/leader-keys
        "m" '(:ignore t :which-key "email")
        "md" '(mu4e :which-key "dashboard")
        "mc" '(mu4e-compose-new :which-key "compose")))
    (customize-set-variable 'mu4e-compose-signature (concat "Philippe Gabriel - \n"
                                                            "[[mailto:philippe.gabriel.1@umontreal.ca][philippe.gabriel.1@umontreal.ca]] | "
                                                            "[[mailto:pgabriel999@hotmail.com][pgabriel999@hotmail.com]]"))
    (with-eval-after-load 'mu4e
      (require 'mu4e-org)
      (pg/customize-set-variables
       `((mail-user-agent . ,#'mu4e-user-agent)
         (mu4e-change-filenames-when-moving . t)
         (mu4e-update-interval . ,(* 10 60))
         (mu4e-get-mail-command . "mbsync -a")
         (mu4e-compose-format-flowed . t)
         (mu4e-compose-signature-auto-include . nil)
         (message-send-mail-function . ,#'smtpmail-send-it)
         (mu4e-maildir-shortcuts . (;; ("/University/Inbox" . 117)
                                    ;; ("/University/Drafts" . 100)
                                    ("/Main/Inbox" . 109)
                                    ("/Main/Jobs" . 106)
                                    ("/Main/University" . 115)))
         (mu4e-context-policy . pick-first)))
      (add-to-list 'mu4e-bookmarks
                   '( :name "Starred"
                      :query "flag:flagged"
                      :key ?f))
      (setq mu4e-contexts
            (list
             (make-mu4e-context :name "Main"
                                :match-func (lambda (msg)
                                              (when msg
                                                (string-prefix-p "/Main" (mu4e-message-field msg :maildir))))
                                :vars '((user-mail-address . "pgabriel999@hotmail.com")
                                        (user-full-name . "Philippe Gabriel")
                                        (smtpmail-smtp-server . "smtp.office365.com")
                                        (smtpmail-smtp-user . "pgabriel999@hotmail.com")
                                        (smtpmail-smtp-service . 587)
                                        (smtpmail-stream-type . starttls)
                                        (mu4e-drafts-folder . "/Main/Drafts")
                                        (mu4e-sent-folder . "/Main/Sent")
                                        (mu4e-refile-folder . "/Main/Archive")
                                        (mu4e-trash-folder . "/Main/Deleted")))
             ;; (make-mu4e-context :name "University"
             ;;                    :match-func (lambda (msg)
             ;;                                  (when msg
             ;;                                    (string-prefix-p "/University"
             ;;                                                     (mu4e-message-field msg :maildir))))
             ;;                    :vars '((user-mail-address . "philippe.gabriel.1@umontreal.ca")
             ;;                            (user-full-name . "Philippe Gabriel")
             ;;                            (smtpmail-smtp-server . "smtp.office365.com")
             ;;                            (smtpmail-smtp-user . "philippe.gabriel.1@umontreal.ca")
             ;;                            (smtpmail-smtp-service . 587)
             ;;                            (smtpmail-stream-type . starttls)
             ;;                            (mu4e-drafts-folder . "/University/Drafts")
             ;;                            (mu4e-sent-folder . "/University/Sent Items")
             ;;                            (mu4e-refile-folder . "/University/Archive")
             ;;                            (mu4e-trash-folder . "/University/Deleted Items")))
             ))))

#+end_src

*** Package | mu4e-alert

Allows for notification pop-up and mode line count when receiving emails

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-email.el

  (unless (or pg/is-termux
              pg/is-windows)
    (straight-use-package 'mu4e-alert)
    (with-eval-after-load 'mu4e
      (require 'mu4e-alert))
    (with-eval-after-load 'mu4e-alert
      (pg/customize-set-variables
       '((mu4e-alert-notify-repeated-mails . t)
         (mu4e-alert-email-notification-types . (subjects))))
      (mu4e-alert-set-default-style 'notifications)
      (mu4e-alert-enable-notifications)
      (mu4e-alert-enable-mode-line-display)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-mu4e-alert")

#+end_src

*** Email management package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-email.el

  (provide 'pg-email)

#+end_src

** Editing Experience

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  ;;; pg-editing.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Basic editing configuration

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (setq tab-width 4                     ;; Set tab length
        custom-buffer-indent 2
        display-line-numbers-type 'relative)
  (setq-default indent-tabs-mode nil    ;; Disable tab caracter
                fill-column 80)         ;; 80 caracter column indicator
  (show-paren-mode 1)                   ;; Enable delimiters matching
  (save-place-mode 1)                   ;; Remembers last cursor placement in file
  (column-number-mode)                  ;; Show column numbers
  (mouse-avoidance-mode 'banish)        ;; No mouse allowed
  (global-display-line-numbers-mode 1)  ;; Show line numbers
  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
  (add-hook 'compilation-filter-hook
            #'(lambda () (ansi-color-apply-on-region (point-min) (point-max))))

  (dolist (mode '(org-mode-hook         ;; Disable line numbers for some modes
                  org-agenda-mode-hook
                  erc-mode-hook
                  erc-list-menu-mode-hook
                  Info-mode-hook
                  ielm-mode-hook
                  eww-mode-hook
                  term-mode-hook
                  inferior-python-mode-hook
                  inferior-haskell-mode-hook
                  prolog-inferior-mode-hook
                  coming-mode-hook
                  helpful-mode-hook
                  gfm-view-mode-hook
                  compilation-mode-hook
                  dashboard-mode-hook
                  eshell-mode-hook
                  sql-interactive-mode-hook
                  pdf-view-mode-hook
                  telega-root-mode-hook
                  telega-chat-mode
                  telega-image-mode
                  sokoban-mode-hook
                  doc-view-mode-hook
                  mu4e-main-mode-hook
                  Man-mode-hook
                  simple-mpc-mode-hook
                  elfeed-search-mode-hook
                  elfeed-show-mode-hook
                  treemacs-mode-hook
                  vterm-mode-hook
                  geiser-repl-mode-hook
                  slack-mode-hook
                  shell-mode-hook))
    (add-hook mode #'(lambda ()
                       (display-line-numbers-mode 0))))

#+end_src

*** Fonts

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (set-face-attribute 'default nil :font "JetBrains Mono" :weight 'light :height 120)
  (set-face-attribute 'fixed-pitch nil :family "JetBrains Mono" :weight 'light)
  (set-face-attribute 'variable-pitch nil :family "Iosevka Aile" :weight 'regular)

#+end_src

*** Package | ligature

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package '(ligature :type git
                                   :host github
                                   :repo "mickeynp/ligature.el"))
  (require 'ligature)
  (with-eval-after-load 'ligature
    (ligature-set-ligatures 't
                            '("++" "--" "/=" "&&" "||" "||=" "->" "=>" "::" "__"
                              "==" "===" "!=" "=/=" "!==" "<=" ">=" "<=>" "/*"
                              "*/" "//" "///" "\\n" "\\\\" "<<" "<<<" "<<=" ">>"
                              ">>>" ">>=" "|=" "^=" "**" "?." "</" "<!--" "</>"
                              "-->" "/>" "www" "##" "###" "####" "#####" "######"
                              "--" "---" "----" "-----" "------" "====" "====="
                              "======" "[]" "<>" "<~>" "??" ".." "..." "=~" "!~"
                              ":=" "..<" "!!" ":::" "=!=" "=:=" "<:<" "..=" "::<"
                              "#{" "#(" "#_" "#_(" "#?" "#:" ".-" ";;" "~@" "<-"
                              "#{}" "|>" "=>>" "=<<" ">=>" "<=<" "=>=" "=<=" "<$"
                              "<$>" "$>" "<+" "<+>" "+>" "<*" "<*>" "*>" "<|>"
                              ".=" "#=" "+++" "***" ":>:" ":<:" "<|||" "<||" "<|"
                              "||>" "|||>" "[|" "|]" "~-" "~~" "%%" "/\\" "\\/"
                              "-|" "_|" "_|_" "|-" "||-" ":>" ":<" ">:" "<:" "::>"
                              "<::" ">::" "{|" "|}" "#[" "]#" "::=" "#!" "#="
                              "->>" ">-" ">>-" "->-" "->>-" "=>>=" ">>->" ">>=>"
                              "|->" "|=>" "~>" "~~>" "//=>" "<<-" "-<" "-<<" "-||"
                              "-<-" "-<<-" "=<" "=|" "=||" "=<<=" "<-<<" "<=<<"
                              "<-|" "<=|" "<~" "<~~" "<=//" "<->" "<<=>>" "|-|-|"
                              "|=|=|" "/=/"))
    (global-ligature-mode))


#+end_src

*** Package | rainbow-delimiters

Colors matching delimiters with different colours for distinguishability.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package 'rainbow-delimiters)
  (unless (fboundp 'rainbow-delimiters-mode)
    (autoload #'rainbow-delimiters-mode "rainbow-delimiters" nil t))
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-rainbow-delimiters")

#+end_src

*** Package | abbrev-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (require 'abbrev)
  (with-eval-after-load 'abbrev
    (if (fboundp 'diminish)
        (diminish #'abbrev-mode)
      (with-eval-after-load 'diminish
        (diminish #'abbrev-mode))))

#+end_src

*** Package | highlight-indent-guides

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package 'highlight-indent-guides)
  (unless (fboundp 'highlight-indent-guides-mode)
    (autoload #'highlight-indent-guides-mode "rainbow-delimiters" nil t))
  (add-hook 'prog-mode-hook #'highlight-indent-guides-mode)
  (with-eval-after-load 'highlight-indent-guides
    (pg/customize-set-variables
     '((highlight-indent-guides-responsive . stack)
       (highlight-indent-guides-method . character))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-highlight-indent-guides") ;; Old version 0.8.5

#+end_src

*** Package | smartparens

For surrounding delimiter matching and autocompletion.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package 'smartparens)
  (require 'smartparens)
  (with-eval-after-load 'smartparens
    (smartparens-global-mode)
    (if (boundp 'diminish)
        (diminish #'smartparens-mode)
      (with-eval-after-load 'diminish
        (diminish #'smartparens-mode))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-smartparens")

#+end_src

*** Package | outshine

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package 'outshine)
  (unless (fboundp 'outshine-mode)
    (autoload #'outshine-mode "outshine" nil t))
  (add-hook 'prog-mode-hook #'outshine-mode)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-outshine")

#+end_src

*** Package | selectric-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (defun pg/selectric-type-sound ()
    "Make the sound of the printing element hitting the paper."
    (progn
      (selectric-make-sound (format "%sselectric-move.wav" selectric-files-path))
      (unless (minibufferp)
        (if (= (current-column) (current-fill-column))
            (selectric-make-sound (format "%sping.wav" selectric-files-path))))))

  (straight-use-package 'selectric-mode)
  (fset #'selectric-type-sound #'pg/selectric-type-sound)
  (unless (fboundp 'selectric-mode)
    (autoload #'selectric-mode "selectric-mode" nil t))

#+end_src

*** Package | rainbow-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package 'rainbow-mode)
  (unless (fboundp 'rainbow-mode)
    (autoload #'rainbow-mode "rainbow-mode" nil t))
  (dolist (mode '(org-mode-hook
                  emacs-lorg-mode-hook
                  org-mode-hook
                  typescrorg-mode-hook
                  org-mode-hook
                  scss-mode-hook
                  less-css-mode-hook))
    (add-hook mode #'rainbow-mode))
  (with-eval-after-load 'rainbow-mode
    (if (boundp 'diminish)
        (diminish #'rainbow-mode)
      (with-eval-after-load 'diminish
        (diminish #'rainbow-mode))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-rainbow-mode")

#+end_src

*** Package | emojify

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package 'emojify)
  (require 'emojify)
  (with-eval-after-load 'emojify
    (global-emojify-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-emojify")

#+end_src

*** Package | evil

Allows usage of vim-like keybindings for some modes in emacs.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (defun pg/evil-hook()
    "Configuration of some default modes."
    (dolist (mode '(messages-buffer-mode
                    dashboard-mode))
      (evil-set-initial-state mode 'normal))
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (straight-use-package 'evil)
  (customize-set-variable 'evil-want-keybinding nil)
  (add-hook 'evil-mode-hook #'pg/evil-hook)
  (require 'evil)
  (with-eval-after-load 'evil
    (pg/customize-set-variables
     `((evil-want-integration . t)
       (evil-want-C-u-scroll . t)
       (evil-want-C-i-jump . nil)
       (evil-want-Y-yank-to-eol . t)
       (evil-want-fine-undo . t)
       (evil-undo-system . ,#'undo-redo)))
    (unless (fboundp 'evil-normal-state)
      (autoload #'evil-normal-state "evil-states"))
    (define-key evil-insert-state-map (kbd "C-g") #'evil-normal-state)
    (evil-mode 1)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-evil")

#+end_src

*** Package | evil-collection

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package 'evil-collection)
  (with-eval-after-load 'evil
    (require 'evil-collection))
  (with-eval-after-load 'evil-collection
    (evil-collection-init)
    (if (boundp 'diminish)
        (diminish #'evil-collection-unimpaired-mode)
      (with-eval-after-load 'diminish
        (diminish #'evil-collection-unimpaired-mode))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-evil-collection")

#+end_src

*** Editing experience package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (provide 'pg-editing)

#+end_src

** Help Documentation

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-help.el

  ;;; pg-help.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | helpful

Displays full documentations in place of the default help function.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-help.el

  (straight-use-package 'helpful)
  (unless (fboundp 'helpful-callable)
    (autoload #'helpful-callable "helpful" nil t))
  (global-set-key [remap describe-function] #'helpful-callable)
  (unless (fboundp 'helpful-command)
    (autoload #'helpful-command "helpful" nil t))
  (global-set-key [remap describe-command] #'helpful-command)
  (unless (fboundp 'helpful-variable)
    (autoload #'helpful-variable "helpful" nil t))
  (global-set-key [remap describe-variable] #'helpful-variable)
  (unless (fboundp 'helpful-key)
    (autoload #'helpful-key "helpful" nil t))
  (global-set-key [remap describe-key] #'helpful-key)
  (unless (fboundp 'helpful-symbol)
    (autoload #'helpful-symbol "helpful" nil t))
  (global-set-key [remap describe-symbol] #'helpful-symbol)
  (with-eval-after-load 'general
    (pg/leader-keys
      "h" '(:ignore t :which-key "help")
      "hk" '(helpful-key :which-key "key")
      "hf" '(helpful-callable :which-key "command")
      "hv" '(helpful-variable :which-key "variable")
      "hb" '(describe-bindings :which-key "bindings")
      "hc" '(describe-face :which-key "face")
      "hp" '(describe-package :which-key "package")
      "hk" '(helpful-kill-buffers :which-key "quit")))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-helpful")

#+end_src

*** Package | Info

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-help.el

  (defun pg/Info-mode-setup ()
    "Defining some behaviours for the major info-mode."
    (auto-fill-mode 0)
    (setq-local face-remapping-alist '((default (:height 1.5) default)
                                       (fixed-pitch (:height 1.0) fixed-pitch)
                                       (info-menu-header (:height 1.5) info-menu-header)
                                       (info-title-1 (:height 1.05) info-title-1)
                                       (info-title-2 (:height 1.15) info-title-2)
                                       (info-title-3 (:height 1.15) info-title-3)
                                       (info-title-4 (:height 2.0) info-title-4)))
    (variable-pitch-mode 1)
    (visual-line-mode 1))
  (add-hook 'Info-mode-hook #'pg/Info-mode-setup)

#+end_src

*** Package | visual-fill-column

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-help.el

  (defun pg/docs-visual-fill ()
    "Applies text soft wrap."
    (pg/customize-set-variables
     '((visual-fill-column-width . 150)
       (visual-fill-column-center-text . t)))
    (visual-fill-column-mode 1))

  (straight-use-package 'visual-fill-column)
  (unless (fboundp 'visual-fill-column-mode)
    (autoload #'visual-fill-column-mode "visual-fill-column" nil t))
  (dolist (mode '(org-mode-hook
                  gfm-view-mode-hook
                  Info-mode-hook
                  eww-mode-hook))
    (add-hook mode #'pg/docs-visual-fill))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-visual-fill-column")

#+end_src

*** Help documentation package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-help.el

  (provide 'pg-help)

#+end_src

** Web Design

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-web.el

  ;;; pg-web.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | eww

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-web.el

  (defun pg/eww-mode-setup ()
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq-local face-remapping-alist '((variable-pitch (:height 1.0) variable-pitch)
                                       (fixed-pitch (:height 1.0) fixed-pitch)
                                       (default (:height 1.5) default))))
  (add-hook 'eww-mode-hook #'pg/eww-mode-setup)

#+end_src

*** Web design package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-web.el

  (provide 'pg-web)

#+end_src

** File management

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  ;;; pg-file.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Temporary Files Management and Symlinks

Some settings to manage where emacs stores backup files (such as the =~= backup files).

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  (pg/customize-set-variables
   `((backup-directory-alist . (("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
     (auto-save-file-name-transforms . ((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
     (vc-follow-symlinks . t)))

#+end_src

*** Package | dired

The built-in directory editor. Some basic useful keybindings to keep in mind:
- ~j~ / ~k~ - Next / Previous line
- ~J~ - Jump to file in buffer
- ~RET~ - Select file or directory
- ~^~ - Go to parent directory
- ~g O~ - Open file in other window
- ~g o~ - Open file in other window in preview mode, which can be closed with ~q~
- ~M-RET~ - Show file in other window without focusing (previewing)

Keybindings relative to marking (selecting) in dired:
- ~m~ - Marks a file
- ~u~ - Unmarks a file
- ~U~ - Unmarks all files in buffer
- ~t~ - Inverts marked files in buffer
- ~% m~ - Mark files in buffer using regular expression
- ~*~ - Lots of other auto-marking functions
- ~K~ - "Kill" marked items, removed from the view only (refresh buffer with ~g r~ to get them back)
Many operations can be done on a single file if there are no active marks.

Keybindings relative to copying and renaming files:
- ~C~ - Copy marked files (or if no files are marked, the current file)
- ~R~ - Rename marked files
- ~% R~ - Rename based on regular expression

Keybindings relative to deleting files:
- ~D~ - Delete marked file
- ~d~ - Mark file for deletion
- ~x~ - Execute deletion for marks
- ~delete-by-moving-to-trash~ - Move to trash instead of deleting permanently if set to true

Keybindings relative to archives and compressing:
- ~Z~ - Compress or uncompress a file or folder to (.tar.gz)
- ~c~ - Compress selection to a specific file
- ~dired-compress-files-alist~ - Bind compression commands to file extension by adding additional extensions to the list

Keybindings for other useful operations:
- ~T~ - Touch (change timestamp)
- ~M~ - Change file mode
- ~O~ - Change file owner
- ~G~ - Change file group
- ~S~ - Create a symbolic link to this file
- ~L~ - Load an Emacs Lisp file into Emacs
  
#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  (unless (fboundp 'dired)
    (autoload #'dired "dired" nil t))
  (unless (fboundp 'dired-jump)
    (autoload #'dired-jump "dired" nil t))
  (global-set-key (kbd "C-x C-j") #'dired-jump)
  (with-eval-after-load 'dired
    (customize-set-variable 'dired-listing-switches "-Alh --group-directories-first"))

#+end_src

*** Package | dired-single

Keeps a single dired buffer open at a time (to not have multiple buried buffers).

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  (straight-use-package 'dired-single)
  (with-eval-after-load 'dired
    (require 'dired-single))
  (with-eval-after-load 'dired-single
    (if (boundp 'dired-mode-map)
        (progn
          (define-key dired-mode-map [remap dired-find-file] 'dired-single-buffer)
          (define-key dired-mode-map [remap dired-mouse-find-file-other-window] 'dired-single-buffer-mouse)
          (define-key dired-mode-map [remap dired-up-directory] 'dired-single-up-directory)))
    (unless (fboundp 'evil-collection-define-key)
      (autoload #'evil-collection-define-key "evil-collection"))
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" #'dired-single-up-directory
      "l" #'dired-single-buffer))

#+end_src

*** Package | all-the-icons-dired

Displays icons in dired-mode.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  (straight-use-package 'all-the-icons-dired)
  (unless pg/is-termux
    (unless (fboundp 'all-the-icons-dired-mode)
      (autoload #'all-the-icons-dired-mode "all-the-icons-dired" nil t))
    (add-hook 'dired-mode-hook #'all-the-icons-dired-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-all-the-icons-dired")

#+end_src

*** Package | dired-hide-dotfiles

Togglable option for hiding dot files.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  (straight-use-package 'dired-hide-dotfiles)
  (with-eval-after-load 'dired
    (unless (fboundp 'dired-hide-dotfiles-mode)
      (autoload #'dired-hide-dotfiles-mode "dired-hide-dotfiles" nil t))
    (add-hook 'dired-mode-hook #'dired-hide-dotfiles-mode)
    (with-eval-after-load 'evil-collection
      (evil-collection-define-key 'normal 'dired-mode-map
        "H" #'dired-hide-dotfiles-mode)))

#+end_src

*** Package | openwith

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  (unless pg/is-termux 
    (straight-use-package 'openwith)
    (when (require 'openwith nil 'noerror)
      (customize-set-variable 'large-file-warning-threshold nil)
      (customize-set-variable 'openwith-associations `((,(openwith-make-extension-regexp '("mpg"
                                                                                           "mpeg"
                                                                                           "mp4"
                                                                                           "avi"
                                                                                           "wmv"
                                                                                           "mov"
                                                                                           "flv"
                                                                                           "ogm"
                                                                                           "ogg"
                                                                                           "mkv"))
                                                        "mpv"
                                                        (file))
                                                       (,(openwith-make-extension-regexp '("odt"
                                                                                           "ods"))
                                                        "libreoffice"
                                                        (file))
                                                       (,(openwith-make-extension-regexp '("xopp"))
                                                        "xournalpp"
                                                        (file))))
      (openwith-mode 1)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-openwith")

#+end_src

*** File management package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  (provide 'pg-file)

#+end_src

** Shell customization

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-shell.el

  ;;; pg-shell.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | eshell-git-prompt

Adds more detail to the prompt in eshell with custome themes.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-shell.el

  (straight-use-package 'eshell-git-prompt)
  (with-eval-after-load 'eshell
    (require 'eshell-git-prompt))
  (with-eval-after-load 'eshell-git-prompt
    (eshell-git-prompt-use-theme 'multiline2))

#+end_src

*** Package | eshell-syntax-highlighting

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-shell.el

  (straight-use-package 'eshell-syntax-highlighting)
  (with-eval-after-load 'eshell
    (require 'eshell-syntax-highlighting))
  (with-eval-after-load 'eshell-syntax-highlighting
    (customize-set-variable 'eshell-syntax-highlighting-global-mode t))

#+end_src

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-eshell-syntax-highlighting")

#+end_src

*** Package | esh-autosuggest

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-shell.el

  (straight-use-package 'esh-autosuggest)
  (with-eval-after-load 'eshell
    (unless (fboundp 'esh-autosuggest-mode)
      (autoload #'esh-autosuggest-mode "esh-autosuggest" nil t))
    (add-hook 'eshell-mode-hook #'esh-autosuggest-mode))
  (with-eval-after-load 'esh-autosuggest
    (customize-set-variable 'esh-autosuggest-delay 0.5))

#+end_src

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-esh-autosuggest")

#+end_src

*** Package | eshell

Some configurations to the built-in eshell.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-shell.el

  (defun pg/configure-eshell ()
    "Eshell setup."
    (with-eval-after-load 'evil
      (evil-define-key '(normal insert visual) eshell-mode-map
        (kbd "<home>") #'eshell-bol)
      (evil-normalize-keymaps))

    (with-eval-after-load 'corfu
      (corfu-mode))

    (require 'em-hist)
    (with-eval-after-load 'em-hist
      (pg/customize-set-variables
       '((eshell-history-size . 10000)
         (eshell-hist-ignoredups . t)))
      (require 'esh-cmd)
      (with-eval-after-load 'esh-cmd
        (add-hook 'eshell-pre-command-hook #'eshell-save-some-history)))

    (require 'esh-mode)
    (with-eval-after-load 'esh-mode
      (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
      (pg/customize-set-variables
       '((eshell-buffer-maximum-lines . 10000)
         (eshell-scroll-to-bottom-on-input . t)))))

  (require 'esh-mode)
  (with-eval-after-load 'esh-mode
    (add-hook 'eshell-first-time-mode-hook #'pg/configure-eshell))
  (unless (fboundp 'eshell)
    (autoload #'eshell "eshell" nil t))
  (with-eval-after-load 'eshell
    (require 'em-tramp)
    (customize-set-variable 'eshell-prefer-lisp-functions t))
  (with-eval-after-load 'general
    (pg/leader-keys
      "pe" '(eshell :which-key "eshell")))

#+end_src

*** Package | vterm

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-shell.el

  (unless pg/is-guix-system
    (straight-use-package 'vterm))
  (unless (fboundp 'vterm)
    (autoload #'vterm "vterm" nil t))
  (with-eval-after-load 'general
    (pg/leader-keys
      "pv" '(vterm :which-key "vterm")))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "emacs-vterm")

#+end_src

*** Shell customization package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-shell.el

  (provide 'pg-shell)

#+end_src

** Project Management and Version Control

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-project.el

  ;;; pg-project.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | projectile

Allows for git projects management. Accessed using the ~C-c p~ prefix. Some important notes:
- ~C-c p E~ - Allows creation of a local dirs dot file for pre-defining the values for some important other projectile variables.
  - If variables have not been set after this change then evaluate (~M-:~) the following function ~(hack-dir-local-variables)~.
- ~C-c p s r~ - Allows for use of the ~ripgrep~ command across the current reopository. Useful along with ~C-c C-o~ to pop out the results from the minibuffer into another buffer.
Note that the emacs built-in local dir creation can also be used and is more flexible.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-project.el

  (straight-use-package 'projectile)
  (require 'projectile)
  (add-hook 'lsp-mode-hook #'projectile-mode)
  (with-eval-after-load 'projectile
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (when (file-directory-p "~/Projects")
      (customize-set-variable 'projectile-project-search-path '("~/Projects")))
    (customize-set-variable 'projectile-switch-project-action #'projectile-dired)
    (if (boundp 'diminish)
        (diminish #'projectile-mode)
      (with-eval-after-load 'diminish
        (diminish #'projectile-mode)))
    (with-eval-after-load 'general
      (pg/leader-keys
        "p" '(:ignore t :which-key "project")
        "pf" '(projectile-find-file :which-key "find file")
        "ps" '(projectile-switch-project :which-key "switch project")
        "pr" '(projectile-run-project :which-key "run")
        "pc" '(projectile-compile-project :which-key "compile"))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-projectile") ;; old version 2.5.0

#+end_src

*** Package | magit

Allows for git commands to be applied to the current repository using the command ~C-x g~ which invokes a ~git status~ command with some additional information. Typing ~?~ invokes a list of possible commands, typing ~?~ again invokes the help function for the different commands and typing ~?~ a third time invokes the manual for the package.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-project.el

  (straight-use-package 'magit)
  (unless (fboundp 'magit-status)
    (autoload #'magit-status "magit-status" nil t))
  (with-eval-after-load 'magit-status
    (unless (featurep 'magit)
      (require 'magit)))
  (unless (fboundp 'magit-clone)
    (autoload #'magit-clone "magit-clone" nil t))
  (with-eval-after-load 'magit-clone
    (unless (featurep 'magit)
      (require 'magit)))
  (with-eval-after-load 'magit
    (customize-set-variable 'magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  (with-eval-after-load 'general
    (pg/leader-keys
      "g" '(:ignore t :which-key "git")
      "gs" '(magit-status :which-key "status")
      "gc" '(magit-clone :which-key "clone")))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-magit")

#+end_src

*** Package | git-gutter

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-project.el

  (straight-use-package 'git-gutter)
  (unless (fboundp 'git-gutter-mode)
    (autoload #'git-gutter-mode "git-gutter" nil t))
  (dolist (mode '(text-mode-hook
                  prog-mode-hook))
    (add-hook mode #'git-gutter-mode))
  (with-eval-after-load 'git-gutter
    (set-face-foreground 'git-gutter:added "LightGreen")
    (set-face-foreground 'git-gutter:modified "LightGoldenrod")
    (set-face-foreground 'git-gutter:deleted "LightCoral")
    (if (fboundp 'diminish)
        (diminish 'git-gutter-mode)
      (with-eval-after-load 'diminish
        (diminish 'git-gutter-mode))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-git-gutter")
  ;; (specification->package "emacs-git-gutter-fringe")

#+end_src

*** Package | forge

Adds git forges to magit.
Steps to get working:
- Run ~forge-pull~ at the current git repo

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-project.el

  (straight-use-package 'forge)
  (with-eval-after-load 'magit
    (require 'forge))
  (with-eval-after-load 'forge
    (customize-set-variable 'forge-add-default-bindings nil))
  (with-eval-after-load 'general
    (pg/leader-keys
      "gf" '(forge-pull :which-key "forge")))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-forge")

#+end_src

*** Project management and version control package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-project.el

  (provide 'pg-project)

#+end_src

** IDE Functionalities 

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  ;;; pg-programming.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | lsp-mode

Language Server Protocol for basic IDE functionalities. See [[https://emacs-lsp.github.io/lsp-mode/page/languages/][here]] for how to setup for different languages.
The ~lsp-ui-doc-focus-frame~ command allows to access the documentation frame of the pop-up.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (defun pg/lsp-mode-setup ()
    "Displays structure of cursor position for all buffers."
    (lsp-lens-mode)
    (lsp-headerline-breadcrumb-mode))

  (straight-use-package 'lsp-mode)
  (add-hook 'lsp-mode-hook #'pg/lsp-mode-setup)
  (unless (fboundp 'lsp)
    (autoload #'lsp "lsp-mode" nil t))
  (unless (fboundp 'lsp-deferred)
    (autoload #'lsp-deferred "lsp-mode" nil t))
  (with-eval-after-load 'lsp
    (require 'lsp-completion)
    (pg/customize-set-variables
     '((lsp-completion-provider . :none)
       (lsp-keymap-prefix . "C-c l")))
    (lsp-enable-which-key-integration t))
  (with-eval-after-load 'general
    (pg/leader-keys
      "l" '(:ignore t :which-key "lsp")))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-lsp-mode")

#+end_src

*** Package | lsp-ui

Displays useful doc on hover.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'lsp-ui)
  (unless (fboundp 'lsp-ui-mode)
    (autoload #'lsp-ui-mode "lsp-ui" nil t))
  (add-hook 'lsp-mode-hook #'lsp-ui-mode)
  (with-eval-after-load 'lsp-ui
    (pg/customize-set-variables
     '((lsp-ui-doc-position . bottom)
       (lsp-ui-doc-show-with-cursor . t)
       (lsp-ui-doc-include-signature . t))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-lsp-ui")

#+end_src

*** Package | lsp-treemacs

Tree views in emacs.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'lsp-treemacs)
  (with-eval-after-load 'lsp-mode
    (require 'lsp-treemacs))
  (with-eval-after-load 'lsp-treemacs
    (with-eval-after-load 'general
      (pg/leader-keys
        "lt" '(treemacs :which-key "tree")
        "lo" '(lsp-treemacs-symbols :which-key "outline")
        "le" '(lsp-treemacs-errors-list :which-key "errors"))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-lsp-treemacs")

#+end_src

*** Package | company

For auto-completions while coding.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
    "Configures company backend with yasnippet for autocomplete candidates."
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (straight-use-package 'company)
  (unless (fboundp 'company-mode)
    (autoload #'company-mode "company" nil t))
  (add-hook 'prog-mode-hook #'company-mode)
  (unless (fboundp 'company-complete-selection)
    (autoload #'company-complete-selection "company" nil t))
  (if (boundp 'company-active-map)
      (define-key company-active-map (kbd "<tab>") #'company-complete-selection)
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "<tab>") #'company-complete-selection)))
  (with-eval-after-load 'lsp-mode
    (unless (fboundp 'company-indent-or-complete-common)
      (autoload #'company-indent-or-complete-common "company" nil t))
    (define-key lsp-mode-map (kbd "<tab>") #'company-indent-or-complete-common))
  (with-eval-after-load 'company
    (pg/customize-set-variables
     '((company-minimum-prefix-length . 1)
       (company-idle-delay . 0.0)
       (company-tooltip-minimum-width . 40)
       (company-tooltip-maximum-width . 60)))
    (with-eval-after-load 'yasnippet
      (customize-set-variable 'company-backends (mapcar #'company-mode/backend-with-yas company-backends))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-company")

#+end_src

*** Package | company-box

Includes icons for company mode suggestions.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'company-box)
  (unless (fboundp 'company-box-mode)
    (autoload #'company-box-mode "company-box" nil t))
  (add-hook 'company-mode-hook #'company-box-mode)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-company-box")

#+end_src

*** Package | company-prescient

Remembers autocomplete selections.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'company-prescient)
  (with-eval-after-load 'company
    (require 'prescient)
    (with-eval-after-load 'prescient
      (require 'company-prescient)))
  (with-eval-after-load 'company-prescient
    (customize-set-variable 'company-prescient-mode 1))

#+end_src

*** Package | flycheck

Syntax checking.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'flycheck)
  (unless (fboundp 'flycheck-mode)
    (autoload #'flycheck-mode "flycheck" nil t))
  (add-hook 'lsp-mode-hook #'flycheck-mode)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-flycheck")

#+end_src

*** Package | dap-mode

Debugger Adaptor Protocol for IDE debugging commands. See [[https://emacs-lsp.github.io/dap-mode/page/configuration/][here]] for how to setup for different languages.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'dap-mode)
  (with-eval-after-load 'lsp-mode
    (require 'dap-mode))
  (with-eval-after-load 'dap-mode
    (pg/customize-set-variables
     '((dap-mode . 1)
       (dap-ui-mode . 1)
       (dap-ui-controls-mode . 1))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-dap-mode")

#+end_src

*** Package | plantuml-mode

Allows writing textual descriptions for creating uml diagrams

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'plantuml-mode)
  (with-eval-after-load 'plantuml-mode
    (pg/customize-set-variables
     `((plantuml-indent-level . 4)
       (plantuml-jar-path . ,(expand-file-name "~/.guix-extra-profiles/emacs/emacs/share/java/plantuml.jar"))
       (plantuml-default-exec-mode jar))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "plantuml")
  ;; (specification->package "emacs-plantuml-mode")

#+end_src

*** Package | comment-dwin-2

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'comment-dwim-2)
  (unless (fboundp 'comment-dwim-2)
    (autoload #'comment-dwim-2 "comment-dwim-2" nil t))
  (global-set-key (kbd "M-/") #'comment-dwim-2)
  (unless (fboundp 'org-comment-dwim-2)
    (autoload #'org-comment-dwim-2 "comment-dwim-2" nil t))
  (define-key org-mode-map (kbd "M-/") #'org-comment-dwim-2)
  
#+end_src

*** Package | yasnippet

Allows for code snippets for different languages.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'yasnippet)
  (unless (fboundp 'yas-minor-mode)
    (autoload #'yas-minor-mode "yasnippet" nil t))
  (add-hook 'prog-mode-hook #'yas-minor-mode)
  (add-hook 'yas-minor-mode-hook #'(lambda ()
                                     (yas-activate-extra-mode 'fundamental-mode)))
  (with-eval-after-load 'yasnippet
    (yas-global-mode)
    (if (fboundp 'diminish)
        (diminish 'yas-minor-mode)
      (with-eval-after-load 'diminish)
      (diminish 'yas-minor-mode)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-yasnippet")

#+end_src

*** Package | yasnippet-snippets

Collection of code snippets for yasnippet.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'yasnippet-snippets)
  (with-eval-after-load 'yasnippet
    (require 'yasnippet-snippets))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-yasnippet-snippets")

#+end_src

*** IDE functionalities package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (provide 'pg-programming)

#+end_src

*** Languages

Some general tools for programming:

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/build-tools.scm

  (packages->manifest
   (list
    (specification->package "meson")
    (specification->package "ninja")
    (specification->package "autoconf")
    (specification->package "automake")
    (specification->package "libtool")
    (specification->package "gmime")
    (specification->package "xapian")
    (specification->package "docker")
    ;; (specification->package "gtk+")
    ;; (specification->package "gtk+:bin")
    ;; (specification->package "webkitgtk")
    ;; (specification->package "guile")
    (specification->package "pkg-config")
    (specification->package "glib")
    (specification->package+output "glib:bin")
    ;; (specification->package "check")
    (specification->package "make")
    (specification->package "cmake")))

#+end_src

**** Alloy

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-alloy.el

  ;;; pg-programming-alloy.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** HOLD Package | alloy-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-alloy.el

  ;; (straight-use-package 'alloy-mode)
  ;; (add-hook 'alloy-mode-hook #'(lambda ()
  ;;                                (setq indent-tabs-mode nil)))
  ;; (with-eval-after-load 'alloy-mode
  ;;   (customize-set-variable 'alloy-base-offset 4))

#+end_src

***** Alloy package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-alloy.el

  (provide 'pg-programming-alloy)

#+end_src

**** C/C++/Objective-C

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-cc.el

  ;;; pg-programming-cc.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | cc-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-cc.el

  (with-eval-after-load 'cc-mode
    (customize-set-variable 'company-clang-executable (concat (getenv "GUIX_EXTRA_PROFILES") "/cc/cc/bin/clang")))

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/cc.scm

  (packages->manifest
   (list
    (specification->package "gcc-toolchain@10.3.0")
    (specification->package "texinfo")
    (specification->package "glibc")
    (specification->package "llvm")
    (specification->package "clang")
    (specification->package "ccls")
    (specification->package "lld")
    (specification->package "file")
    (specification->package "elfutils")
    (specification->package "go")))

#+end_src

***** Package | cc-vars

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-cc.el

  (with-eval-after-load 'cc-mode
    (require 'cc-vars))
  (with-eval-after-load 'cc-vars
    (customize-set-variable 'c-basic-offset 4))

#+end_src

***** Package | company-c-headers

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-cc.el

  (straight-use-package 'company-c-headers)
  (with-eval-after-load 'company
    (with-eval-after-load 'cc-mode
      (require 'company-c-headers)))
  (with-eval-after-load 'company-c-headers
    (add-to-list 'company-backends '(company-c-headers :with company-yasnippet)))

#+end_src

***** Package | ccls

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-cc.el

  (straight-use-package 'ccls)
  (with-eval-after-load 'cc-mode
    (with-eval-after-load 'lsp-mode
      (require 'ccls)))
  (dolist (mode '(c-mode-hook
                  c++-mode-hook
                  objc-mode-hook))
    (add-hook mode #'lsp-deferred))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-ccls")

#+end_src

***** C languages package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-cc.el

  (provide 'pg-programming-cc)

#+end_src

**** Common Lisp

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-commonlisp.el

  ;;; pg-programming-commonlisp.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | sly

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-commonlisp.el

  (straight-use-package 'sly)
  (unless (fboundp 'sly)
    (autoload #'sly "sly" nil t))
  (with-eval-after-load 'sly
    (customize-set-variable 'inferior-lisp-program "sbcl"))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-sly")

#+end_src

***** Common lisp package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-commonlisp.el

  (provide 'pg-programming-commonlisp)

#+end_src

**** Css

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-css.el

  ;;; pg-programming-css.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | lsp-css

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-css.el

  (unless (fboundp 'lsp-deferred)
    (autoload #'lsp-deferred "lsp-mode" nil t))
  (dolist (mode '(css-mode-hook
                  less-css-mode-hook
                  scss-mode-hook))
    (add-hook mode #'lsp-deferred))

#+end_src

***** Css package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-css.el

  (provide 'pg-programming-css)

#+end_src

**** Docker

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-docker.el

  ;;; pg-programming-docker.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | docker

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-docker.el

  (straight-use-package 'docker)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-docker")

#+end_src

***** Package | dockerfile-mode
     
#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-docker.el

  (straight-use-package 'dockerfile-mode)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-dockerfile-mode")

#+end_src

***** Docker package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-docker.el

  (provide 'pg-programming-docker)

#+end_src

**** Emacs Lisp

***** Package | ielm

#+begin_src emacs-lisp

  (unless (fboundp 'corfu-mode)
    (autoload #'corfu-mode "corfu" nil t))
  (add-hook 'ielm-mode-hook #'corfu-mode)

#+end_src

**** Git

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-git.el

  ;;; pg-programming-git.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | git-modes

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-git.el

  (straight-use-package 'git-modes)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-git-modes")

#+end_src

***** Git package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-git.el

  (provide 'pg-programming-git)

#+end_src

**** Groovy

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-groovy.el

  ;;; pg-programming-groovy.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | groovy-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-groovy.el

  (straight-use-package '(groovy-emacs-modes :type git
                                             :host github
                                             :repo "Groovy-Emacs-Modes/groovy-emacs-modes"))

#+end_src

***** Groovy package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-groovy.el

  (provide 'pg-programming-groovy)

#+end_src

**** Haskell

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-haskell.el

  ;;; pg-programming-haskell.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | haskell-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-haskell.el

  (straight-use-package 'haskell-mode)
  (with-eval-after-load 'haskell-mode
    (customize-set-variable 'haskell-process-type 'ghci))

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/haskell.scm

  (packages->manifest
   (list
    (specification->package "ghc@8")
    (specification->package+output "ghc@8:doc")))

#+end_src

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-haskell-mode")

#+end_src

***** Package | lsp-haskell

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-haskell.el

  ;; (straight-use-package 'lsp-haskell)
  ;; (with-eval-after-load 'haskell-mode
  ;;   (require 'lsp-haskell))
  ;; (with-eval-after-load 'lsp-haskell
  ;;   (dolist (mode '(haskell-mode-hook
  ;;                   haskell-literate-mode-hook))
  ;;     (add-hook mode #'lsp-deferred)))

#+end_src

***** Haskell package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-haskell.el

  (provide 'pg-programming-haskell)

#+end_src

**** Java

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-java.el

  ;;; pg-programming-java.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | lsp-java

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-java.el

  (defun pg/spring-boot-properties ()
    "Makes appropriate calls when opening a spring properties file."
    (when (not (equal nil (string-match-p "application\\(-?[^-]+\\)?\\.properties"
                                          (file-name-nondirectory (buffer-file-name)))))
      (progn (run-hooks 'prog-mode-hook)
             (lsp-deferred))))

  (straight-use-package 'lsp-java)
  (unless (fboundp 'lsp-deferred)
    (autoload #'lsp-deferred "lsp-mode" nil t))
  (add-hook 'java-mode-hook #'lsp-deferred)
  (unless (fboundp 'lsp-java-boot-lens-mode)
    (autoload #'lsp-java-boot-lens-mode "lsp-java-boot" nil t))
  (add-hook 'java-mode-hook #'lsp-java-boot-lens-mode)
  (with-eval-after-load 'lsp-mode
    (require 'lsp-java))
  (with-eval-after-load 'lsp-java
    (add-hook 'find-file-hook #'pg/spring-boot-properties)
    (dolist (feature '(dap-java
                       lsp-java-boot))
      (require feature))
    (define-key lsp-mode-map (kbd "C-<return>") #'lsp-execute-code-action)
    (pg/customize-set-variables
     `((lsp-java-configuration-runtimes . [( :name "JavaSE-17"
                                             :path ,(concat (getenv "GUIX_EXTRA_PROFILES") "/java/java")
                                             :default t)])
       (lsp-java-vmargs . ,(list "-noverify" "--enable-preview"))
       (lsp-java-java-path . "java")
       (lsp-java-import-gradle-java-home . ,(concat (getenv "GUIX_EXTRA_PROFILES") "/java/java")))))

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/java.scm

  (use-modules
   (guix inferior)
   (guix channels)
   (srfi srfi-1))

  (define channels
    (list
     (channel (name 'guix)
              (url "https://git.savannah.gnu.org/git/guix.git")
              (commit "d039f9dc151eed8017a7f54682dbf713221b8005"))))

  (define inferior
    (inferior-for-channels channels))

  (packages->manifest
   (list
    (specification->package+output "openjdk@17:jdk")
    (specification->package+output "openjdk@17:doc")
    (first (lookup-inferior-packages inferior "maven"))))

#+end_src

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-lsp-java")

#+end_src

***** Java package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-java.el

  (provide 'pg-programming-java)

#+end_src

**** LaTeX

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-tex.el

  ;;; pg-programming-tex.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | auctex

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-tex.el

  (straight-use-package 'auctex)
  (add-hook 'TeX-mode-hook #'(lambda nil (run-hooks 'prog-mode-hook)))
  (unless (fboundp 'TeX-revert-document-buffer)
    (autoload #'TeX-revert-document-buffer "tex-mode" nil t))
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  (unless (fboundp 'latex-mode)
    (autoload #'latex-mode "tex-mode" nil t))
  (add-to-list 'auto-mode-alist '("\\.tex$" . latex-mode))
  (with-eval-after-load 'tex
    (pg/customize-set-variables
     '((latex-run-command . "pdflatex")
       (TeX-view-program-selection . ((output-pdf "PDF Tools")))
       (TeX-source-correlate-start-server . t)))
    (put 'tex-mode 'derived-mode-parent 'prog-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/latex.scm

  (packages->manifest
   (list
    (specification->package "rubber")
    (specification->package "texlive")))

#+end_src

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-auctex")

#+end_src

***** HOLD Package | company-auctex

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-tex.el

  ;; (straight-use-package 'company-auctex)
  ;; (with-eval-after-load 'company
  ;;   (with-eval-after-load 'tex
  ;;     (require 'company-auctex)))
  ;; (with-eval-after-load 'company-auctex
  ;;   (add-to-list 'company-backends '(company-auctex :with company-yasnippet)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-company-auctex")

#+end_src

***** LaTeX package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-tex.el

  (provide 'pg-programming-tex)

#+end_src

**** LMC

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-lmc.el

  ;;; pg-programming-lmc.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | lmc-java

Custom syntax highlighting for LMC assembly language.
      
#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-lmc.el

  (defvar lmc-java-mode-hook nil)

  (add-to-list 'auto-mode-alist '("\\.lmc\\'" . lmc-java-mode))

  (defconst lmc-java-font-lock-defaults
    (list
     '("#.*" . font-lock-comment-face)
     '("\\<\\(ADD\\|BR[PZ]?\\|DAT\\|HLT\\|IN\\|LDA\\|OUT\\|S\\(?:TO\\|UB\\)\\)\\>" . font-lock-keyword-face)
     '("^\\w+" . font-lock-function-name-face)
     '("\\b[0-9]+\\b" . font-lock-constant-face))
    "Minimal highlighting expressions for lmc mode")

  (defvar lmc-java-mode-syntax-table
    (let ((st (make-syntax-table)))
      (modify-syntax-entry ?# ". 1b" st)
      (modify-syntax-entry ?\n "> b" st)
      st)
    "Syntax table for lmc-mode")

  (define-derived-mode lmc-java-mode prog-mode "LMC"
    "Major mode for editing lmc files"
    :syntax-table lmc-java-mode-syntax-table

    (set (make-local-variable 'font-lock-defaults) '(lmc-java-font-lock-defaults))

    (setq-local comment-start "# "
                comment-end ""
                indent-tabs-mode nil))

#+end_src

***** Package | lmc

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-lmc.el

  (define-derived-mode pg/lmc-asm-mode prog-mode "LMC-Asm"
    "Major mode to edit LMC assembly code."
    :syntax-table emacs-lisp-mode-syntax-table
    (set (make-local-variable 'font-lock-defaults)
         '(lmc-asm-font-lock-keywords))
    (set (make-local-variable 'indent-line-function)
         #'lmc-asm-indent-line)
    (set (make-local-variable 'indent-tabs-mode) nil)
    (set (make-local-variable 'imenu-generic-expression)
         lmc-asm-imenu-generic-expression)
    (set (make-local-variable 'outline-regexp) lmc-asm-outline-regexp)
    (add-hook 'completion-at-point-functions #'lmc-asm-completion nil t)
    (set (make-local-variable 'comment-start) "#")
    (set (make-local-variable 'comment-start-skip)
         "\\(\\(^\\|[^\\\\\n]\\)\\(\\\\\\\\\\)*\\)#+ *"))

  (straight-use-package 'lmc)
  (fset #'lmc-asm-mode #'pg/lmc-asm-mode)

#+end_src

***** Lmc package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-lmc.el

  (provide 'pg-programming-lmc)

#+end_src

**** Markdown

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-markdown.el

  ;;; pg-programming-markdown.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | markdown-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-markdown.el

  (straight-use-package 'markdown-mode)
  (add-hook 'gfm-view-mode-hook (lambda ()
                                  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                                                     (markdown-code-face (:height 1.0) org-code)))))
  (with-eval-after-load 'markdown-mode
    (dolist (face '((markdown-header-face-1 . 1.9)
                    (markdown-header-face-2 . 1.7)
                    (markdown-header-face-3 . 1.5)
                    (markdown-header-face-4 . 1.3)
                    (markdown-header-face-5 . 1.1)
                    (markdown-header-face-6 . 1.05)))
      (set-face-attribute (car face) nil :weight 'regular :height (cdr face))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-markdown-mode")

#+end_src

***** Markdown package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-markdown.el

  (provide 'pg-programming-markdown)

#+end_src

**** MIPS

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-mips.el

  ;;; pg-programming-mips.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | mips-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-mips.el

  (straight-use-package 'mips-mode)
  (unless (fboundp 'mips-mode)
    (autoload #'mips-mode "mips-mode" nil t))
  (add-to-list 'auto-mode-alist '("\\.asm$" . mips-mode))
  (with-eval-after-load 'mips-mode
    (customize-set-variable 'mips-tab-width 4))

#+end_src

***** Mips package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-mips.el

  (provide 'pg-programming-mips)

#+end_src

**** Perl

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/perl.scm

  (packages->manifest
   (list
    (specification->package "perl@5.34")))

#+end_src

**** Prolog

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-prolog.el

    ;;; pg-programming-prolog.el -*- lexical-binding: t; -*-

#+end_src

***** Package | prolog

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-prolog.el

    (unless (fboundp 'prolog-mode)
      (autoload #'prolog-mode "prolog" nil t))

#+end_src

***** Prolog package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-prolog.el

  (provide 'pg-programming-prolog)

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/prolog.scm

  (packages->manifest
   (list
    (specification->package "swi-prolog")))

#+end_src

**** Python

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-python.el

  ;;; pg-programming-python.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | python

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-python.el

  (unless (fboundp 'lsp-deferred)
    (autoload #'lsp-deferred "lsp-mode" nil t))
  (add-hook 'python-mode-hook #'lsp-deferred)
  (with-eval-after-load 'python
    (pg/customize-set-variables
     `((python-fill-docstring-style . django)
       (python-shell-virtualenv-path . ,(expand-file-name "~/.conda/envs/ift1016/"))
       (python-indent-offset . 4))))

#+end_src

***** Package | lsp-pyright

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-python.el

  (straight-use-package 'lsp-pyright)
  (with-eval-after-load 'python
    (with-eval-after-load 'lsp-mode
      (require 'lsp-pyright)))

  (with-eval-after-load 'lsp-pyright
    (pg/customize-set-variables
     `((lsp-pyright-venv-path . ,(expand-file-name "~/.conda/envs/ift1016/"))
       (lsp-pyright-venv-directory . "envs"))))

#+end_src

***** Package | dap-python

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-python.el

  (with-eval-after-load 'python
    (with-eval-after-load 'lsp-mode
      (require 'dap-python)))
  (with-eval-after-load 'dap-python
    (customize-set-variable 'dap-python-debugger 'debugpy))

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/python.scm

  (packages->manifest
   (list
    ;; (specification->package "python")
    (specification->package "mesa")
    (specification->package "pciutils")
    (specification->package "alsa-lib")
    (specification->package "libsm")
    (specification->package "xcb-util-wm")
    (specification->package "xcb-util-image")
    (specification->package "xcb-util-keysyms")
    (specification->package "xcb-util-renderutil")
    (specification->package "conda")))

#+end_src

***** TODO Package | jupyter

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-python.el

  ;; (straight-use-package 'jupyter)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-jupyter")

#+end_src

***** Python package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-python.el

  (provide 'pg-programming-python)

#+end_src

**** SMTLibv2

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-smtlibv2.el

  ;;; pg-programming-smtlibv2.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** HOLD Package | z3-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-smtlibv2.el

  ;; (straight-use-package 'z3-mode)

#+end_src

***** SMTLibv2 package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-smtlibv2.el

  (provide 'pg-programming-smtlibv2)

#+end_src

**** SQL

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-sql.el

  ;;; pg-programming-sql.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | sql

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-sql.el

  (unless (fboundp 'lsp-deferred)
    (autoload #'lsp-deferred "lsp-mode" nil t))
  (add-hook 'sql-mode-hook #'lsp-deferred)
  (unless (fboundp 'sqlind-minor-mode)
    (autoload #'sqlind-minor-mode "sql-indent" nil t))
  (add-hook 'sql-mode-hook #'sqlind-minor-mode)
  (add-hook 'sql-interactive-mode-hook #'(lambda ()
                                           (toggle-truncate-lines t)))
  (with-eval-after-load 'sql
    (customize-set-variable 'sql-connection-alist
                            '((main (sql-product 'postgres)
                                    (sql-port 5432)
                                    (sql-server "localhost")
                                    (sql-user "phil-gab99")
                                    (sql-password (pg/lookup-password :host "localhost" :user "phil-gab99" :port 5432))
                                    (sql-database "phil-gab99"))
                              (school (sql-product 'postgres)
                                      (sql-port 5432)
                                      (sql-server "localhost")
                                      (sql-user "phil-gab99")
                                      (sql-password (pg/lookup-password :host "localhost" :user "phil-gab99" :port 5432))
                                      (sql-database "ift2935")))))

#+end_src


*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/sql.scm

  (packages->manifest
   (list
    (specification->package "postgresql")
    (specification->package "sqls")))

#+end_src

***** Package | lsp-sql

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-sql.el

  (with-eval-after-load 'sql
    (with-eval-after-load 'lsp-mode
      (require 'lsp-sqls)))
  (with-eval-after-load 'lsp-sqls
    (customize-set-variable 'lsp-sqls-connections
                            `(,(cl-pairlis '(driver dataSourceName)
                                           `(("postgresql") ,(concat "host=127.0.0.1 port=5432 user=phil-gab99 password="
                                                                     (pg/lookup-password :host "localhost"
                                                                                         :user "phil-gab99"
                                                                                         :port 5432)
                                                                     " dbname=phil-gab99 sslmode=disable")))
                              ,(cl-pairlis '(driver dataSourceName)
                                           `(("postgresql") ,(concat "host=127.0.0.1 port=5432 user=phil-gab99 password="
                                                                     (pg/lookup-password :host "localhost"
                                                                                         :user "phil-gab99"
                                                                                         :port 5432)
                                                                     " dbname=ift2935 sslmode=disable"))))))

#+end_src

***** Package | sql-indent

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-sql.el

  (straight-use-package 'sql-indent)
  (with-eval-after-load 'sql
    (require 'sql-indent))
  (with-eval-after-load 'sql-indent
    (setq-default sqlind-basic-offset 4))

#+end_src

***** SQL package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-sql.el

  (provide 'pg-programming-sql)

#+end_src

**** TypeScript

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-typescript.el

  ;;; pg-programming-typescript.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | typescript-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-typescript.el

  (straight-use-package 'typescript-mode)
  (unless (fboundp 'typescript-mode)
    (autoload #'typescript-mode "typescript-mode" nil t))
  (add-to-list 'auto-mode-alist '("\\.ts$" . typescript-mode))
  (unless (fboundp 'lsp-deferred)
    (autoload #'lsp-deferred "lsp-mode" nil t))
  (add-hook 'typescript-mode-hook #'lsp-deferred)

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/web-design.scm

  (packages->manifest
   (list
    (specification->package "node")))

#+end_src

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-typescript-mode")

#+end_src

***** Package | dap-node

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-typescript.el

  (with-eval-after-load 'typescript-mode
    (with-eval-after-load 'lsp-mode
      (require 'dap-node)))
  (with-eval-after-load 'dap-node
    (dap-node-setup))

#+end_src

***** Typescript package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-typescript.el

  (provide 'pg-programming-typescript)

#+end_src

**** VHDL

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-vhdl.el

  ;;; pg-programming-vhdl.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** TODO Package | vhdl-tools

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-vhdl.el

  ;; (unless (fboundp 'flycheck-define-checker)
  ;;   (autoload #'flycheck-define-checker "flycheck"))
  ;; (flycheck-define-checker vhdl-tool
  ;;   "A VHDL syntax checker, type checker and linter using VHDL-Tool."
  ;;   :command ("vhdl-tool" "client" "lint" "--compact" "--stdin" "-f" source)
  ;;   :standard-input t
  ;;   :modes (vhdl-mode)
  ;;   :error-patterns
  ;;   ((warning line-start (file-name) ":" line ":" column ":w:" (message) line-end)
  ;;    (error line-start (file-name) ":" line ":" column ":e:" (message) line-end)))

  ;; (straight-use-package 'vhdl-tools)
  ;; (with-eval-after-load 'lsp-mode
  ;;   (require 'vhdl-tools))
  ;; (with-eval-after-load 'vhdl-tools
  ;;   (add-hook 'vhdl-mode-hook #'lsp-deferred)
  ;;   (customize-set-variable 'lsp-vhdl-server-path (expand-file-name "~/.emacs.d/lsp-servers/vhdl-tool"))
  ;;   (with-eval-after-load 'flycheck
  ;;     (add-to-list 'flycheck-checkers #'vhdl-tool)))

#+end_src

***** VHDL package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-vhdl.el

  (provide 'pg-programming-vhdl)

#+end_src

**** YAML

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-yaml.el

  ;;; pg-programming-yaml.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | yaml-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-yaml.el

  (straight-use-package 'yaml-mode)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-yaml-mode")

#+end_src

***** YAML package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-yaml.el

  (provide 'pg-programming-yaml)

#+end_src

** Notification

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-notification.el

  ;;; pg-notification.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | alert

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-notification.el

  (unless pg/is-windows
    (straight-use-package 'alert)
    (require 'alert)
    (with-eval-after-load 'alert
      (customize-set-variable 'alert-default-style 'notifications)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-alert")

#+end_src

*** Notification package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-notification.el

  (provide 'pg-notification)

#+end_src

** Org Mode

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  ;;; pg-org.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | org

Org mode package for writing structured documents and more. Here are some useful things to know about org files.
- ~#+title: Title~ - Sets the title of a document.
- ~M-left~ / ~M-right~ - Promotes/Demotes position of headers and bullet points.
- ~M-up~ / ~M-down~ - Moves the line above or below its current position, respecting the rank.
- ~S-right~ / ~S-left~ - Cycles through different states of headers and bullet points.
- ~M-RET~ - Adds another entry below the current header/bullet point of the same rank. 
- ~C-RET~ - Adds another entry after the current section occupied by the current header of the same rank.
  
#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (defun org-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the `img'
      directory with respect to the org-buffer's location and insert a link to
      this file. Requires `imageMagick' for undertaking screenshots."
    (interactive)
    (setq imgpath "./img/")
    (if (not (f-dir-p imgpath))
        (make-directory imgpath))
    (setq filename
          (concat
           (make-temp-name
            (concat imgpath
                    (let ((bname (string-trim (shell-command-to-string (concat "basename -s .org " buffer-file-name)))))
                      (with-temp-buffer
                        (call-process "echo" nil t nil "-n" bname)
                        (buffer-string)))
                    "_"
                    (format-time-string "%Y%m%d_%H%M%S_"))) ".png"))
    (call-process "import" nil nil nil filename)
    (insert (concat "[[" filename "]]"))
    (org-display-inline-images))

  (defun org-csv-to-table (beg end)
    "Insert a file into the current buffer at point, and convert it to an org
      table."
    (interactive (list (mark) (point)))
    (org-table-convert-region beg end ","))

  (defun pg/org-babel-tangle-config ()
    "Automatic tangle of org files."
    (when (eq major-mode #'org-mode)
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (defun pg/org-mode-setup ()
    "Define some behaviours for the major org-mode."
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (diminish 'org-indent-mode)
    (setq-local evil-auto-indent nil))

  (straight-use-package 'org)
  (require 'org)
  (add-hook 'org-mode-hook #'pg/org-mode-setup)
  (add-hook 'org-mode-hook #'(lambda ()
                               (add-hook 'after-save-hook #'pg/org-babel-tangle-config)))
  (with-eval-after-load 'org
    (pg/customize-set-variables
     `((org-ellipsis . " ▾")
       (org-hide-emphasis-markers . t)
       (org-agenda-start-with-log-mode . t)
       (org-log-done . time)
       (org-log-into-drawer . t)
       (org-deadline-warning-days . 7)
       (org-todo-keywords . ((sequence "TODO(t)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k)")))
       (org-plantuml-jar-path . "~/.guix-extra-profiles/emacs/emacs/share/java/plantuml.jar")
       (org-babel-python-command . "python3")
       (org-confirm-babel-evaluate . nil)
       (org-agenda-exporter-settings . ((ps-left-header (org-agenda-write-buffer-name))
                                        (ps-right-header ("/pagenumberstring load" ,(lambda ()
                                                                                      (format-time-string "%d/%m/%Y"))))
                                        (ps-font-size (12 . 11))
                                        (ps-top-margin 55)
                                        (ps-left-margin 35)
                                        (ps-right-margin 30)))))

    (font-lock-add-keywords 'org-mode ;; Replace '-' with bullets
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region
                                             (match-beginning 1) (match-end 1) "•"))))))
    (require 'org-indent)
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.0)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'regular :height (cdr face)))

    (org-babel-do-load-languages ;; Loads languages to be executed by org-babel
     'org-babel-load-languages '((emacs-lisp . t)
                                 (java . t)
                                 (shell . t)
                                 (plantuml . t)
                                 ;; (jupyter . t)
                                 (python . t)))

    (require 'org-tempo) ;; Allows defined snippets to expand into appropriate code blocks
    (dolist (template '(("sh" . "src sh")
                        ("java" . "src java")
                        ("als" . "src alloy")
                        ("puml" . "src plantuml")
                        ("vhd" . "src vhdl")
                        ("asm" . "src mips")
                        ("lmc" . "src lmc-java")
                        ("cc" . "src c")
                        ("el" . "src emacs-lisp")
                        ("hs" . "src haskell")
                        ("py" . "src python")
                        ("sql" . "src sql")))
      (add-to-list 'org-structure-template-alist template))

    (dolist (src '(("als" . alloy)
                   ("lmc-java" . lmc-java)
                   ("plantuml" . plantuml)))
      (add-to-list 'org-src-lang-modes src))

    (with-eval-after-load 'general
      (pg/leader-keys
        "o" '(:ignore t :which-key "org")
        "os" '(org-screenshot :which-key "screenshot")
        "oc" '(org-capture :which-key "capture")
        "oa" '(org-agenda :which-key "agenda")
        "ot" '(org-todo-list :which-key "todos")
        "ol" '(:ignore t :which-key "links")
        "olo" '(org-open-at-point :which-key "open")
        "olb" '(org-mark-ring-goto :which-key "back")))

    (unless pg/is-termux
      (pg/customize-set-variables
       `((org-agenda-files . ("~/Sync/Agenda/"))
         (org-link-frame-setup . ((vm . vm-visit-folder-other-frame)
                                  (vm-imap . vm-visit-imap-folder-other-frame)
                                  (gnus . org-gnus-no-new-news)
                                  (file . find-file)
                                  (wl . wl-other-frame)))
         (org-agenda-custom-commands . (("d" "Dashboard"
                                         ((agenda ""
                                                  ((org-deadline-warning-days 7)))
                                          (todo "TODO"
                                                ((org-agenda-overriding-header "Tasks")))
                                          (tags-todo "agenda/ACTIVE"
                                                     ((org-agenda-overriding-header "Active Tasks")))))

                                        ("Z" "TODOs"
                                         ((todo "TODO"
                                                ((org-agenda-overriding-header "Todos")))))

                                        ("m" "Misc" tags-todo "other")

                                        ("s" "Schedule" agenda ""
                                         ((org-agenda-files org-agenda-files))
                                         ("~/Documents/Schedule-S6.pdf"))

                                        ("w" "Work Status"
                                         ((todo "WAIT"
                                                ((org-agenda-overriding-header "Waiting")
                                                 (org-agenda-files org-agenda-files)))
                                          (todo "REVIEW"
                                                ((org-agenda-overriding-header "In Review")
                                                 (org-agenda-files org-agenda-files)))
                                          (todo "HOLD"
                                                ((org-agenda-overriding-header "On Hold")
                                                 (org-agenda-todo-list-sublevels nil)
                                                 (org-agenda-files org-agenda-files)))
                                          (todo "ACTIVE"
                                                ((org-agenda-overriding-header "Active")
                                                 (org-agenda-files org-agenda-files)))
                                          (todo "COMPLETED"
                                                ((org-agenda-overriding-header "Completed")
                                                 (org-agenda-files org-agenda-files)))
                                          (todo "CANC"
                                                ((org-agenda-overriding-header "Cancelled")
                                                 (org-agenda-files org-agenda-files)))))))
         (org-capture-templates . (("t" "Tasks / Projects")

                                   ("tt" "Task" entry
                                    (file+olp "~/Sync/Agenda/Tasks.org" "Active")
                                    "* TODO %? :task:\nDEADLINE: %U\n  %a\n  %i" :empty-lines 1)

                                   ("j" "Meetings")
                                   ("jm" "Meeting" entry
                                    (file+olp "~/Sync/Agenda/Tasks.org" "Waiting")
                                    "* TODO %? \nSCHEDULED: %U\n" :empty-lines 1)

                                   ("m" "Email Workflow")
                                   ("mr" "Follow Up" entry
                                    (file+olp "~/Sync/Agenda/Mail.org" "Follow up")
                                    "* TODO %a\nDEADLINE: %U%?\n %i" :empty-lines 1)))
         (org-format-latex-options . ,(plist-put org-format-latex-options :scale 1.5))))))


#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-org")

#+end_src

*** Package | org-appear

Toggles visibility of emphasis markers.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (straight-use-package 'org-appear)
  (unless (fboundp 'org-appear-mode)
    (autoload #'org-appear-mode "org-appear" nil t))
  (add-hook 'org-mode-hook #'org-appear-mode)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-org-appear")

#+end_src

*** Package | org-bullets

Customizes the heading bullets.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (straight-use-package 'org-bullets)
  (unless (fboundp 'org-bullets-mode)
    (autoload #'org-bullets-mode "org-bullets" nil t))
  (add-hook 'org-mode-hook #'org-bullets-mode)
  (with-eval-after-load 'org-bullets
    (customize-set-variable 'org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-org-bullets")

#+end_src

*** Package | org-tree-slide

Allows for creation of slideshow presentations in emacs with org mode. The ~org-beamer-export-to-pdf~ command can be used to export the presentation as a pdf file - it requires ~pdflatex~. More detail [[https://orgmode.org/worg/exporters/beamer/tutorial.html][here]].

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (defun pg/presentation-setup ()
    "Setup before starting org presentation."
    (org-display-inline-images)
    (setq-local doom-modeline-minor-modes t
                org-format-latex-options (plist-put org-format-latex-options :scale 2.5)
                face-remapping-alist '((default (:height 1.75) default)
                                       (org-table (:height 1.0) org-table)
                                       (org-verbatim (:height 1.0) org-verbatim)
                                       (org-code (:height 1.0) org-code)
                                       (org-block (:height 1.0) org-block)))
    (org-latex-preview)
    (variable-pitch-mode 1))

  (defun pg/presentation-end ()
    "Cleanup after ending org presentation."
    (variable-pitch-mode 0)
    (setq-local doom-modeline-minor-modes nil
                org-format-latex-options (plist-put org-format-latex-options :scale 1.5)
                face-remapping-alist '((default variable-pitch default)))
    (org-latex-preview))

  (straight-use-package 'org-tree-slide)
  (unless (fboundp 'org-tree-slide-mode)
    (autoload #'org-tree-slide-mode "org-tree-slide" nil t))
  (with-eval-after-load 'general
    (pg/leader-keys
      "op" '(org-tree-slide-mode :which-key "slide")))
  (with-eval-after-load 'org-tree-slide
    (dolist (command '(org-tree-slide-before-move-next-hook
                       org-tree-slide-before-move-previous-hook))
      (add-hook command #'org-latex-preview))
    (add-hook 'org-tree-slide-play-hook #'pg/presentation-setup)
    (add-hook 'org-tree-slide-stop-hook #'pg/presentation-end)
    (pg/customize-set-variables
     '((org-tree-slide-activate-message . "Presentation started")
       (org-tree-slide-deactivate-message . "Presentation ended")
       (org-tree-slide-breadcrumbs . " > ")
       (org-tree-slide-header . t)
       (org-image-actual-width . nil))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-org-tree-slide")

#+end_src

*** Package | ox-reveal

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (straight-use-package 'ox-reveal)
  (unless (fboundp 'org-reveal-export-to-html)
    (autoload #'org-reveal-export-to-html "ox-reveal" nil t))
  (with-eval-after-load 'ox-reveal
    (pg/customize-set-variables
     '((org-reveal-root . "https://cdn.jsdelivr.net/npm/reveal.js")
       (org-reveal-hlevel . 1)
       (org-export-headline-levels . 6)
       (org-reveal-theme . "league"))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-ox-reveal")

#+end_src

*** Package | org-notify

Handles notifications of scheduled tasks.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (unless pg/is-windows
    (straight-use-package 'org-notify)
    (with-eval-after-load 'org
      (require 'org-notify))
    (with-eval-after-load 'org-notify
      (org-notify-start)
      (setq org-notify-map nil)
      (org-notify-add 'default '(:time "1w" :actions notify/window :period "1h" :duration 5))
      (org-notify-add 'meeting '(:time "1w" :actions email :period "1d"))))

  ;; (org-notify-add 'appt
  ;;                 '(:time "-1s" :period "20s" :duration 10 :actions (-message -ding))
  ;;                 '(:time "15m" :period "2m" :duration 100 :actions -notify)
  ;;                 '(:time "2h" :period "5m" :actions -message)
  ;;                 '(:time "3d" :actions -email))

#+end_src

*** Package | org-msg

Allows for markup language when composing email

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (straight-use-package 'org-msg)
  (unless (fboundp 'org-msg-mode)
    (autoload #'org-msg-mode "org-msg" nil t))
  (add-hook 'mu4e-compose-pre-hook #'org-msg-mode)
  (with-eval-after-load 'org-msg
    (customize-set-variable 'org-msg-signature (concat "\n\nCordialement/Regards,\n\n*--*\n" mu4e-compose-signature))
    (pg/customize-set-variables
     `((org-msg-options . "html-postamble:nil toc:nil author:nil num:nil \\n:t")
       (org-msg-startup . "indent inlineimages hidestars")
       (org-msg-greeting-fmt . "\nBonjour/Hi %s,\n\n")
       (org-msg-greeting-name-limit . 3)
       (org-message-convert-citation . t)
       (org-msg-default-alternatives . ((new html)
                                        (reply-to-text html)
                                        (reply-to-html html)))
       (org-msg-recipient-names . nil))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-org-msg")

#+end_src

*** Package | org-roam

Helps with note-taking strategies.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (straight-use-package 'org-roam)
  (with-eval-after-load 'org
    (if pg/is-windows
        (straight-use-package 'emacsql-sqlite3))
    (require 'org-roam))
  (with-eval-after-load 'org-roam
    (pg/customize-set-variables
     `((org-roam-node-display-template . ,(concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
       (org-roam-directory . ,(expand-file-name "~/Documents/Notes"))
       (org-roam-capture-templates . (("d" "default" plain
                                       "%?"
                                       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                                          "#+title: ${title}\n#+STARTUP: latexpreview inlineimages\n#+date: %U\n")
                                       :unnarrowed t)
                                      ("s" "design" plain
                                       "%?"
                                       :if-new (file+head "IFT-6253/notes/%<%Y%m%d%H%M%S>-${slug}.org"
                                                          "#+title: ift6253-${title}\n#+STARTUP: latexpreview inlineimages\n#+date: %U\n")
                                       :unnarrowed t)))))
    (org-roam-setup)
    (with-eval-after-load 'general
      (pg/leader-keys
        "on" '(:ignore t :which-key "notes")
        "onl" '(org-roam-buffer-toggle :which-key "links")
        "onf" '(org-roam-node-find :which-key "find/create")
        "oni" '(org-roam-node-insert :which-key "insert/create"))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-org-roam")

#+end_src

*** Package | org-fragtog

Allows display of latex fragments in org files.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (straight-use-package 'org-fragtog)
  (unless (fboundp 'org-fragtog-mode)
    (autoload #'org-fragtog-mode "org-fragtog" nil t))
  (add-hook 'org-mode-hook #'org-fragtog-mode)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-org-fragtog")

#+end_src

*** Pomodoro timer

Custom pomodoro timer

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (defun pg/timer-setup ()
    "Sets up some parameters for the timer"
    (setq org-clock-sound (expand-file-name "~/Misc/ding.wav")))

  (defun pg/start-timer ()
    "Begins Pomodoro timer with study timer"
    (interactive)
    (pg/timer-setup)
    (pg/study-timer))

  (defun pg/start-with-break-timer ()
    "Begins Pomodoro timer with break timer"
    (interactive)
    (pg/timer-setup)
    (pg/break-timer))

  (defun pg/stop-timer ()
    "Stops the timer"
    (interactive)
    (setq org-clock-sound nil)
    (remove-hook 'org-timer-done-hook #'pg/study-timer)
    (remove-hook 'org-timer-done-hook #'pg/break-timer)
    (org-timer-stop))

  (defun pg/study-timer ()
    "Study timer for 1 hour"
    (add-hook 'org-timer-done-hook #'pg/break-timer)
    (remove-hook 'org-timer-done-hook #'pg/study-timer)
    (setq org-timer-default-timer "1:00:00")
    (setq current-prefix-arg '(4)) ;; Universal argument
    (call-interactively #'org-timer-set-timer))

  (defun pg/break-timer ()
    "Break timer for 15 minutes"
    (add-hook 'org-timer-done-hook #'pg/study-timer)
    (remove-hook 'org-timer-done-hook #'pg/break-timer)
    (setq org-timer-default-timer "15:00")
    (setq current-prefix-arg '(4)) ;; Universal argument
    (call-interactively #'org-timer-set-timer))

  (with-eval-after-load 'general
    (pg/leader-keys
      "ow" '(:ignore t :which-key "pomodoro")
      "owt" '(pg/start-timer :which-key "start")
      "owb" '(pg/start-with-break-timer :which-key "break")
      "ows" '(pg/stop-timer :which-key "stop")
      "owp" '(org-timer-pause-or-continue :which-key "pause")))

#+end_src

*** Org package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (provide 'pg-org)

#+end_src

** Viewers

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-viewers.el

  ;;; pg-viewers.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | doc-view

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-viewers.el

  (unless (fboundp 'doc-view-mode)
    (autoload #'doc-view-mode "doc-view" nil t))
  (add-to-list 'auto-mode-alist '("\\.djvu$" . doc-view-mode))

#+end_src

*** Package | elfeed

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-viewers.el

  (straight-use-package 'elfeed)
  (unless (fboundp 'elfeed)
    (autoload #'elfeed "elfeed" nil t))
  (with-eval-after-load 'elfeed
    (pg/customize-set-variables
     '((elfeed-feeds . ("https://www.gnu.org/software/guile/news/feed.xml"
                        "https://planet.emacslife.com/atom.xml"
                        "https://oneofus.la/have-emacs-will-hack/feed.xml"
                        "http://oremacs.com/atom.xml"
                        "https://updates.orgmode.org/feed/changes"
                        "http://pragmaticemacs.com/feed/"
                        "https://www.reddit.com/r/GUIX.rss"
                        "https://www.reddit.com/r/emacs.rss"
                        "https://www.reddit.com/r/orgmode.rss"
                        "https://blog.tecosaur.com/tmio/rss.xml"))
       (elfeed-search-filter . "@6-months-ago"))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-elfeed")

#+end_src

*** Package | pdf-tools

Allows for viewing of pdfs.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-viewers.el

  (unless pg/is-guix-system
    (straight-use-package 'pdf-tools))
  (unless (fboundp 'pdf-view-mode)
    (autoload #'pdf-view-mode "pdf-tools" nil t))
  (add-to-list 'auto-mode-alist '("\\.pdf$" . pdf-view-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "emacs-pdf-tools")

#+end_src

*** Package | djvu

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-viewers.el

  (straight-use-package 'djvu)
  (require 'djvu)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-djvu")

#+end_src

*** Viewers package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-viewers.el

  (provide 'pg-viewers)

#+end_src

** Bible

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bible.el

  ;;; pg-bible.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | dtk

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bible.el

  (straight-use-package 'dtk)
  (unless (fboundp 'dtk)
    (autoload #'dtk "dtk" nil t))
  (add-hook 'dtk-mode-hook #'(lambda ()
                               (setq-local face-remapping-alist
                                           '((default (:height 1.5) variable-pitch)))))
  (with-eval-after-load 'dtk
    (pg/customize-set-variables
     '((dtk-module . "KJV")
       (dtk-module-category . "Biblical Texts")
       (dtk-word-wrap . t)))
    (with-eval-after-load 'evil
      (evil-define-key 'normal 'dtk-mode-map
        (kbd "C-j") #'dtk-forward-verse
        (kbd "C-k") #'dtk-backward-verse
        (kbd "C-f") #'dtk-forward-chapter
        (kbd "C-b") #'dtk-backward-chapter
        "q" #'dtk-quit
        "c" #'dtk-clear-dtk-buffer
        "s" #'dtk-search)))

#+end_src

*** Bible package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bible.el

  (provide 'pg-bible)

#+end_src

** Finances

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-finance.el

  ;;; pg-finance.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | ledger-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-finance.el

  (straight-use-package 'ledger-mode)
  (unless (fboundp 'ledger-mode)
    (autoload #'ledger-mode "ledger-mode" nil t))
  (add-to-list 'auto-mode-alist '("\\.dat$" . ledger-mode))
  (unless (fboundp 'company-mode)
    (autoload #'company-mode "company" nil t))
  (add-hook 'ledger-mode-hook #'company-mode)
  (with-eval-after-load 'ledger-mode
    (pg/customize-set-variables
     `((ledger-reconcile-default-commodity . "CAD")
       (ledger-binary-path . ,(concat (getenv "GUIX_EXTRA_PROFILES") "/emacs/emacs/bin/ledger"))
       (ledger-clear-whole-transaction . t))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (specification->package "ledger")
  ;; (specification->package "emacs-ledger-mode")

#+end_src

*** Finances package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-finance.el

  (provide 'pg-finance)

#+end_src

** Social

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-social.el

  ;;; pg-social.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | erc

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-social.el

  (with-eval-after-load 'erc
    (unless (fboundp 'corfu-mode)
      (autoload #'corfu-mode "corfu" nil t))
    (add-hook 'erc-mode-hook #'corfu-mode)
    (pg/customize-set-variables
     '((erc-server . "irc.libera.chat")
       (erc-nick . "phil-gab99")
       (erc-user . "Philippe Gabriel")
       (erc-kill-buffer-on-part . t)
       (erc-auto-query . bury))))

#+end_src

*** Package | slack

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-social.el

  (straight-use-package 'slack)
  (unless (fboundp 'slack-start)
    (autoload #'slack-start "slack" nil t))
  (with-eval-after-load 'slack
    (pg/customize-set-variables
     '((slack-prefer-current-team . t)
       (slack-buffer-emojify . t)))
    (slack-register-team :name "ift6755"
                         :default t
                         :token (pg/lookup-password :host "ift6755.slack.com" :user "philippe.gabriel.1@umontreal.ca")
                         :cookie (pg/lookup-password :host "ift6755.slack.com" :user "philippe.gabriel.1@umontreal.ca^cookie")
                         :subscribed-channels '((general questions random))
                         :modeline-enabled t)
    (with-eval-after-load 'evil
      (evil-define-key 'normal slack-info-mode-map
        ",u" #'slack-room-update-messages)
      (evil-define-key 'normal slack-mode-map
        ",ra" #'slack-message-add-reaction
        ",rr" #'slack-message-remove-reaction
        ",rs" #'slack-message-show-reaction-users
        ",mm" #'slack-message-write-another-buffer
        ",me" #'slack-message-edit
        ",md" #'slack-message-delete))
    (with-eval-after-load 'general
      (pg/leader-keys
        "c" '(:ignore t :which-key "slack")
        "cs" '(slack-start :which-key "start")
        "cc" '(slack-channel-select :which-key "channels")
        "cm" '(slack-im-select :which-key "message")
        "cr" '(slack-message-add-reaction :which-key "react"))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-slack") ;; Older commit

#+end_src

*** Package | sx

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-social.el

  (straight-use-package 'sx)
  (unless (fboundp 'sx-search)
    (autoload #'sx-search "sx" nil t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-sx")

#+end_src

*** Package | telega

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-social.el

;;  (unless (fboundp 'telega)
;;    (autoload #'telega "telega" nil t))
;;  (with-eval-after-load 'telega
;;    (require 'telega-alert)
;;    (require 'telega-dashboard)
;;    (customize-set-variable 'telega-alert-mode 1))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  (first (lookup-inferior-packages inferior "emacs-telega"))
  (first (lookup-inferior-packages inferior "emacs-telega-contrib"))

#+end_src

*** Social package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-social.el

  (provide 'pg-social)

#+end_src

** Weather

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-weather.el

  ;;; pg-weather.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | wttrin

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-weather.el

  (defun pg/wttrin-fetch-raw-string (query)
    "Get the weather information based on your QUERY."
    (let ((url-user-agent "curl"))
      (add-to-list 'url-request-extra-headers wttrin-default-accept-language)
      (with-current-buffer
          (url-retrieve-synchronously
           (concat "http://wttr.in/" query)
           (lambda (status) (switch-to-buffer (current-buffer))))
        (decode-coding-string (buffer-string) 'utf-8))))

  (straight-use-package 'wttrin)
  (unless (fboundp 'wttrin)
    (autoload #'wttrin "wttrin" nil t))
  (with-eval-after-load 'wttrin
    (fset #'wttrin-fetch-raw-string #'pg/wttrin-fetch-raw-string)
    (pg/customize-set-variables
     '((wttrin-default-cities . ("montreal"))
       (wttrin-default-accept-language . ("Accept-Language" . "en-US")))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-wttrin")

#+end_src

*** Weather package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-weather.el

  (provide 'pg-weather)

#+end_src

** Music

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-music.el

  ;;; pg-music.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | emms

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-music.el

  (defun pg/start-mpd ()
    "Start MPD, connects to it and syncs the metadata cache."
    (interactive)
    (shell-command "herd start mpd")
    (pg/update-mpd-db)
    (emms-player-mpd-connect)
    (emms-cache-set-from-mpd-all)
    (emms-smart-browse)
    (message "MPD Started!"))

  (defun pg/kill-mpd ()
    "Stops playback and kill the music daemon."
    (interactive)
    (emms-stop)
    (emms-smart-browse)
    (emms-player-mpd-disconnect)
    (shell-command "herd stop mpd")
    (message "MPD Killed!"))

  (defun pg/update-mpd-db ()
    "Updates the MPD database synchronously."
    (interactive)
    (pg/call-mpc nil "update")
    (message "MPD Database Updated!"))

  (defun pg/call-mpc (destination mpc-args)
    "Call mpc with `call-process'.

        DESTINATION will be passed to `call-process' and MPC-ARGS will be
        passed to the mpc program."
    (if (not (listp mpc-args))
        (setq mpc-args (list mpc-args)))
    (apply 'call-process "mpc" nil destination nil mpc-args))

  ;; (straight-use-package 'emms)
  ;; (unless (fboundp 'emms-smart-browse)
  ;;   (autoload #'emms-smart-browse "emms" nil t))
  ;; (with-eval-after-load 'emms
  ;;   (require 'emms-setup)
  ;;   (require 'emms-player-mpd)
  ;;   (add-hook 'emms-playlist-cleared #'emms-player-mpd-clear)
  ;;   (pg/customize-set-variables
  ;;    `((emms-source-file-default-directory . ,(expand-file-name "~/Music"))
  ;;      (emms-player-mpd-music-directory . ,(expand-file-name "~/Music"))
  ;;      (emms-player-list . (emms-player-mpd))
  ;;      (emms-volume-change-function ,#'emms-volume-mpd-change)))
  ;;   (emms-all)
  ;;   (emms-default-players)
  ;;   (add-to-list 'emms-player-list 'emms-player-mpd)
  ;;   (dolist (binding `((,(kbd "<XF86AudioPrev>") . ,#'emms-previous)
  ;;                      (,(kbd "<XF86AudioNext>") . ,#'emms-next)
  ;;                      (,(kbd "<XF86AudioPlay>") . ,#'emms-pause)
  ;;                      (,(kbd "<XF86AudioStop>") . ,#'emms-stop)))
  ;;     (define-key emms-browser-mode-map (car binding) (cdr binding))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-emms")

#+end_src

*** Package | emms-mode-line-cycle

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-music.el

  (defun pg/emms-mode-line-cycle--icon-function (&optional title initialp)
    "Format the current track TITLE like `emms-mode-line-icon-function'. If
    INITIALP is no-nil, initialized."
    (concat " "
            emms-mode-line-icon-before-format
            ;; (emms-propertize "NP:" 'display emms-mode-line-icon-image-cache)
            (emms-mode-line-cycle--playlist-current title initialp)))

  ;; (straight-use-package 'emms-mode-line-cycle)
  ;; (with-eval-after-load 'emms
  ;;   (require 'emms-mode-line-cycle))
  ;; (with-eval-after-load 'emms-mode-line-cycle
  ;;   (require 'emms-mode-line-icon)
  ;;   (fset #'emms-mode-line-cycle--icon-function #'pg/emms-mode-line-cycle--icon-function)
  ;;   (customize-set-variable 'emms-mode-line-cycle-use-icon-p t)
  ;;   (emms-mode-line 1)
  ;;   (emms-playing-time 1)
  ;;   (emms-mode-line-cycle 1))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-emms-mode-line-cycle")

#+end_src

*** Package | simple-mpc

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-music.el

  (straight-use-package 'simple-mpc)
  (unless (fboundp 'simple-mpc)
    (autoload #'simple-mpc "simple-mpc" nil t))
  (with-eval-after-load 'simple-mpc
    (define-key simple-mpc-mode-map (kbd "<XF86AudioPlay>") #'simple-mpc-toggle))

#+end_src

*** Music package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-music.el

  (provide 'pg-music)

#+end_src

** Games

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-games.el

  ;;; pg-games.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | sudoku

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-games.el

  (straight-use-package 'sudoku)
  (unless (fboundp 'sudoku)
    (autoload #'sudoku "sudoku" nil t))
  (with-eval-after-load 'sudoku
    (pg/customize-set-variables
     '((sudoku-style . unicode)
       (sudoku-level . hard))))

#+end_src

*** Package | sokoban

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-games.el

  (straight-use-package 'sokoban)
  (unless (fboundp 'sokoban)
    (autoload #'sokoban "sokoban" nil t))
  (unless (fboundp 'sokoban-goto-level)
    (autoload #'sokoban-goto-level "sokoban" nil t))
  (with-eval-after-load 'sokoban
    (with-eval-after-load 'evil
      (evil-define-key 'normal sokoban-mode-map
        "h" #'sokoban-move-left
        "l" #'sokoban-move-right
        "j" #'sokoban-move-down
        "k" #'sokoban-move-up)))

#+end_src

*** Games package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-games.el

  (provide 'pg-games)

#+end_src

** Keybindings

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bindings.el

  ;;; pg-bindings.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | general

Allows for general custom keybindings definition to create own set of various keybindings.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bindings.el

  (straight-use-package 'general)
  (with-eval-after-load 'which-key
    (with-eval-after-load 'evil
      (require 'general)))

  (with-eval-after-load 'general
    (general-create-definer pg/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-general")

#+end_src

*** Package | hydra

Allows the creation of keymaps for related commands and the ability to repeat terminal commands. Works in conjunction with the ~general~ package.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bindings.el

  (straight-use-package 'hydra)
  (unless (fboundp 'defhydra)
    (autoload #'defhydra "hydra"))

  (defhydra hydra-text-scale (:timeout 5)
    "Scale text."
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out"))

  (defhydra hydra-window-scale (:timeout 5)
    "Scale window."
    ("<" evil-window-decrease-width "width dec")
    (">" evil-window-increase-width "width inc")
    ("-" evil-window-decrease-height "height dec")
    ("+" evil-window-increase-height "height inc")
    ("=" balance-windows "balance"))

  (defhydra hydra-x-window-scale (:timeout 5)
    "Scale x window."
    ("<" (exwm-layout-shrink-window-horizontally 50) "width dec")
    (">" (exwm-layout-enlarge-window-horizontally 50) "width inc")
    ("-" (exwm-layout-shrink-window 50) "height dec")
    ("+" (exwm-layout-enlarge-window 50) "height inc")
    ("w" exwm-floating-toggle-floating "float toggle")
    ("f" exwm-layout-set-fullscreen "fullscreen"))

  (defhydra hydra-window-move (:timeout 5)
    "Move window."
    ("h" windmove-left "left")
    ("l" windmove-right "right")
    ("j" windmove-down "down")
    ("k" windmove-up "up"))

  (defhydra hydra-window-swap (:timeout 5)
    "Swap window."
    ("h" windmove-swap-states-left "left")
    ("l" windmove-swap-states-right "right")
    ("j" windmove-swap-states-down "down")
    ("k" windmove-swap-states-up "up"))

  (defhydra hydra-window-change (:timeout 5)
    "Change window."
    ("l" next-buffer "right")
    ("h" previous-buffer "left"))

  (defhydra hydra-eyebrowse-switch (:timeout 5)
    "Switch workspace."
    ("l" eyebrowse-next-window-config "next")
    ("h" eyebrowse-prev-window-config "prev"))

  (defhydra hydra-perspective-switch (:timeout 5)
    "Switch perspective."
    ("l" persp-next "next")
    ("h" persp-prev "prev"))

  (with-eval-after-load 'general
    (pg/leader-keys
      "s" '(:ignore t :which-key "scaling")
      "st" '(hydra-text-scale/body :which-key "scale text")
      "sw" '(hydra-window-scale/body :which-key "scale window")
      "sx" '(hydra-x-window-scale/body :which-key "scale x window")
      
      "w" '(:ignore t :which-key "window")
      "wm" '(hydra-window-move/body :which-key "move")
      "ws" '(hydra-window-swap/body :which-key "swap")
      "wc" '(hydra-window-change/body :which-key "change")))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; (specification->package "emacs-hydra")

#+end_src

*** Package | iso-transl

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bindings.el

  (require 'iso-transl)
  (with-eval-after-load 'iso-transl
    (global-set-key (kbd "<Multi_key>") #'iso-transl-ctl-x-8-map))

#+end_src

*** Keybindings package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bindings.el

  (provide 'pg-bindings)

#+end_src

* Emacs Profile

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/init.el

  ;;; init.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

  (setq gc-cons-threshold (* 50 1000 1000)) ;; Sets garbage collection threshold high enough

  (push "~/.emacs.d/lisp" load-path)
  (push "~/.emacs.d/themes" custom-theme-load-path)

  (defun pg/close-all-buffers ()
    "Closes all emacs buffers."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))

  (defun pg/save-buffers-kill-emacs ()
    "Closes all emacs buffers before exiting emacs."
    (interactive)
    (pg/close-all-buffers)
    (save-buffers-kill-emacs))

  (defun pg/customize-set-variables (custom-sets)
    "Sets the default value of variables. The `custom-sets' argument represents
    a plist where each entry's key is the custom variable one wishes to set and
    the corresponding value is the value to set to the custom variable."
    (if (mapcar (lambda (setting)
                  (let ((custom (car setting))
                        (value (cdr setting)))
                    (customize-set-variable custom value)))
                custom-sets)
        t
      nil))

  ;; (global-set-key (kbd "C-x C-c") #'pg/save-buffers-kill-emacs)

  (setq pg/is-termux (string-suffix-p "Android" (string-trim (shell-command-to-string "uname -a")))
        pg/is-windows (eq system-type 'windows-nt)
        pg/is-linux (eq system-type 'gnu/linux)
        pg/is-guix-system (and pg/is-linux
                               (string-match-p (regexp-quote "(guix@guix)")
                                               (shell-command-to-string "cat /proc/version")))
        pg/exwm-enabled (and (not pg/is-termux)
                             (display-graphic-p)
                             pg/is-linux))

  (pg/customize-set-variables
   `((load-prefer-newer . t)
     (use-short-answers . t)
     (auto-save-list-file-prefix . ,(expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory))))

  ;; (byte-recompile-directory (expand-file-name "~/.emacs.d/lisp") 0)

  (require 'pg-startup)

  (if pg/exwm-enabled (require 'pg-desktop))

  (dolist (package '(pg-ui
                     pg-bindings
                     pg-org
                     pg-completion
                     pg-editing
                     pg-native-compilation
                     pg-guix
                     pg-passwords
                     pg-keylog
                     pg-buffer
                     pg-email
                     pg-editing
                     pg-help
                     pg-web
                     pg-file
                     pg-shell

                     pg-project
                     pg-programming
                     ;; pg-programming-alloy
                     pg-programming-cc
                     ;; pg-programming-commonlisp
                     pg-programming-css
                     pg-programming-docker
                     pg-programming-git
                     pg-programming-groovy
                     pg-programming-haskell
                     pg-programming-java
                     pg-programming-lmc
                     pg-programming-markdown
                     pg-programming-mips
                     pg-programming-prolog
                     pg-programming-python
                     ;; pg-programming-smtlibv2
                     pg-programming-sql
                     pg-programming-tex
                     pg-programming-typescript
                     ;; pg-programming-vhdl
                     pg-programming-yaml

                     pg-notification
                     pg-viewers
                     ;; pg-bible
                     pg-finance
                     pg-social
                     pg-weather
                     pg-music
                     pg-games))
    (require package))

  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src

*Guix packages*

#+begin_src scheme :tangle ~/.dotfiles/.config/guix/manifests/emacs.scm :noweb yes

  (use-modules
   (guix inferior)
   (guix channels)
   (srfi srfi-1))

  (define channels
    (list
     (channel (name 'guix)
              (url "https://git.savannah.gnu.org/git/guix.git")
              (commit "36b38bb4f3f4926431ae2a6d6ae79d5ad0d3d079"))))

  (define inferior
    (inferior-for-channels channels))

  (packages->manifest
   (list
    (specification->package "emacs")
    ;; (specification->package "emacs-native-comp")

    ;; (specification->package "emacs-exwm")
    ;; (specification->package "emacs-desktop-environment")
    <<packages>>
    ))

#+end_src
