#+author: Philippe Gabriel
#+title: Emacs configuration
#+property: header-args :tangle-mode (identity #o444)

Below is a sectioned configuration of emacs. Each code blocks gets written out to its own module file before being required by the ~~/.emacs.d/init.el~ config file.

* Startup

** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-startup.el

  ;;; pg-startup.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

** Package Initialization

Some initializations are first set up.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-startup.el

  (unless (featurep 'straight)
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))

#+end_src

** Startup package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-startup.el

  (provide 'pg-startup)

#+end_src

* Native Compilation

** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-native-compilation.el

  ;;; pg-native-compilation.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

** Native compilation settings

Some settings specific to the ~emacs-native-comp~ version of emacs

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-native-compilation.el

  (when (featurep 'native-compile)
    (setopt native-comp-async-report-warnings-errors nil)                                          ;; Silence compiler warnings
    (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))) ;; Set directory for cache storage

#+end_src

** Native compilation package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-native-compilation.el

  (provide 'pg-native-compilation)

#+end_src

* Packages

** Guix Management

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-guix.el

  ;;; pg-guix.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | guix

Emacs interface for guix package manager.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-guix.el

  (when pg/is-guix-system
    (unless (fboundp 'guix)
      (autoload #'guix "guix" nil t))
    (unless (fboundp 'guix-devel-mode)
      (autoload #'guix-devel-mode "guix" nil t))
    (add-hook 'scheme-mode-hook #'guix-devel-mode)
    (with-eval-after-load 'general
      (pg/leader-keys
        "G" '(:ignore t :which-key "guix")
        "Gg" '(guix :which-key "guix"))))

#+end_src

*** Package | geiser

Scheme REPL

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-guix.el

  (when pg/is-guix-system
    (unless (fboundp 'geiser-guile)
      (autoload #'geiser-guile "geiser" nil t))
    (unless (fboundp 'geiser-repl-clear-buffer)
      (autoload #'geiser-repl-clear-buffer "geiser" nil t))
    (if (boundp 'geiser-repl-mode-map)
        (define-key geiser-repl-mode-map (kbd "C-l") #'geiser-repl-clear-buffer)
      (with-eval-after-load 'geiser
        (define-key geiser-repl-mode-map (kbd "C-l") #'geiser-repl-clear-buffer)))
    (unless (fboundp 'corfu-mode)
      (autoload #'corfu-mode "corfu" nil t))
    (add-hook 'geiser-repl-mode-hook #'corfu-mode)
    (add-hook 'geiser-repl-mode-hook #'(lambda ()
                                         (display-line-numbers-mode 0)))

    (with-eval-after-load 'geiser-guile
      (add-to-list 'geiser-guile-load-path (concat (plist-get pg/user :config) "/guix/current/share/guile/site/3.0"))
      (add-to-list 'geiser-guile-load-path (plist-get pg/user :dotfiles))
      (setopt geiser-guile-load-init-file nil
              geiser-guile-manual-lookup-other-window t))

    (with-eval-after-load 'geiser
      (setopt geiser-repl-company-p nil
              geiser-repl-history-filename (concat (plist-get pg/user :cache) "/.geiser_history"))))

#+end_src

*** System management package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-guix.el

  (provide 'pg-guix)

#+end_src

** Password Utilities

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  ;;; pg-passwords.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | auth-source

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  (when pg/is-linux
    (require 'auth-source)
    (with-eval-after-load 'auth-source
      (setopt auth-sources (list (concat (plist-get pg/user :home)
                                         "/.authinfo.gpg")))))

#+end_src

*** Package | epg-config

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  (unless (or pg/is-termux
              pg/is-windows)
    (require 'epg-config)
    (with-eval-after-load 'epg-config
      (setopt epg-pinentry-mode 'loopback)))

#+end_src

*** Package | pinentry

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  (unless (or pg/is-termux
              pg/is-windows)
    (require 'pinentry)
    (with-eval-after-load 'pinentry
      (pinentry-start)))

#+end_src

*** Package | password-cache

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  (require 'password-cache)
  (with-eval-after-load 'password-cache
    (setopt password-cache-expiry (* 60 60 2)))

#+end_src

*** Package | password-store

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  (unless pg/is-windows
    (straight-use-package 'password-store)
    (unless (fboundp 'password-store-copy)
      (autoload #'password-store-copy "password-store" nil t))
    (unless (fboundp 'password-store-copy-field)
      (autoload #'password-store-copy-field "password-store" nil t)))
    (with-eval-after-load 'general
      (pg/leader-keys
        "a" '(:ignore t :which-key "pass")
        "ac" '(password-store-copy :which-key "copy")
        "af" '(password-store-copy-field :which-key "copy field")))
    (with-eval-after-load 'password-store
      (setopt password-store-time-before-clipboard-restore 60))

#+end_src

*** Password lookup

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  (defun pg/lookup-password (&rest keys)
    "Looks up passwords from authinfo entries."
    (let ((result (apply #'auth-source-search keys)))
      (if result
          (funcall (plist-get (car result) :secret))
        nil)))

#+end_src

*** Password utilities package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-passwords.el

  (provide 'pg-passwords)

#+end_src

** Keybind Log

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-keylog.el

  ;;; pg-keylog.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | keycast

Useful when starting out with the various keybindings and when presenting to an audience.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-keylog.el

  (define-minor-mode pg/keycast-mode
    "Show current command and its key binding in the mode line.
  Fix for use with doom-mode-line."
    :global t
    (interactive)
    (if pg/keycast-mode
        (add-hook 'pre-command-hook #'keycast--update t)
      (remove-hook 'pre-command-hook #'keycast--update)))

  (straight-use-package 'keycast)
  (require 'keycast)
  (with-eval-after-load 'keycast
    (setopt keycast-mode-line-format "%2s%k%c%2s")
    (fset #'keycast-mode #'pg/keycast-mode)
    (keycast-mode)
    (add-to-list 'global-mode-string '("" keycast-mode-line)))

#+end_src

*** Keybind log package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-keylog.el

  (provide 'pg-keylog)

#+end_src

** Command Completion Framework

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  ;;; pg-completion.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | savehist

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (require 'savehist)
  (with-eval-after-load 'savehist
    (savehist-mode))

#+end_src

*** Package | marginalia

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'marginalia)
  (with-eval-after-load 'vertico
    (require 'marginalia))
  (with-eval-after-load 'marginalia
    (setopt marginalia-annotators '(marginalia-annotators-heavy
                                    marginalia-annotators-light
                                    nil))
    (marginalia-mode))

#+end_src

*** Package | consult

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'consult)
  (unless (fboundp 'consult-line)
    (autoload #'consult-line "consult" nil t))
  (global-set-key (kbd "C-s") #'consult-line)
  (unless (fboundp 'consult-ripgrep)
    (autoload #'consult-ripgrep "consult" nil t))
  (global-set-key (kbd "C-M-s") #'consult-ripgrep)
  (unless (fboundp 'consult-buffer)
    (autoload #'consult-buffer "consult" nil t))
  (global-set-key (kbd "C-x b") #'consult-buffer)
  (with-eval-after-load 'consult
    (setopt consult-buffer-sources '(consult--source-buffer))
    (consult-customize consult-buffer
                       consult-theme
                       :preview-key nil)
    (define-key minibuffer-local-map (kbd "C-r") #'consult-history))

#+end_src

*** Package | orderless

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'orderless)
  (with-eval-after-load 'vertico
    (require 'orderless))
  (with-eval-after-load 'orderless
    (setopt completion-styles '(orderless)
            completion-category-defaults nil
            orderless-skip-highlighting nil
            completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src

*** Package | corfu

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'corfu)
  (unless (fboundp 'corfu-next)
    (autoload #'corfu-next "corfu" nil t))
  (unless (fboundp 'corfu-previous)
    (autoload #'corfu-previous "corfu" nil t))
  (if (boundp 'corfu-map)
      (progn
        (define-key corfu-map (kbd "C-j") #'corfu-next)
        (define-key corfu-map (kbd "C-k") #'corfu-previous))
    (with-eval-after-load 'corfu
      (define-key corfu-map (kbd "C-j") #'corfu-next)
      (define-key corfu-map (kbd "C-k") #'corfu-previous)))
  (unless (fboundp 'corfu-mode)
    (autoload #'corfu-mode "corfu" nil t))
  (with-eval-after-load 'corfu
    (setopt corfu-cycle t))

#+end_src

*** Package | vertico

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'vertico)
  (require 'vertico)
  (unless (fboundp 'vertico-next)
    (autoload #'vertico-next "vertico" nil t))
  (unless (fboundp 'vertico-previous)
    (autoload #'vertico-previous "vertico" nil t))
  (if (boundp 'vertico-map)
      (progn
        (define-key vertico-map (kbd "C-j") #'vertico-next)
        (define-key vertico-map (kbd "C-k") #'vertico-previous))
    (with-eval-after-load 'vertico
      (define-key vertico-map (kbd "C-j") #'vertico-next)
      (define-key vertico-map (kbd "C-k") #'vertico-previous)))
  (with-eval-after-load 'vertico
    (setopt vertico-cycle t)
    (vertico-mode))

#+end_src

*** Package | embark

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'embark)
  (with-eval-after-load 'vertico
    (unless (fboundp 'embark-act)
      (autoload #'embark-act "embark" nil t))
    (global-set-key (kbd "C-S-a") #'embark-act)
    (define-key minibuffer-local-map (kbd "C-d") #'embark-act))
  (with-eval-after-load 'embark
    (setopt embark-confirm-act-all nil)
    (setq embark-action-indicator
          (lambda
            (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))

#+end_src

*** Package | which-key

Displays additional keybindings subsequent to prefix keybindings

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'which-key)
  (require 'which-key)
  (with-eval-after-load 'which-key
    (setopt which-key-idle-delay 1.0)
    (which-key-mode)
    (unless (fboundp 'diminish)
      (autoload #'diminish "diminish" nil t))
    (diminish #'which-key-mode))

#+end_src

*** Package | helm

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (straight-use-package 'helm)
  (unless (fboundp 'helm-next-line)
    (autoload #'helm-next-line "helm" nil t))
  (unless (fboundp 'helm-previous-line)
    (autoload #'helm-previous-line "helm" nil t))
  (if (boundp 'helm-map)
      (progn
        (define-key helm-map (kbd "C-j") #'helm-next-line)
        (define-key helm-map (kbd "C-k") #'helm-previous-line))
    (with-eval-after-load 'helm
      (define-key helm-map (kbd "C-j") #'helm-next-line)
      (define-key helm-map (kbd "C-k") #'helm-previous-line)))

#+end_src

*** Command completion framework package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-completion.el

  (provide 'pg-completion)

#+end_src

** UI Enhancement

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  ;;; pg-ui.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Theme Definition

Theme inspired by the popular Atom One Dark theme.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/themes/pg-onedark-variant-theme.el

  ;;; pg-onedark-variant-theme.el --- One Dark Variant color theme
  ;; Author: Philippe Gabriel

  (deftheme pg-onedark-variant
    "One Dark Variant - My pg-onedark-variant custom theme.")

  (defvar pg-onedark-variant-colors-alist
    '(("pg-onedark-variant-whitestd"    . "#cccccc")
      ("pg-onedark-variant-white"       . "#ffffff")
      ("pg-onedark-variant-gold"        . "#eead0e")
      ("pg-onedark-variant-black"       . "#282c34")
      ("pg-onedark-variant-dark"        . "#000000")
      ("pg-onedark-variant-doc-box"     . "#1a1a1a")
      ("pg-onedark-variant-cursorbg"    . "#4682d9")
      ("pg-onedark-variant-regionbg"    . "#494949")
      ("pg-onedark-variant-regionds"    . "#828997")
      ("pg-onedark-variant-blue"        . "#00bfff")
      ("pg-onedark-variant-green"       . "#2cff64")
      ("pg-onedark-variant-keywords"    . "#c678dd")
      ("pg-onedark-variant-strings"     . "#98c379")
      ("pg-onedark-variant-docs"        . "#98f979")
      ("pg-onedark-variant-modebox"     . "#181a1f")
      ("pg-onedark-variant-comments"    . "#737373")
      ("pg-onedark-variant-codeblockbg" . "#0d0d0d")
      ("pg-onedark-variant-quotefg"     . "#ffd700")
      ("pg-onedark-variant-code"        . "#ffa500")
      ("pg-onedark-variant-verbatim"    . "#00ff00")
      ("pg-onedark-variant-table"       . "#cdb5cd")
      ("pg-onedark-variant-types"       . "#ecbe7b")
      ("pg-onedark-variant-vars"        . "#ff6347")
      ("pg-onedark-variant-link"        . "#61afef")
      ("pg-onedark-variant-constants"   . "#eead0e")
      ("pg-onedark-variant-tags"        . "#00eeee")
      ("pg-onedark-variant-builtin"     . "#00cdcd")
      ("pg-onedark-variant-preproc"     . "#7b447b")
      ("pg-onedark-variant-shexec"      . "#afeeee")
      ("pg-onedark-variant-modelnfg"    . "#9da5b4")
      ("pg-onedark-variant-modelnbg"    . "#21252b")
      ("pg-onedark-variant-modelndiff"  . "#ff4c35")
      ("pg-onedark-variant-modelninfg"  . "#5b6268")
      ("pg-onedark-variant-modelninbg"  . "#21242b")
      ("pg-onedark-variant-lnnumfg"     . "#8f8f8f")
      ("pg-onedark-variant-lnnumbg"     . "#202231")
      ("pg-onedark-variant-lnsltfg"     . "#fefefe")
      ("pg-onedark-variant-mu4eheader"  . "#ff83fa")
      ("pg-onedark-variant-parenmatch"  . "#c678dd")
      ("pg-onedark-variant-error"       . "#ff6666")
      ("pg-onedark-variant-warn"        . "#f2db05")
      ("pg-onedark-variant-info"        . "#228b22")
      ("pg-onedark-variant-minibuf"     . "#f0fff0")
      ("pg-onedark-variant-eviln"       . "#818ff4"))
    "List of One Dark Variant colors.")

  (defmacro pg-onedark-variant-with-color-variables (&rest body)
    "Bind the colors list around BODY."
    (declare (indent 0))
    `(let ((class '((class color) (min-colors 89)))
           ,@(mapcar (lambda (cons)
                       (list (intern (car cons)) (cdr cons)))
                     pg-onedark-variant-colors-alist))
       ,@body))

  (pg-onedark-variant-with-color-variables
    (custom-theme-set-faces
     'pg-onedark-variant

     ;; General
     `(cursor                   ((t ( :background ,pg-onedark-variant-cursorbg))))
     `(default                  ((t ( :foreground ,pg-onedark-variant-whitestd
                                      :background ,pg-onedark-variant-black))))
     `(italic                   ((t ( :slant italic))))
     `(link                     ((t ( :foreground ,pg-onedark-variant-link
                                      :weight bold
                                      :underline t))))
     `(region                   ((t ( :background ,pg-onedark-variant-regionbg
                                      :distant-foreground ,pg-onedark-variant-regionds))))
     `(highlight                ((t ( :background ,pg-onedark-variant-regionbg
                                      :distant-foreground ,pg-onedark-variant-regionds))))
     `(show-paren-match         ((t ( :foreground ,pg-onedark-variant-parenmatch
                                      :weight bold))))
     `(sh-quoted-exec           ((t ( :foreground ,pg-onedark-variant-shexec))))
     `(line-number              ((t ( :foreground ,pg-onedark-variant-lnnumfg
                                      :background ,pg-onedark-variant-lnnumbg))))
     `(line-number-current-line ((t ( :foreground ,pg-onedark-variant-lnsltfg
                                      :background ,pg-onedark-variant-lnnumbg))))
     `(minibuffer-prompt        ((t ( :foreground ,pg-onedark-variant-minibuf))))
     `(shadow                   ((t ( :foreground ,pg-onedark-variant-white))))
     `(error                    ((t ( :foreground ,pg-onedark-variant-error))))
     `(warning                  ((t ( :foreground ,pg-onedark-variant-warn))))
     `(message-header-name      ((t ( :bold t))))

     ;; Persp
     `(persp-selected-face ((t ( :foreground ,pg-onedark-variant-warn))))

     ;; Man
     `(Man-overstrike ((t ( :foreground ,pg-onedark-variant-types
                            :weight bold))))
     `(Man-underline  ((t ( :foreground ,pg-onedark-variant-keywords
                            :underline t))))

     ;; Info
     `(Info-quoted    ((t ( :foreground ,pg-onedark-variant-code
                            :inherit (fixed-pitch)))))

     ;; Org
     `(org-hide                  ((t ( :foreground ,pg-onedark-variant-black))))
     `(org-level-4               ((t ( :foreground ,pg-onedark-variant-green))))
     `(org-date                  ((t ( :foreground ,pg-onedark-variant-blue))))
     `(org-quote                 ((t ( :slant italic
                                       :foreground ,pg-onedark-variant-quotefg
                                       :background ,pg-onedark-variant-codeblockbg
                                       :inherit (variable-pitch)))))
     `(org-document-info-keyword ((t ( :inherit (font-lock-comment-face
                                                 fixed-pitch)))))
     `(org-document-title        ((t ( :foreground ,pg-onedark-variant-whitestd
                                       :weight bold))))
     `(org-document-info         ((t ( :foreground ,pg-onedark-variant-whitestd))))
     `(org-ellipsis              ((t ( :underline nil
                                       :box nil))))
     `(org-block                 ((t ( :foreground unspecified
                                       :background ,pg-onedark-variant-codeblockbg
                                       :inherit (fixed-pitch)))))
     `(org-code                  ((t ( :foreground ,pg-onedark-variant-code
                                       :inherit (fixed-pitch)))))
     `(org-verbatim              ((t ( :foreground ,pg-onedark-variant-verbatim
                                       :inherit (fixed-pitch)))))
     `(org-table                 ((t ( :foreground ,pg-onedark-variant-table
                                       :inherit (shadow
                                                 fixed-pitch)))))
     `(org-indent                ((t ( :inherit (org-hide
                                                 fixed-pitch)))))
     `(org-special-keyword       ((t ( :inherit (font-lock-comment-face
                                                 fixed-pitch)))))
     `(org-meta-line             ((t ( :inherit (font-lock-comment-face
                                                 fixed-pitch)))))
     `(org-checkbox              ((t ( :inherit (fixed-pitch)))))

     ;; Outshine
     `(outshine-level-4 ((t ( :foreground ,pg-onedark-variant-green))))

     ;; Sp
     `(sp-pair-overlay-face ((t ( :background ,pg-onedark-variant-regionbg))))

     ;; Company
     `(company-tooltip-selection  ((t ( :background ,pg-onedark-variant-regionbg
                                        :distant-foreground ,pg-onedark-variant-regionds))))
     `(company-tooltip-mouse      ((t ( :background ,pg-onedark-variant-regionbg
                                        :distant-foreground ,pg-onedark-variant-regionds))))
     `(company-tooltip-annotation ((t ( :foreground ,pg-onedark-variant-gold))))
     `(company-box-scrollbar      ((t ( :background ,pg-onedark-variant-regionbg))))
     `(company-tooltip            ((t ( :foreground ,pg-onedark-variant-whitestd 
                                        :background ,pg-onedark-variant-doc-box))))

     ;; Mode line
     `(mode-line                       ((t ( :foreground ,pg-onedark-variant-whitestd
                                             :background ,pg-onedark-variant-modelnbg
                                             :box ,pg-onedark-variant-modebox))))
     `(mode-line-inactive              ((t ( :foreground ,pg-onedark-variant-modelninfg
                                             :background ,pg-onedark-variant-modelninbg))))
     `(doom-modeline-buffer-modified   ((t ( :foreground ,pg-onedark-variant-modelndiff))))
     `(doom-modeline-urgent            ((t ( :foreground ,pg-onedark-variant-error))))
     `(doom-modeline-lsp-success       ((t ( :foreground ,pg-onedark-variant-docs))))
     `(doom-modeline-buffer-major-mode ((t ( :foreground ,pg-onedark-variant-blue))))
     `(doom-modeline-evil-normal-state ((t ( :foreground ,pg-onedark-variant-eviln
                                             :weight bold))))

     ;; mu4e
     `(mu4e-header-key-face ((t ( :foreground ,pg-onedark-variant-mu4eheader))))

     ;; eshell
     `(eshell-prompt ((t ( :foreground ,pg-onedark-variant-gold))))

     ;; Ledger
     `(ledger-font-payee-cleared-face   ((t ( :foreground ,pg-onedark-variant-green))))
     `(ledger-font-posting-account-face ((t ( :inherit (font-lock-builtin-face)))))

     ;; lsp-ui
     `(lsp-ui-doc-background ((t ( :background ,pg-onedark-variant-doc-box))))

     ;; flycheck
     `(flycheck-warning ((t ( :underline ( :color ,pg-onedark-variant-warn
                                           :style wave
                                           :position nil)))))
     `(flycheck-info    ((t ( :underline ( :color ,pg-onedark-variant-info
                                           :style wave)))))

     ;; lsp
     `(lsp-flycheck-info-unnecessary-face    ((t ( :inherit (flycheck-info)))))
     `(lsp-flycheck-warning-unnecessary-face ((t ( :inherit (flycheck-warning)))))

     ;; Tab bar
     `(tab-bar              ((t ( :foreground ,pg-onedark-variant-whitestd
                                  :background ,pg-onedark-variant-modelnbg))))
     `(tab-bar-tab          ((t ( :foreground ,pg-onedark-variant-white
                                  :box ( :line-width -1
                                         :color ,pg-onedark-variant-modelnbg
                                         :style pressed-button)))))
     `(tab-bar-tab-inactive ((t ( :foreground ,pg-onedark-variant-whitestd
                                  :background ,pg-onedark-variant-modelnbg))))

     ;; Markdown
     `(markdown-code-face ((t ( :background ,pg-onedark-variant-doc-box))))

     ;; nusmv
     `(nusmv-font-lock-variable-name-face ((t ( :inherit (font-lock-variable-name-face)))))
     `(nusmv-font-lock-keyword-face       ((t ( :inherit (font-lock-keyword-face)))))
     `(nusmv-font-lock-constant-face      ((t ( :inherit (font-lock-constant-face)))))
     `(nusmv-font-lock-type-face          ((t ( :inherit (font-lock-type-face)))))
     `(nusmv-font-lock-module-name-face   ((t ( :inherit (font-lock-function-name-face)))))
     `(nusmv-font-lock-directive-face     ((t ( :inherit (font-lock-preprocessor-face)))))
     `(nusmv-font-lock-separator-face     ((t ( :inherit (font-lock-builtin-face)))))

     ;; vterm
     `(which-func ((t ( :foreground ,pg-onedark-variant-blue))))

     ;; sudoku
     `(sudoku-value-face ((t ( :foreground ,pg-onedark-variant-mu4eheader
                               :height 2.0))))

     ;; Makefile
     `(makefile-space ((t ( :background ,pg-onedark-variant-black))))

     ;; slack
     `(slack-message-output-text    ((t ( :inherit (variable-pitch)))))
     `(slack-mrkdwn-code-face       ((t ( :inherit (org-code)))))
     `(slack-mrkdwn-code-block-face ((t ( :inherit (org-verbatim)))))

     ;; General font locks
     `(font-lock-function-name-face ((t ( :foreground ,pg-onedark-variant-blue))))
     `(font-lock-preprocessor-face  ((t ( :foreground ,pg-onedark-variant-preproc))))
     `(font-lock-keyword-face       ((t ( :foreground ,pg-onedark-variant-keywords))))
     `(font-lock-string-face        ((t ( :foreground ,pg-onedark-variant-strings))))
     `(font-lock-doc-face           ((t ( :foreground ,pg-onedark-variant-docs
                                          :slant italic))))
     `(font-lock-comment-face       ((t ( :foreground ,pg-onedark-variant-comments
                                          :slant italic))))
     `(font-lock-type-face          ((t ( :foreground ,pg-onedark-variant-types))))
     `(font-lock-variable-name-face ((t ( :foreground ,pg-onedark-variant-vars))))
     `(font-lock-constant-face      ((t ( :foreground ,pg-onedark-variant-constants))))
     `(font-lock-doc-markup-face    ((t ( :foreground ,pg-onedark-variant-tags))))
     `(font-lock-builtin-face       ((t ( :foreground ,pg-onedark-variant-builtin))))))

  (provide-theme 'pg-onedark-variant)

#+end_src

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/themes/pg-onelight-variant-theme.el

  ;;; pg-onelight-variant-theme.el --- One Light Variant color theme
  ;; Author: Philippe Gabriel

  (deftheme pg-onelight-variant
    "One Light Variant - My pg-onelight-variant custom theme.")

  (defvar pg-onelight-variant-colors-alist
    '(("pg-onelight-variant-blackstd"    . "#333333")
      ("pg-onelight-variant-black"       . "#282c34")
      ("pg-onelight-variant-gold"        . "#eead0e")
      ("pg-onelight-variant-whitebg"     . "#ffffff")
      ("pg-onelight-variant-dark"        . "#000000")
      ("pg-onelight-variant-doc-box"     . "#cacaca")
      ("pg-onelight-variant-cursorbg"    . "#4682d9")
      ("pg-onelight-variant-regionbg"    . "#b4eeb4")
      ("pg-onelight-variant-regionds"    . "#828997")
      ("pg-onelight-variant-blue"        . "#00bfff")
      ("pg-onelight-variant-green"       . "#2cff64")
      ("pg-onelight-variant-keywords"    . "#c678dd")
      ("pg-onelight-variant-strings"     . "#50A14F")
      ("pg-onelight-variant-docs"        . "#008b00")
      ("pg-onelight-variant-modebox"     . "#7f7f7f")
      ("pg-onelight-variant-comments"    . "#424243")
      ("pg-onelight-variant-codeblockbg" . "#eee9e9")
      ("pg-onelight-variant-quotefg"     . "#ffd700")
      ("pg-onelight-variant-code"        . "#ffa500")
      ("pg-onelight-variant-verbatim"    . "#00dd00")
      ("pg-onelight-variant-table"       . "#68228b")
      ("pg-onelight-variant-types"       . "#cd853f")
      ("pg-onelight-variant-vars"        . "#ff6347")
      ("pg-onelight-variant-link"        . "#61afef")
      ("pg-onelight-variant-constants"   . "#eead0e")
      ("pg-onelight-variant-tags"        . "#ee00ee")
      ("pg-onelight-variant-builtin"     . "#008b8b")
      ("pg-onelight-variant-preproc"     . "#7b447b")
      ("pg-onelight-variant-shexec"      . "#afeeee")
      ("pg-onelight-variant-modelnfg"    . "#030303")
      ("pg-onelight-variant-modelnbg"    . "#bfbfbf")
      ("pg-onelight-variant-modelndiff"  . "#ff4c35")
      ("pg-onelight-variant-modelninfg"  . "#1c1c1c")
      ("pg-onelight-variant-modelninbg"  . "#a6a6a6")
      ("pg-onelight-variant-lnnumfg"     . "#262626")
      ("pg-onelight-variant-lnnumbg"     . "#999999")
      ("pg-onelight-variant-lnsltfg"     . "#fefefe")
      ("pg-onelight-variant-mu4eheader"  . "#ff83fa")
      ("pg-onelight-variant-parenmatch"  . "#c678dd")
      ("pg-onelight-variant-error"       . "#ff6666")
      ("pg-onelight-variant-warn"        . "#8b5a00")
      ("pg-onelight-variant-info"        . "#228b22")
      ("pg-onelight-variant-minibuf"     . "#0000ff")
      ("pg-onelight-variant-eviln"       . "#818ff4"))
    "List of One Dark Variant colors.")

  (defmacro pg-onelight-variant-with-color-variables (&rest body)
    "Bind the colors list around BODY."
    (declare (indent 0))
    `(let ((class '((class color) (min-colors 89)))
           ,@(mapcar (lambda (cons)
                       (list (intern (car cons)) (cdr cons)))
                     pg-onelight-variant-colors-alist))
       ,@body))

  (pg-onelight-variant-with-color-variables
   (custom-theme-set-faces
    'pg-onelight-variant

    ;; General
    `(cursor                   ((t ( :background ,pg-onelight-variant-cursorbg))))
    `(default                  ((t ( :foreground ,pg-onelight-variant-blackstd
                                     :background ,pg-onelight-variant-whitebg))))
    `(italic                   ((t ( :slant italic))))
    `(link                     ((t ( :foreground ,pg-onelight-variant-link
                                     :weight bold
                                     :underline t))))
    `(region                   ((t ( :background ,pg-onelight-variant-regionbg
                                     :distant-foreground ,pg-onelight-variant-regionds))))
    `(highlight                ((t ( :background ,pg-onelight-variant-regionbg
                                     :distant-foreground ,pg-onelight-variant-regionds))))
    `(show-paren-match         ((t ( :foreground ,pg-onelight-variant-parenmatch
                                     :weight bold))))
    `(sh-quoted-exec           ((t ( :foreground ,pg-onelight-variant-shexec))))
    `(line-number              ((t ( :foreground ,pg-onelight-variant-lnnumfg
                                     :background ,pg-onelight-variant-lnnumbg))))
    `(line-number-current-line ((t ( :foreground ,pg-onelight-variant-lnsltfg
                                     :background ,pg-onelight-variant-lnnumbg))))
    `(minibuffer-prompt        ((t ( :foreground ,pg-onelight-variant-minibuf))))
    `(shadow                   ((t ( :foreground ,pg-onelight-variant-dark))))
    `(error                    ((t ( :foreground ,pg-onelight-variant-error))))
    `(warning                  ((t ( :foreground ,pg-onelight-variant-warn))))
    `(message-header-name      ((t ( :bold t))))

    ;; Persp
    `(persp-selected-face ((t ( :foreground ,pg-onelight-variant-warn))))

    ;; Man
    `(Man-overstrike ((t ( :foreground ,pg-onelight-variant-types
                           :weight bold))))
    `(Man-underline  ((t ( :foreground ,pg-onelight-variant-keywords
                           :underline t))))

    ;; Info
    `(Info-quoted    ((t ( :foreground ,pg-onelight-variant-code
                           :inherit (fixed-pitch)))))

    ;; Org
    `(org-hide                  ((t ( :foreground ,pg-onelight-variant-whitebg))))
    `(org-level-4               ((t ( :foreground ,pg-onelight-variant-green))))
    `(org-date                  ((t ( :foreground ,pg-onelight-variant-blue))))
    `(org-quote                 ((t ( :slant italic
                                      :foreground ,pg-onelight-variant-quotefg
                                      :background ,pg-onelight-variant-codeblockbg
                                      :inherit (variable-pitch)))))
    `(org-document-info-keyword ((t ( :inherit (font-lock-comment-face
                                                fixed-pitch)))))
    `(org-document-title        ((t ( :foreground ,pg-onelight-variant-blackstd
                                      :weight bold))))
    `(org-document-info         ((t ( :foreground ,pg-onelight-variant-blackstd))))
    `(org-ellipsis              ((t ( :underline nil
                                      :box nil))))
    `(org-block                 ((t ( :foreground unspecified
                                      :background ,pg-onelight-variant-codeblockbg
                                      :inherit (fixed-pitch)))))
    `(org-code                  ((t ( :foreground ,pg-onelight-variant-code
                                      :inherit (fixed-pitch)))))
    `(org-verbatim              ((t ( :foreground ,pg-onelight-variant-verbatim
                                      :inherit (fixed-pitch)))))
    `(org-table                 ((t ( :foreground ,pg-onelight-variant-table
                                      :inherit (shadow
                                                fixed-pitch)))))
    `(org-indent                ((t ( :inherit (org-hide
                                                fixed-pitch)))))
    `(org-special-keyword       ((t ( :inherit (font-lock-comment-face
                                                fixed-pitch)))))
    `(org-meta-line             ((t ( :inherit (font-lock-comment-face
                                                fixed-pitch)))))
    `(org-checkbox              ((t ( :inherit (fixed-pitch)))))

    ;; Outshine
    `(outshine-level-4 ((t ( :foreground ,pg-onelight-variant-green))))

    ;; Sp
    `(sp-pair-overlay-face ((t ( :background ,pg-onelight-variant-regionbg))))

    ;; Company
    `(company-tooltip-selection  ((t ( :background ,pg-onelight-variant-regionbg
                                       :distant-foreground ,pg-onelight-variant-regionds))))
    `(company-tooltip-mouse      ((t ( :background ,pg-onelight-variant-regionbg
                                       :distant-foreground ,pg-onelight-variant-regionds))))
    `(company-tooltip-annotation ((t ( :foreground ,pg-onelight-variant-gold))))
    `(company-box-scrollbar      ((t ( :background ,pg-onelight-variant-regionbg))))
    `(company-tooltip            ((t ( :foreground ,pg-onelight-variant-blackstd 
                                       :background ,pg-onelight-variant-doc-box))))

    ;; Mode line
    `(mode-line                       ((t ( :foreground ,pg-onelight-variant-modelnfg
                                            :background ,pg-onelight-variant-modelnbg
                                            :box ,pg-onelight-variant-modebox))))
    `(mode-line-inactive              ((t ( :foreground ,pg-onelight-variant-modelninfg
                                            :background ,pg-onelight-variant-modelninbg))))
    `(doom-modeline-buffer-modified   ((t ( :foreground ,pg-onelight-variant-modelndiff))))
    `(doom-modeline-urgent            ((t ( :foreground ,pg-onelight-variant-error))))
    `(doom-modeline-lsp-success       ((t ( :foreground ,pg-onelight-variant-docs))))
    `(doom-modeline-buffer-major-mode ((t ( :foreground ,pg-onelight-variant-tags))))
    `(doom-modeline-evil-normal-state ((t ( :foreground ,pg-onelight-variant-eviln
                                            :weight bold))))

    ;; mu4e
    `(mu4e-header-key-face ((t ( :foreground ,pg-onelight-variant-mu4eheader))))

    ;; eshell
    `(eshell-prompt ((t ( :foreground ,pg-onelight-variant-gold))))

    ;; Ledger
    `(ledger-font-payee-cleared-face   ((t ( :foreground ,pg-onelight-variant-green))))
    `(ledger-font-posting-account-face ((t ( :inherit (font-lock-builtin-face)))))

    ;; lsp-ui
    `(lsp-ui-doc-background ((t ( :background ,pg-onelight-variant-doc-box))))

    ;; flycheck
    `(flycheck-warning ((t ( :underline ( :color ,pg-onelight-variant-warn
                                          :style wave)))))
    `(flycheck-info    ((t ( :underline ( :color ,pg-onelight-variant-info
                                          :style wave)))))

    ;; lsp
    `(lsp-flycheck-info-unnecessary-face    ((t ( :inherit (flycheck-info)))))
    `(lsp-flycheck-warning-unnecessary-face ((t ( :inherit (flycheck-warning)))))

    ;; Tab bar
    `(tab-bar              ((t ( :foreground ,pg-onelight-variant-blackstd
                                 :background ,pg-onelight-variant-modelnbg))))
    `(tab-bar-tab          ((t ( :foreground ,pg-onelight-variant-dark
                                 :box ( :line-width -1
                                        :color ,pg-onelight-variant-modelnbg
                                        :style pressed-button)))))
    `(tab-bar-tab-inactive ((t ( :foreground ,pg-onelight-variant-blackstd
                                 :background ,pg-onelight-variant-modelnbg))))

    ;; Markdown
    `(markdown-code-face ((t ( :background ,pg-onelight-variant-doc-box))))

    ;; nusmv
    `(nusmv-font-lock-variable-name-face ((t ( :inherit (font-lock-variable-name-face)))))
    `(nusmv-font-lock-keyword-face       ((t ( :inherit (font-lock-keyword-face)))))
    `(nusmv-font-lock-constant-face      ((t ( :inherit (font-lock-constant-face)))))
    `(nusmv-font-lock-type-face          ((t ( :inherit (font-lock-type-face)))))
    `(nusmv-font-lock-module-name-face   ((t ( :inherit (font-lock-function-name-face)))))
    `(nusmv-font-lock-directive-face     ((t ( :inherit (font-lock-preprocessor-face)))))
    `(nusmv-font-lock-separator-face     ((t ( :inherit (font-lock-builtin-face)))))

    ;; vterm
    `(which-func ((t ( :foreground ,pg-onelight-variant-blue))))

    ;; sudoku
    `(sudoku-value-face ((t ( :foreground ,pg-onelight-variant-mu4eheader
                              :height 2.0))))

    ;; Makefile
    `(makefile-space ((t ( :background ,pg-onelight-variant-whitebg))))

    ;; slack
    `(slack-message-output-text    ((t ( :inherit (variable-pitch)))))
    `(slack-mrkdwn-code-face       ((t ( :inherit (org-code)))))
    `(slack-mrkdwn-code-block-face ((t ( :inherit (org-verbatim)))))

    ;; General font locks
    `(font-lock-function-name-face ((t ( :foreground ,pg-onelight-variant-blue))))
    `(font-lock-preprocessor-face  ((t ( :foreground ,pg-onelight-variant-preproc))))
    `(font-lock-keyword-face       ((t ( :foreground ,pg-onelight-variant-keywords))))
    `(font-lock-string-face        ((t ( :foreground ,pg-onelight-variant-strings))))
    `(font-lock-doc-face           ((t ( :foreground ,pg-onelight-variant-docs
                                         :slant italic))))
    `(font-lock-comment-face       ((t ( :foreground ,pg-onelight-variant-comments
                                         :slant italic))))
    `(font-lock-type-face          ((t ( :foreground ,pg-onelight-variant-types))))
    `(font-lock-variable-name-face ((t ( :foreground ,pg-onelight-variant-vars))))
    `(font-lock-constant-face      ((t ( :foreground ,pg-onelight-variant-constants))))
    `(font-lock-doc-markup-face    ((t ( :foreground ,pg-onelight-variant-tags))))
    `(font-lock-builtin-face       ((t ( :foreground ,pg-onelight-variant-builtin))))))

  (provide-theme 'pg-onelight-variant)

#+end_src

*** UI basic settings

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  (load-theme 'pg-onedark-variant t) ;; Load onedark theme
  ;; (load-theme 'pg-onelight-variant t) ;; Load onelight theme
  (setq inhibit-startup-message t    ;; Disable startup message
        scroll-conservatively 1000   ;; Slow scrolling
        split-width-threshold 185)   ;; Width for splitting
  (unless pg/is-termux
    (scroll-bar-mode 0)              ;; Disable visible scrollbar
    (tool-bar-mode 0)                ;; Disable toolbar
    (tooltip-mode 0))
  (menu-bar-mode 0)                  ;; Disable menu bar

  ;; Set frame transparency
  (unless (or pg/is-termux (not pg/exwm-enabled))
    (set-frame-parameter nil 'alpha '90)
    (add-to-list 'default-frame-alist '(alpha . 90))
    (set-frame-parameter nil 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized)))

  ;; Set fullscreen
  (if pg/is-windows
      (add-to-list 'default-frame-alist '(fullscreen . maximized)))

#+end_src

*** Package | diminish

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  (straight-use-package 'diminish)
  (require 'diminish)

  (unless (fboundp 'diminish)
    (autoload #'diminish "diminish" nil t))
  (with-eval-after-load 'face-remap
    (diminish #'buffer-face-mode))
  (with-eval-after-load 'simple
    (diminish #'visual-line-mode))
  (with-eval-after-load 'autorevert
    (diminish #'auto-revert-mode))

#+end_src

*** Package | nerd-icons

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  (straight-use-package 'nerd-icons)
  (require 'nerd-icons)

#+end_src

*** Package | doom-modeline

Customizes the look of the modeline for better aesthetic.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  (defun pg/strip-file-name (file-path)
    "Strips hashes or dates at the beginning of file names. Presumes they are of
        length 10 at least"
    (let* ((tokens (s-split "/" file-path))
           (dirs (butlast tokens))
           (file-name (car (last tokens))))
      (s-join "/" (append dirs
                          (list (replace-regexp-in-string "^[0-9a-zA-Z]\\{10,\\}-" "...-" file-name))))))

  (straight-use-package 'doom-modeline)
  (require 'doom-modeline)
  (with-eval-after-load 'doom-modeline
    (setopt doom-modeline-height 17
            doom-modeline-modal-icon nil
            doom-modeline-enable-word-count t
            doom-modeline-indent-info t
            doom-modeline-buffer-file-name-function #'pg/strip-file-name
            doom-modeline-buffer-file-name-style 'truncate-except-project
            doom-modeline-mu4e t)
    (doom-modeline-mode 1))

#+end_src

*** Package | dashboard

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  (defun pg/dashboard-setup-startup-hook ()
    "Setup post initialization hooks."
    (add-hook 'after-init-hook #'(lambda ()
                                   ;; Display useful lists of items
                                   (dashboard-insert-startupify-lists)))
    (add-hook 'emacs-startup-hook #'(lambda ()
                                      (switch-to-buffer dashboard-buffer-name)
                                      (goto-char (point-min))
                                      (redisplay)
                                      (run-hooks 'dashboard-after-initialize-hook))))

  (defun pg/display-startup-time ()
    "Displays some startip statistics."
    (let ((package-count 0) (time (float-time (time-subtract after-init-time before-init-time))))
      (when (boundp 'straight--profile-cache)
        (setq package-count (+ (hash-table-count straight--profile-cache) package-count)))
      (if (zerop package-count)
          (format "Emacs started in %.2f" time)
        (format "%d packages loaded in %.2f seconds with %d garbage collections" package-count time gcs-done))))

  (add-hook 'dashboard-mode-hook #'(lambda ()
                                     (display-line-numbers-mode 0)))
  (straight-use-package 'dashboard)
  (with-eval-after-load 'projectile
    (require 'dashboard)
    (fset #'dashboard-setup-startup-hook #'pg/dashboard-setup-startup-hook))
  (setopt dashboard-items '((recents . 5)
                            (projects . 5)
                            (agenda . 5))
          dashboard-set-heading-icons t
          dashboard-projects-backend 'projectile
          dashboard-set-file-icons t
          dashboard-display-icons-p t
          dashboard-match-agenda-entry "task"
          dashboard-page-separator "\n\f\n"
          dashboard-init-info #'pg/display-startup-time)
  (with-eval-after-load 'dashboard
    (pg/dashboard-setup-startup-hook))

#+end_src

*** Package | page-break-lines

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  (straight-use-package 'page-break-lines)
  (require 'page-break-lines)

#+end_src

*** UI enhancement package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-ui.el

  (provide 'pg-ui)

#+end_src

** Window Management

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-buffer.el

  ;;; pg-buffer.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Window basic management

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-buffer.el

  (setq even-window-sizes nil
        display-buffer-base-action
        '(display-buffer-reuse-mode-window
          display-buffer-reuse-window
          display-buffer-same-window))

#+end_src

*** Package | bufler

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-buffer.el

  (straight-use-package 'bufler)
  (unless (fboundp 'bufler)
    (autoload #'bufler "bufler" nil t))
  (global-set-key (kbd "C-x C-b") #'bufler)
  (with-eval-after-load 'bufler
    (unless (fboundp 'evil-collection-define-key)
      (autoload #'evil-collection-define-key "evil-collection"))
    (evil-collection-define-key 'normal 'bufler-list-mode-map
      (kbd "RET") #'bufler-list-buffer-switch
      (kbd "M-RET") #'bufler-list-buffer-peek
      "D" #'bufler-list-buffer-kill))

#+end_src

*** Package | winner-mode

For window configurations

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-buffer.el

  (require 'winner)
  (with-eval-after-load 'winner
    (winner-mode)
    (with-eval-after-load 'general
      (pg/leader-keys
        "wu" '(winner-undo :which-key "undo config")
        "wr" '(winner-redo :which-key "redo config"))))

#+end_src

*** Package | tab-bar

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-buffer.el

  (require 'tab-bar)
  (with-eval-after-load 'tab-bar
    (setopt tab-bar-show 1)
    (tab-bar-mode)
    (with-eval-after-load 'general
      (pg/leader-keys
        "wt" '(:ignore t :which-key "tabs")
        "wtt" '(tab-new :which-key "create")
        "wtw" '(tab-close :which-key "close")
        "wtr" '(tab-rename :which-key "name")
        "wts" '(tab-switch :which-key "switch")
        "wtu" '(tab-undo :which-key "undo"))))

#+end_src

*** Package | perspective

For organizing the buffer list

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-buffer.el

  (straight-use-package 'perspective)
  (require 'perspective)
  (with-eval-after-load 'perspective
    (setopt persp-suppress-no-prefix-key-warning t)
    (global-set-key (kbd "C-x k") #'persp-kill-buffer*)
    (unless (equal persp-mode t)
      (persp-mode))
    (with-eval-after-load 'general
      (pg/leader-keys
        "wp" '(:ignore t :which-key "persp")
        "wpc" '(persp-switch :which-key "create")
        "wps" '(hydra-perspective-switch/body :which-key "switch")
        "wpa" '(persp-add-buffer :which-key "add buf")
        "wpu" '(persp-set-buffer :which-key "set buf")
        "wpk" '(persp-kill :which-key "remove"))))

#+end_src

*** Window management package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-buffer.el

  (provide 'pg-buffer)

#+end_src

** Email Management

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-email.el

  ;;; pg-email.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | mu4e

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-email.el

  (unless (or pg/is-termux
              pg/is-windows)
    (unless (fboundp 'mu4e)
      (autoload #'mu4e "mu4e" nil t))
    (unless (fboundp 'mu4e-compose-new)
      (autoload #'mu4e-compose-new "mu4e" nil t))
    (unless (fboundp 'corfu-mode)
      (autoload #'corfu-mode "corfu" nil t))
    (add-hook 'mu4e-main-mode-hook #'(lambda ()
                                       (display-line-numbers-mode 0)))
    (add-hook 'mu4e-view-mode-hook #'(lambda ()
                                       (display-line-numbers-mode 0)))
    (add-hook 'mu4e-compose-mode-hook #'corfu-mode)
    (remove-hook 'mu4e-main-mode-hook 'evil-collection-mu4e-update-main-view)
    (with-eval-after-load 'general
      (pg/leader-keys
        "m" '(:ignore t :which-key "email")
        "md" '(mu4e :which-key "dashboard")
        "mc" '(mu4e-compose-new :which-key "compose")))
    (with-eval-after-load 'mu4e
      (require 'mu4e-org)
      (setopt mail-user-agent #'mu4e-user-agent
              mu4e-change-filenames-when-moving t
              mu4e-update-interval (* 10 60)
              mu4e-get-mail-command "mbsync -a"
              mu4e-compose-format-flowed t
              mu4e-compose-signature-auto-include nil
              mu4e-sent-messages-behavior 'delete
              message-send-mail-function #'smtpmail-send-it
              mu4e-attachment-dir (plist-get pg/user :download)
              mu4e-maildir-shortcuts '(("/Main/Inbox" . 109)
                                       ("/Main/Jobs" . 106)
                                       ("/Main/University" . 115))
              mu4e-context-policy 'pick-first)
      (add-to-list 'mu4e-bookmarks
                   '( :name "Starred"
                      :query "flag:flagged"
                      :key ?f))
      (with-eval-after-load 'org-contacts
        (add-to-list 'mu4e-headers-actions
                     '("org-contact-add" . mu4e-action-add-org-contact) t)
        (add-to-list 'mu4e-view-actions
                     '("org-contact-add" . mu4e-action-add-org-contact) t))

      (setq mu4e-contexts
            (list
             (make-mu4e-context :name "Main"
                                :match-func (lambda (msg)
                                              (when msg
                                                (string-prefix-p "/Main" (mu4e-message-field msg :maildir))))
                                :vars `((user-mail-address . ,(plist-get pg/user :email))
                                        (user-full-name . ,(plist-get pg/user :name))
                                        (smtpmail-smtp-server . "smtp.office365.com")
                                        (smtpmail-smtp-user . ,(plist-get pg/user :email))
                                        (smtpmail-smtp-service . 587)
                                        (smtpmail-stream-type . starttls)
                                        (mu4e-drafts-folder . "/Main/Drafts")
                                        (mu4e-sent-folder . "/Main/Sent")
                                        (mu4e-refile-folder . "/Main/Archive")
                                        (mu4e-trash-folder . "/Main/Deleted")))
             ;; (make-mu4e-context :name "University"
             ;;                    :match-func (lambda (msg)
             ;;                                  (when msg
             ;;                                    (string-prefix-p "/University"
             ;;                                                     (mu4e-message-field msg :maildir))))
             ;;                    :vars '((user-mail-address . "philippe.gabriel.1@umontreal.ca")
             ;;                            (user-full-name . "Philippe Gabriel")
             ;;                            (smtpmail-smtp-server . "smtp.office365.com")
             ;;                            (smtpmail-smtp-user . "philippe.gabriel.1@umontreal.ca")
             ;;                            (smtpmail-smtp-service . 587)
             ;;                            (smtpmail-stream-type . starttls)
             ;;                            (mu4e-drafts-folder . "/University/Drafts")
             ;;                            (mu4e-sent-folder . "/University/Sent Items")
             ;;                            (mu4e-refile-folder . "/University/Archive")
             ;;                            (mu4e-trash-folder . "/University/Deleted Items")))
             ))))

#+end_src

*** Package | mu4e-alert

Allows for notification pop-up and mode line count when receiving emails

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-email.el

  (unless (or pg/is-termux
              pg/is-windows)
    (straight-use-package 'mu4e-alert)
    (with-eval-after-load 'mu4e
      (require 'mu4e-alert))
    (with-eval-after-load 'mu4e-alert
      (setopt mu4e-alert-notify-repeated-mails t
              mu4e-alert-email-notification-types '(subjects))
      (mu4e-alert-set-default-style 'notifications)
      (mu4e-alert-enable-notifications)
      (mu4e-alert-enable-mode-line-display)))

#+end_src

*** Email management package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-email.el

  (provide 'pg-email)

#+end_src

** Editing Experience

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  ;;; pg-editing.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Basic editing configuration

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (setq tab-width 4                     ;; Set tab length
        custom-buffer-indent 2
        display-line-numbers-type 'relative)
  (setq-default indent-tabs-mode nil    ;; Disable tab caracter
                fill-column 80)         ;; 80 caracter column indicator
  (show-paren-mode 1)                   ;; Enable delimiters matching
  (save-place-mode 1)                   ;; Remembers last cursor placement in file
  (column-number-mode 1)                ;; Show column numbers
  (mouse-avoidance-mode 'banish)        ;; No mouse allowed
  (global-display-line-numbers-mode 1)  ;; Show line numbers
  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
  (require 'ansi-color)
  (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)

  (dolist (mode '(compilation-mode-hook
                  Man-mode-hook
                  comint-mode-hook
                  etc-authors-mode-hook))
    (add-hook mode #'(lambda ()
                       (display-line-numbers-mode 0))))

#+end_src

*** Fonts

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (set-face-attribute 'default nil :font (plist-get pg/user :font-fixed) :weight 'light :height 120)
  (set-face-attribute 'fixed-pitch nil :family (plist-get pg/user :font-fixed) :weight 'light)
  (set-face-attribute 'variable-pitch nil :family (plist-get pg/user :font-variable) :weight 'regular)

#+end_src

*** Package | ligature

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package 'ligature)
  (require 'ligature)
  (with-eval-after-load 'ligature
    (ligature-set-ligatures 't
                            '("++" "--" "/=" "&&" "||" "||=" "->" "=>" "::" "__"
                              "==" "===" "!=" "=/=" "!==" "<=" ">=" "<=>" "/*"
                              "*/" "//" "///" "\\n" "\\\\" "<<" "<<<" "<<=" ">>"
                              ">>>" ">>=" "|=" "^=" "**" "?." "</" "<!--" "</>"
                              "-->" "/>" "www" "##" "###" "####" "#####" "######"
                              "--" "---" "----" "-----" "------" "====" "====="
                              "======" "[]" "<>" "<~>" "??" ".." "..." "=~" "!~"
                              ":=" "..<" "!!" ":::" "=!=" "=:=" "<:<" "..=" "::<"
                              "#{" "#(" "#_" "#_(" "#?" "#:" ".-" ";;" "~@" "<-"
                              "#{}" "|>" "=>>" "=<<" ">=>" "<=<" "=>=" "=<=" "<$"
                              "<$>" "$>" "<+" "<+>" "+>" "<*" "<*>" "*>" "<|>"
                              ".=" "#=" "+++" "***" ":>:" ":<:" "<|||" "<||" "<|"
                              "||>" "|||>" "[|" "|]" "~-" "~~" "%%" "/\\" "\\/"
                              "-|" "_|" "_|_" "|-" "||-" ":>" ":<" ">:" "<:" "::>"
                              "<::" ">::" "{|" "|}" "#[" "]#" "::=" "#!" "#="
                              "->>" ">-" ">>-" "->-" "->>-" "=>>=" ">>->" ">>=>"
                              "|->" "|=>" "~>" "~~>" "//=>" "<<-" "-<" "-<<" "-||"
                              "-<-" "-<<-" "=<" "=|" "=||" "=<<=" "<-<<" "<=<<"
                              "<-|" "<=|" "<~" "<~~" "<=//" "<->" "<<=>>" "|-|-|"
                              "|=|=|" "/=/"))
    (global-ligature-mode))

#+end_src

*** Package | rainbow-delimiters

Colors matching delimiters with different colours for distinguishability.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package 'rainbow-delimiters)
  (unless (fboundp 'rainbow-delimiters-mode)
    (autoload #'rainbow-delimiters-mode "rainbow-delimiters" nil t))
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

#+end_src

*** Package | abbrev-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (require 'abbrev)
  (with-eval-after-load 'abbrev
    (unless (fboundp 'diminish)
      (autoload #'diminish "diminish" nil t))
    (diminish #'abbrev-mode))

#+end_src

*** Package | highlight-indent-guides

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package 'highlight-indent-guides)
  (unless (fboundp 'highlight-indent-guides-mode)
    (autoload #'highlight-indent-guides-mode "rainbow-delimiters" nil t))
  (add-hook 'prog-mode-hook #'highlight-indent-guides-mode)
  (with-eval-after-load 'highlight-indent-guides
    (setopt highlight-indent-guides-responsive 'stack
            highlight-indent-guides-method 'character))

#+end_src

*** Package | smartparens

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (defvar pg/sp-post-command-count 0
    "Number of commands called after a pair has been opened.")

  (defun pg/sp-create-newline-and-enter-sexp ()
    "Open a new brace or bracket expression, with relevant newlines and indent. "
    (newline)
    (indent-according-to-mode)
    (previous-line)
    (indent-according-to-mode))

  (defun pg/sp-release-newline-post-command ()
    "Remove the hook and reset the post-command count."
    (remove-hook 'post-command-hook 'pg/sp-await-newline-post-command)
    (setq pg/sp-post-command-count 0))

  (defun pg/sp-await-newline-post-command ()
    "If command is newline, indent and enter sexp."
    (if (> pg/sp-post-command-count 1)
        (pg/sp-release-newline-post-command)
      (progn
        (setq pg/sp-post-command-count (1+ pg/sp-post-command-count))
        (when (memq this-command
                    '(newline newline-and-indent reindent-then-newline-and-indent))
          (pg/sp-release-newline-post-command)
          (pg/sp-create-newline-and-enter-sexp)))))

  (defun pg/sp-await-newline (id action context)
    (when (eq action 'insert)
      (add-hook 'post-command-hook 'pg/sp-await-newline-post-command)))

  (straight-use-package 'smartparens)
  (require 'smartparens-config)

  (sp-pair "(" nil :post-handlers '(:add pg/sp-await-newline))
  (sp-pair "{" nil :post-handlers '(:add pg/sp-await-newline))
  (sp-pair "[" nil :post-handlers '(:add pg/sp-await-newline))

  ;; (sp-local-pair 'nxml-mode "<" nil :actions nil)

  (smartparens-global-mode)

  (unless (fboundp 'diminish)
    (autoload #'diminish "diminish" nil t))
  (diminish #'smartparens-mode)

#+end_src

*** Package | outshine

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package 'outshine)
  (unless (fboundp 'outshine-mode)
    (autoload #'outshine-mode "outshine" nil t))
  (add-hook 'prog-mode-hook #'outshine-mode)

#+end_src

*** Package | selectric-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (defun pg/selectric-type-sound ()
    "Make the sound of the printing element hitting the paper."
    (progn
      (selectric-make-sound (format "%sselectric-move.wav" selectric-files-path))
      (unless (minibufferp)
        (if (= (current-column) (current-fill-column))
            (selectric-make-sound (format "%sping.wav" selectric-files-path))))))

  (straight-use-package 'selectric-mode)
  (fset #'selectric-type-sound #'pg/selectric-type-sound)
  (unless (fboundp 'selectric-mode)
    (autoload #'selectric-mode "selectric-mode" nil t))

#+end_src

*** Package | rainbow-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package 'rainbow-mode)
  (unless (fboundp 'rainbow-mode)
    (autoload #'rainbow-mode "rainbow-mode" nil t))
  (dolist (mode '(org-mode-hook
                  emacs-lorg-mode-hook
                  org-mode-hook
                  typescrorg-mode-hook
                  org-mode-hook
                  scss-mode-hook
                  less-css-mode-hook))
    (add-hook mode #'rainbow-mode))
  (with-eval-after-load 'rainbow-mode
    (unless (fboundp 'diminish)
      (autoload #'diminish "diminish" nil t))
    (diminish #'rainbow-mode))

#+end_src

*** Package | emojify

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package 'emojify)
  (require 'emojify)
  (with-eval-after-load 'emojify
    (global-emojify-mode))

#+end_src

*** Package | evil

Allows usage of vim-like keybindings for some modes in emacs.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (defun pg/evil-hook()
    "Configuration of some default modes."
    (dolist (mode '(messages-buffer-mode
                    dashboard-mode))
      (evil-set-initial-state mode 'normal))
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (straight-use-package 'evil)
  (setopt evil-want-keybinding nil)
  (add-hook 'evil-mode-hook #'pg/evil-hook)
  (require 'evil)
  (with-eval-after-load 'evil
    (setopt evil-want-integration t
            evil-want-C-u-scroll t
            evil-want-C-i-jump nil
            evil-want-Y-yank-to-eol t
            evil-want-fine-undo t
            evil-undo-system #'undo-redo)
    (unless (fboundp 'evil-normal-state)
      (autoload #'evil-normal-state "evil-states"))
    (define-key evil-insert-state-map (kbd "C-g") #'evil-normal-state)
    (evil-mode 1)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

#+end_src

*** Package | evil-collection

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package 'evil-collection)
  (with-eval-after-load 'evil
    (require 'evil-collection))
  (with-eval-after-load 'evil-collection
    (evil-collection-init)
    (unless (fboundp 'diminish)
      (autoload #'diminish "diminish" nil t))
    (diminish #'evil-collection-unimpaired-mode))

#+end_src

*** Package | editorconfig

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (straight-use-package 'editorconfig)
  (unless (fboundp 'editorconfig-mode)
    (autoload #'editorconfig-mode "editorconfig" nil t))
  (editorconfig-mode 1)
  (with-eval-after-load 'editorconfig
    (unless (fboundp 'diminish)
      (autoload #'diminish "diminish" nil t))
    (diminish #'editorconfig-mode))

#+end_src

*** Editing experience package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-editing.el

  (provide 'pg-editing)

#+end_src

** Help Documentation

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-help.el

  ;;; pg-help.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | helpful

Displays full documentations in place of the default help function.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-help.el

  (add-hook 'helpful-mode-hook #'(lambda ()
                                   (display-line-numbers-mode 0)))
  (straight-use-package 'helpful)
  (unless (fboundp 'helpful-callable)
    (autoload #'helpful-callable "helpful" nil t))
  (global-set-key [remap describe-function] #'helpful-callable)
  (unless (fboundp 'helpful-command)
    (autoload #'helpful-command "helpful" nil t))
  (global-set-key [remap describe-command] #'helpful-command)
  (unless (fboundp 'helpful-variable)
    (autoload #'helpful-variable "helpful" nil t))
  (global-set-key [remap describe-variable] #'helpful-variable)
  (unless (fboundp 'helpful-key)
    (autoload #'helpful-key "helpful" nil t))
  (global-set-key [remap describe-key] #'helpful-key)
  (unless (fboundp 'helpful-symbol)
    (autoload #'helpful-symbol "helpful" nil t))
  (global-set-key [remap describe-symbol] #'helpful-symbol)
  (with-eval-after-load 'general
    (pg/leader-keys
      "h" '(:ignore t :which-key "help")
      "hk" '(helpful-key :which-key "key")
      "hf" '(helpful-callable :which-key "command")
      "hv" '(helpful-variable :which-key "variable")
      "hb" '(describe-bindings :which-key "bindings")
      "hc" '(describe-face :which-key "face")
      "hp" '(describe-package :which-key "package")
      "hk" '(helpful-kill-buffers :which-key "quit")))

#+end_src

*** Package | Info

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-help.el

  (defun pg/Info-mode-setup ()
    "Defining some behaviours for the major info-mode."
    (auto-fill-mode 0)
    (display-line-numbers-mode 0)
    (setq-local face-remapping-alist '((default (:height 1.5) default)
                                       (info-menu-header (:height 1.5) info-menu-header)
                                       (info-title-1 (:height 1.05) info-title-1)
                                       (info-title-2 (:height 1.15) info-title-2)
                                       (info-title-3 (:height 1.15) info-title-3)
                                       (info-title-4 (:height 2.0) info-title-4)))
    (variable-pitch-mode 1)
    (visual-line-mode 1))
  (add-hook 'Info-mode-hook #'pg/Info-mode-setup)

#+end_src

*** Package | visual-fill-column

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-help.el

  (straight-use-package 'visual-fill-column)
  (unless (fboundp 'visual-fill-column-mode)
    (autoload #'visual-fill-column-mode "visual-fill-column" nil t))
  (dolist (mode '(org-mode-hook
                  gfm-view-mode-hook
                  elfeed-show-mode-hook
                  mu4e-view-mode-hook
                  nov-mode-hook
                  Info-mode-hook
                  eww-mode-hook))
    (add-hook mode #'(lambda ()
                       (visual-fill-column-mode 1))))
  (with-eval-after-load 'visual-fill-column
    (setopt visual-fill-column-width 150
            visual-fill-column-center-text t))

#+end_src

*** Help documentation package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-help.el

  (provide 'pg-help)

#+end_src

** Web Design

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-web.el

  ;;; pg-web.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | eww

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-web.el

  (defun pg/eww-mode-setup ()
    (auto-fill-mode 0)
    (display-line-numbers-mode 0)
    (visual-line-mode 1)
    (setq-local face-remapping-alist '((default (:height 1.5) default))))
  (add-hook 'eww-mode-hook #'pg/eww-mode-setup)

#+end_src

*** Web design package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-web.el

  (provide 'pg-web)

#+end_src

** File management

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  ;;; pg-file.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Temporary Files Management and Symlinks

Some settings to manage where emacs stores backup files (such as the =~= backup files).

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  (setopt backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory)))
          enable-remote-dir-locals t
          auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t))
          vc-follow-symlinks t)

#+end_src

*** Package | dired

The built-in directory editor. Some basic useful keybindings to keep in mind:
- ~j~ / ~k~ - Next / Previous line
- ~J~ - Jump to file in buffer
- ~RET~ - Select file or directory
- ~^~ - Go to parent directory
- ~g O~ - Open file in other window
- ~g o~ - Open file in other window in preview mode, which can be closed with ~q~
- ~M-RET~ - Show file in other window without focusing (previewing)

Keybindings relative to marking (selecting) in dired:
- ~m~ - Marks a file
- ~u~ - Unmarks a file
- ~U~ - Unmarks all files in buffer
- ~t~ - Inverts marked files in buffer
- ~% m~ - Mark files in buffer using regular expression
- ~*~ - Lots of other auto-marking functions
- ~K~ - "Kill" marked items, removed from the view only (refresh buffer with ~g r~ to get them back)
Many operations can be done on a single file if there are no active marks.

Keybindings relative to copying and renaming files:
- ~C~ - Copy marked files (or if no files are marked, the current file)
- ~R~ - Rename marked files
- ~% R~ - Rename based on regular expression

Keybindings relative to deleting files:
- ~D~ - Delete marked file
- ~d~ - Mark file for deletion
- ~x~ - Execute deletion for marks
- ~delete-by-moving-to-trash~ - Move to trash instead of deleting permanently if set to true

Keybindings relative to archives and compressing:
- ~Z~ - Compress or uncompress a file or folder to (.tar.gz)
- ~c~ - Compress selection to a specific file
- ~dired-compress-files-alist~ - Bind compression commands to file extension by adding additional extensions to the list

Keybindings for other useful operations:
- ~T~ - Touch (change timestamp)
- ~M~ - Change file mode
- ~O~ - Change file owner
- ~G~ - Change file group
- ~S~ - Create a symbolic link to this file
- ~L~ - Load an Emacs Lisp file into Emacs
  
#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  (unless (fboundp 'dired)
    (autoload #'dired "dired" nil t))
  (unless (fboundp 'dired-jump)
    (autoload #'dired-jump "dired" nil t))
  (global-set-key (kbd "C-x C-j") #'dired-jump)
  (with-eval-after-load 'dired
    (setopt dired-listing-switches "-Alh --group-directories-first"))

#+end_src

*** Package | dired-single

Keeps a single dired buffer open at a time (to not have multiple buried buffers).

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  (straight-use-package 'dired-single)
  (with-eval-after-load 'dired
    (require 'dired-single))
  (with-eval-after-load 'dired-single
    (if (boundp 'dired-mode-map)
        (progn
          (define-key dired-mode-map [remap dired-find-file] 'dired-single-buffer)
          (define-key dired-mode-map [remap dired-mouse-find-file-other-window] 'dired-single-buffer-mouse)
          (define-key dired-mode-map [remap dired-up-directory] 'dired-single-up-directory)))
    (unless (fboundp 'evil-collection-define-key)
      (autoload #'evil-collection-define-key "evil-collection"))
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" #'dired-single-up-directory
      "l" #'dired-single-buffer))

#+end_src

*** Package | nerd-icons-dired

Displays icons in dired-mode.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  (straight-use-package 'nerd-icons-dired)
  (unless pg/is-termux
    (unless (fboundp 'nerd-icons-dired-mode)
      (autoload #'nerd-icons-dired-mode "nerd-icons-dired" nil t))
    (add-hook 'dired-mode-hook #'nerd-icons-dired-mode))

#+end_src

*** Package | dired-hide-dotfiles

Togglable option for hiding dot files.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  (straight-use-package 'dired-hide-dotfiles)
  (with-eval-after-load 'dired
    (unless (fboundp 'dired-hide-dotfiles-mode)
      (autoload #'dired-hide-dotfiles-mode "dired-hide-dotfiles" nil t))
    (add-hook 'dired-mode-hook #'dired-hide-dotfiles-mode)
    (with-eval-after-load 'evil-collection
      (evil-collection-define-key 'normal 'dired-mode-map
        "H" #'dired-hide-dotfiles-mode)))

#+end_src

*** Package | openwith

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  (unless pg/is-termux
    (straight-use-package 'openwith)
    (when (require 'openwith nil 'noerror)
      (setopt large-file-warning-threshold nil
              openwith-associations `((,(openwith-make-extension-regexp '("mpg"
                                                                          "mpeg"
                                                                          "mp4"
                                                                          "avi"
                                                                          "wmv"
                                                                          "mov"
                                                                          "flv"
                                                                          "ogm"
                                                                          "ogg"
                                                                          "mkv"))
                                       "mpv"
                                       (file))
                                      (,(openwith-make-extension-regexp '("odt"
                                                                          "ods"))
                                       "libreoffice"
                                       (file))
                                      (,(openwith-make-extension-regexp '("xopp"))
                                       "xournalpp"
                                       (file)))))
    (openwith-mode 1))

#+end_src

*** Package | subed

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  (straight-use-package 'subed)
  (with-eval-after-load 'subed
    (dolist (mode #'(save-place-local-mode
                     turn-on-auto-fill))
      (add-hook 'subed-mode-hook mode)))

#+end_src

*** File management package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-file.el

  (provide 'pg-file)

#+end_src

** Shell customization

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-shell.el

  ;;; pg-shell.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | eshell-git-prompt

Adds more detail to the prompt in eshell with custome themes.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-shell.el

  (straight-use-package 'eshell-git-prompt)
  (with-eval-after-load 'eshell
    (require 'eshell-git-prompt))
  (with-eval-after-load 'eshell-git-prompt
    (eshell-git-prompt-use-theme 'multiline2))

#+end_src

*** Package | eshell-syntax-highlighting

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-shell.el

  (straight-use-package 'eshell-syntax-highlighting)
  (with-eval-after-load 'eshell
    (require 'eshell-syntax-highlighting))
  (with-eval-after-load 'eshell-syntax-highlighting
    (setopt eshell-syntax-highlighting-global-mode t))

#+end_src

*** Package | esh-autosuggest

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-shell.el

  (straight-use-package 'esh-autosuggest)
  (with-eval-after-load 'eshell
    (unless (fboundp 'esh-autosuggest-mode)
      (autoload #'esh-autosuggest-mode "esh-autosuggest" nil t))
    (add-hook 'eshell-mode-hook #'esh-autosuggest-mode))
  (with-eval-after-load 'esh-autosuggest
    (setopt esh-autosuggest-delay 0.5))

#+end_src

*** Package | eshell

Some configurations to the built-in eshell.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-shell.el

  (defun pg/configure-eshell ()
    "Eshell setup."
    (with-eval-after-load 'evil
      (evil-define-key '(normal insert visual) eshell-mode-map
        (kbd "<home>") #'eshell-bol)
      (evil-normalize-keymaps))

    (with-eval-after-load 'corfu
      (corfu-mode))

    (require 'em-hist)
    (with-eval-after-load 'em-hist
      (setopt eshell-history-size 10000
              eshell-hist-ignoredups t)
      (require 'esh-cmd)
      (with-eval-after-load 'esh-cmd
        (add-hook 'eshell-pre-command-hook #'eshell-save-some-history)))

    (require 'esh-mode)
    (with-eval-after-load 'esh-mode
      (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
      (setopt eshell-buffer-maximum-lines 10000
              eshell-scroll-to-bottom-on-input 'all)))

  (add-hook 'eshell-mode-hook #'(lambda ()
                                  (display-line-numbers-mode 0)))
  (require 'esh-mode)
  (with-eval-after-load 'esh-mode
    (add-hook 'eshell-first-time-mode-hook #'pg/configure-eshell))
  (unless (fboundp 'eshell)
    (autoload #'eshell "eshell" nil t))
  (with-eval-after-load 'eshell
    (require 'em-tramp)
    (setopt eshell-prefer-lisp-functions t))
  (with-eval-after-load 'general
    (pg/leader-keys
      "pe" '(eshell :which-key "eshell")))

#+end_src

*** Package | vterm

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-shell.el

  (unless pg/is-guix-system
    (straight-use-package 'vterm))
  (unless (fboundp 'vterm)
    (autoload #'vterm "vterm" nil t))
  (add-hook 'vterm-mode-hook #'(lambda ()
                                 (display-line-numbers-mode 0)))
  (with-eval-after-load 'vterm
    (setopt vterm-tramp-shells `(("ssh" ,(executable-find "sh")))))
  (with-eval-after-load 'general
    (pg/leader-keys
      "pv" '(vterm :which-key "vterm")))

#+end_src

*** Shell customization package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-shell.el

  (provide 'pg-shell)

#+end_src

** Project Management and Version Control

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-project.el

  ;;; pg-project.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | projectile

Allows for git projects management. Accessed using the ~C-c p~ prefix. Some important notes:
- ~C-c p E~ - Allows creation of a local dirs dot file for pre-defining the values for some important other projectile variables.
  - If variables have not been set after this change then evaluate (~M-:~) the following function ~(hack-dir-local-variables)~.
- ~C-c p s r~ - Allows for use of the ~ripgrep~ command across the current reopository. Useful along with ~C-c C-o~ to pop out the results from the minibuffer into another buffer.
Note that the emacs built-in local dir creation can also be used and is more flexible.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-project.el

  (straight-use-package 'projectile)
  (require 'projectile)
  (add-hook 'lsp-mode-hook #'projectile-mode)
  (with-eval-after-load 'projectile
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (setopt projectile-project-search-path (list (concat (plist-get pg/user :home) "/Workspace"))
            projectile-switch-project-action #'projectile-dired)
    (unless (fboundp 'diminish)
      (autoload #'diminish "diminish" nil t))
    (diminish #'projectile-mode)

    (projectile-update-project-type 'angular
                                    :marker-files '("angular.json")
                                    :project-file "package.json"
                                    :compile "npm run build"
                                    :install "npm install"
                                    :run "npm start"
                                    :test "npm test")

    (projectile-update-project-type 'maven
                                    :compile "./mvnw clean compile"
                                    :test "./mvnw test"
                                    :install "./mvwn clean install"
                                    :package "./mvnw clean package")

    (with-eval-after-load 'general
      (pg/leader-keys
        "p" '(:ignore t :which-key "project")
        "pf" '(projectile-find-file :which-key "find file")
        "ps" '(projectile-switch-project :which-key "switch project")
        "pr" '(projectile-run-project :which-key "run")
        "pc" '(projectile-compile-project :which-key "compile"))))

#+end_src

*** Package | magit

Allows for git commands to be applied to the current repository using the command ~C-x g~ which invokes a ~git status~ command with some additional information. Typing ~?~ invokes a list of possible commands, typing ~?~ again invokes the help function for the different commands and typing ~?~ a third time invokes the manual for the package.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-project.el

  (straight-use-package 'magit)
  (unless (fboundp 'magit-status)
    (autoload #'magit-status "magit-status" nil t))
  (unless (fboundp 'magit-clone)
    (autoload #'magit-clone "magit-clone" nil t))
  (add-hook 'magit-popup-mode-hook #'(lambda ()
                                       (display-line-numbers-mode 0)))
  (with-eval-after-load 'magit
    (if pg/is-windows
        (setenv "SSH_ASKPASS" "git-gui--askpass"))
    (setopt magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  (with-eval-after-load 'general
    (pg/leader-keys
      "g" '(:ignore t :which-key "git")
      "gs" '(magit-status :which-key "status")
      "gc" '(magit-clone :which-key "clone")))

#+end_src

*** Package | git-gutter

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-project.el

  (straight-use-package 'git-gutter)
  (unless (fboundp 'git-gutter-mode)
    (autoload #'git-gutter-mode "git-gutter" nil t))
  (dolist (mode '(text-mode-hook
                  prog-mode-hook))
    (add-hook mode #'git-gutter-mode))
  (with-eval-after-load 'git-gutter
    (set-face-foreground 'git-gutter:added "LightGreen")
    (set-face-foreground 'git-gutter:modified "LightGoldenrod")
    (set-face-foreground 'git-gutter:deleted "LightCoral")
    (unless (fboundp 'diminish)
      (autoload #'diminish "diminish" nil t))
    (diminish #'git-gutter-mode))

#+end_src

*** Package | forge

Adds git forges to magit.
Steps to get working:
- Run ~forge-pull~ at the current git repo

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-project.el

  (unless pg/is-windows
    (straight-use-package 'forge)
    (with-eval-after-load 'magit
      (require 'forge))
    (with-eval-after-load 'forge
      (setopt forge-add-default-bindings nil))
    (with-eval-after-load 'general
      (pg/leader-keys
        "gf" '(forge-pull :which-key "forge"))))

#+end_src

*** Project management and version control package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-project.el

  (provide 'pg-project)

#+end_src

** IDE Functionalities 

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  ;;; pg-programming.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | lsp-mode

Language Server Protocol for basic IDE functionalities. See [[https://emacs-lsp.github.io/lsp-mode/page/languages/][here]] for how to setup for different languages.
The ~lsp-ui-doc-focus-frame~ command allows to access the documentation frame of the pop-up.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (defun pg/lsp-mode-setup ()
    "Displays structure of cursor position for all buffers."
    (lsp-lens-mode)
    (lsp-headerline-breadcrumb-mode))

  (straight-use-package 'lsp-mode)
  (add-hook 'lsp-mode-hook #'pg/lsp-mode-setup)
  (unless (fboundp 'lsp)
    (autoload #'lsp "lsp-mode" nil t))
  (unless (fboundp 'lsp-deferred)
    (autoload #'lsp-deferred "lsp-mode" nil t))
  (with-eval-after-load 'lsp
    (require 'lsp-completion)
    (setopt lsp-completion-provider :none
            lsp-keymap-prefix "C-c l")
    (lsp-enable-which-key-integration t))
  (with-eval-after-load 'general
    (pg/leader-keys
      "l" '(:ignore t :which-key "lsp")))

#+end_src

*** Package | lsp-ui

Displays useful doc on hover.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'lsp-ui)
  (unless (fboundp 'lsp-ui-mode)
    (autoload #'lsp-ui-mode "lsp-ui" nil t))
  (add-hook 'lsp-mode-hook #'lsp-ui-mode)
  (with-eval-after-load 'lsp-ui
    (setopt lsp-ui-doc-position 'bottom
            lsp-ui-doc-show-with-cursor t
            lsp-ui-doc-include-signature t))

#+end_src

*** Package | lsp-treemacs

Tree views in emacs.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'lsp-treemacs)
  (with-eval-after-load 'lsp-mode
    (require 'lsp-treemacs))
  (add-hook 'treemacs-mode-hook #'(lambda ()
                                    (display-line-numbers-mode 0)))
  (with-eval-after-load 'lsp-treemacs
    (with-eval-after-load 'general
      (pg/leader-keys
        "lt" '(treemacs :which-key "tree")
        "lo" '(lsp-treemacs-symbols :which-key "outline")
        "le" '(lsp-treemacs-errors-list :which-key "errors"))))

#+end_src

*** Package | company

For auto-completions while coding.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
    "Configures company backend with yasnippet for autocomplete candidates."
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (straight-use-package 'company)
  (unless (fboundp 'company-mode)
    (autoload #'company-mode "company" nil t))
  (add-hook 'prog-mode-hook #'company-mode)
  (unless (fboundp 'company-complete-selection)
    (autoload #'company-complete-selection "company" nil t))
  (if (boundp 'company-active-map)
      (define-key company-active-map (kbd "<tab>") #'company-complete-selection)
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "<tab>") #'company-complete-selection)))
  (with-eval-after-load 'lsp-mode
    (unless (fboundp 'company-indent-or-complete-common)
      (autoload #'company-indent-or-complete-common "company" nil t))
    (define-key lsp-mode-map (kbd "<tab>") #'company-indent-or-complete-common))
  (with-eval-after-load 'company
    (setopt company-minimum-prefix-length 1
            company-idle-delay 0.0
            company-dabbrev-downcase nil
            company-tooltip-minimum-width 40
            company-tooltip-maximum-width 60)
    (with-eval-after-load 'yasnippet
      (setopt company-backends (mapcar #'company-mode/backend-with-yas company-backends))))

#+end_src

*** Package | company-box

Includes icons for company mode suggestions.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'company-box)
  (unless (fboundp 'company-box-mode)
    (autoload #'company-box-mode "company-box" nil t))
  (add-hook 'company-mode-hook #'company-box-mode)

#+end_src

*** Package | company-prescient

Remembers autocomplete selections.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'company-prescient)
  (with-eval-after-load 'company
    (require 'prescient)
    (with-eval-after-load 'prescient
      (require 'company-prescient)))
  (with-eval-after-load 'company-prescient
    (setopt company-prescient-mode 1))

#+end_src

*** Package | flycheck

Syntax checking.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'flycheck)
  (unless (fboundp 'flycheck-mode)
    (autoload #'flycheck-mode "flycheck" nil t))
  (add-hook 'lsp-mode-hook #'flycheck-mode)

#+end_src

*** Package | dap-mode

Debugger Adaptor Protocol for IDE debugging commands. See [[https://emacs-lsp.github.io/dap-mode/page/configuration/][here]] for how to setup for different languages.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (with-eval-after-load 'lsp-mode
    (require 'dap-mode))
  (with-eval-after-load 'dap-mode
    (setopt dap-mode 1
            dap-ui-mode 1
            dap-ui-controls-mode 1))

#+end_src

*** Package | plantuml-mode

Allows writing textual descriptions for creating uml diagrams

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'plantuml-mode)
  (with-eval-after-load 'plantuml-mode
    (setopt plantuml-indent-level 4
            ;; plantuml-jar-path (expand-file-name "~/.guix-home/share/java/plantuml.jar")
            plantuml-default-exec-mode 'jar))

#+end_src

*** Package | comment-dwim-2

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'comment-dwim-2)
  (unless (fboundp 'comment-dwim-2)
    (autoload #'comment-dwim-2 "comment-dwim-2" nil t))
  (global-set-key (kbd "M-/") #'comment-dwim-2)
  (unless (fboundp 'org-comment-dwim-2)
    (autoload #'org-comment-dwim-2 "comment-dwim-2" nil t))
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "M-/") #'org-comment-dwim-2))

#+end_src

*** Package | treesitter

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (setq treesit-language-source-alist
        '((bash "https://github.com/tree-sitter/tree-sitter-bash")
          (c "https://github.com/tree-sitter/tree-sitter-c")
          (c++ "https://github.com/tree-sitter/tree-sitter-cpp")
          (clojure "https://github.com/sogaiu/tree-sitter-clojure")
          (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
          (java "https://github.com/tree-sitter/tree-sitter-java")
          (python "https://github.com/tree-sitter/tree-sitter-python")
          (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
          (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")))

  (setopt major-mode-remap-alist '((sh-mode . bash-ts-mode)
                                   (python-mode . python-ts-mode)
                                   (javascript-mode . tsx-ts-mode)
                                   (clojure-mode . clojure-ts-mode)))

#+end_src

*** Package | yasnippet

Allows for code snippets for different languages.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'yasnippet)
  (unless (fboundp 'yas-minor-mode)
    (autoload #'yas-minor-mode "yasnippet" nil t))
  (add-hook 'prog-mode-hook #'yas-minor-mode)
  (add-hook 'yas-minor-mode-hook #'(lambda ()
                                     (yas-activate-extra-mode 'fundamental-mode)))
  (with-eval-after-load 'yasnippet
    (yas-global-mode)
    (unless (fboundp 'diminish)
      (autoload #'diminish "diminish" nil t))
    (diminish #'yas-minor-mode))

#+end_src

*** Package | yasnippet-snippets

Collection of code snippets for yasnippet.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'yasnippet-snippets)
  (with-eval-after-load 'yasnippet
    (require 'yasnippet-snippets))

#+end_src

*** Package | direnv

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (straight-use-package 'direnv)
  (unless (fboundp 'direnv-mode)
    (autoload #'direnv-mode "direnv" nil t))
  (direnv-mode)

#+end_src

*** IDE functionalities package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming.el

  (provide 'pg-programming)

#+end_src

*** Languages

**** Ada

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-ada.el

  ;;; pg-programming-ada.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | ada-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-ada.el

  (straight-use-package 'ada-mode)

#+end_src

***** Ada Package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-ada.el

  (provide 'pg-programming-ada)

#+end_src

**** Alloy

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-alloy.el

  ;;; pg-programming-alloy.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** HOLD Package | alloy-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-alloy.el

  ;; (straight-use-package 'alloy-mode)
  ;; (add-hook 'alloy-mode-hook #'(lambda ()
  ;;                                (setq indent-tabs-mode nil)))
  ;; (with-eval-after-load 'alloy-mode
  ;;   (setopt alloy-base-offset 4))

#+end_src

***** Alloy package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-alloy.el

  (provide 'pg-programming-alloy)

#+end_src

**** Arduino

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-arduino.el

  ;;; pg-programming-arduino.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | arduino-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-arduino.el

  (unless (or pg/is-termux
              pg/is-windows)
    (defconst sketch-bare-minimum
      (concat "/**\n * @author Philippe Gabriel\n */\n\n"
              "void setup() {\n  // put your setup code here, to run once:\n}\n\n"
              "void loop() {\n  // put your main code here, to run repeatedly:\n}")
      "Arduino sketches bare minimum code.")

    (defun pg/arduino-serial-monitor ()
      "Opens the Arduino Serial Monitor."
      (interactive)
      (switch-to-buffer-other-window (buffer-name))
      (arduino-serial-monitor "/dev/ttyACM0" 9600))

    (defun pg/arduino-sketch-new (sketch)
      "Creates a new Arduino Sketch."
      (interactive (list (read-from-minibuffer "Arduino new sketch file: ")))
      (unless (featurep 'arduino-mode)
        (require 'arduino-mode))
      (let* ((sketch-dir (concat arduino-mode-home "Sketches/code/" sketch))
             (sketch-file (concat sketch-dir "/" sketch ".ino")))
        (make-directory sketch-dir)
        (write-region sketch-bare-minimum nil sketch-file nil nil nil t)
        (find-file sketch-file)))

    (straight-use-package 'arduino-mode)
    (unless (fboundp 'flycheck-arduino-setup)
      (autoload #'flycheck-arduino-setup "flycheck-arduino" nil t))
    (add-hook 'arduino-mode-hook #'flycheck-arduino-setup)
    (with-eval-after-load 'arduino-mode
      (setopt arduino-executable (concat (plist-get pg/user :home) "/bin/arduino-flat")
              arduino-mode-home (concat (plist-get pg/user :home) "/Workspace/Arduino/"))
      (define-key arduino-mode-map (kbd "C-c RET") #'pg/arduino-serial-monitor)
      (with-eval-after-load 'lsp-mode
        (add-to-list 'lsp-language-id-configuration '(arduino-mode . "arduino"))
        (lsp-register-client
         (make-lsp--client
          :new-connection (lsp-stdio-connection `("arduino-language-server"
                                                  ;; "-clangd" ,(concat (getenv "GUIX_EXTRA_PROFILES") "cc/cc/bin/clangd")
                                                  "-cli" ,(concat (plist-get pg/user :home) "/Packages/arduino-cli")
                                                  "-cli-config" ,(concat (plist-get pg/user :home) "/.arduino15/arduino-cli.yaml")
                                                  "-fqbn" "arduino:avr:uno"))
          :major-modes '(arduino-mode)
          :server-id 'arduino)))))

#+end_src

***** Package | company-arduino

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-arduino.el

  (unless (or pg/is-termux
              pg/is-windows)
    (straight-use-package 'company-arduino)
    (add-hook 'irony-mode-hook 'company-arduino-turn-on)
    (unless (fboundp 'irony-mode)
      (autoload #'irony-mode "irony" nil t))
    (add-hook 'arduino-mode-hook 'irony-mode)
    (setq company-arduino-sketch-directory-regex (concat (plist-get pg/user :home) "/Workspace/Arduino")))

#+end_Src

***** Arduino package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-arduino.el

  (provide 'pg-programming-arduino)

#+end_src

**** C/C++/Objective-C

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-cc.el

  ;;; pg-programming-cc.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | cc-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-cc.el

  ;; TODO: Get guix shell path with direnv
  (with-eval-after-load 'cc-mode
    (setopt company-clang-executable (concat (getenv "GUIX_EXTRA_PROFILES") "/cc/cc/bin/clang")))

#+end_src

***** Package | cc-vars

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-cc.el

  (with-eval-after-load 'cc-mode
    (require 'cc-vars))
  (with-eval-after-load 'cc-vars
    (setopt c-basic-offset 4))

#+end_src

***** Package | company-c-headers

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-cc.el

  ;; TODO: Find fix with direnv
  (defun pg/company-c-headers-get-system-path ()
    "Return the system include path for the current buffer."
    (let ((default `(,(expand-file-name "~/.guix-extra-profiles/cc/cc/include/"))))
      (company-arduino-append-include-dirs default t)))

  (straight-use-package 'company-c-headers)
  (with-eval-after-load 'company
    (with-eval-after-load 'cc-mode
      (require 'company-c-headers)))
  (with-eval-after-load 'company-c-headers
    (setopt company-c-headers-path-system 'pg/company-c-headers-get-system-path)
    (add-to-list 'company-backends '(company-c-headers :with company-yasnippet)))

#+end_src

***** Package | ccls

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-cc.el

  (straight-use-package 'ccls)
  (with-eval-after-load 'cc-mode
    (with-eval-after-load 'lsp-mode
      (require 'ccls)))
  (dolist (mode '(c-mode-hook
                  c++-mode-hook
                  objc-mode-hook))
    (add-hook mode #'lsp-deferred))

#+end_src

***** Package | irony

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-cc.el

  (straight-use-package 'irony)
  (dolist (mode '(c-mode-hook
                  c++-mode-hook
                  objc-mode-hook))
    (add-hook mode #'irony-mode))
  (add-hook 'irony-mode-hook #'irony-cdb-autosetup-compile-options)

#+end_src

***** Package | company-irony

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-cc.el

  (straight-use-package 'company-irony)

#+end_src

***** C languages package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-cc.el

  (provide 'pg-programming-cc)

#+end_src

**** Clojure

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-clojure.el

  ;;; pg-programming-clojure.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | clojure-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-clojure.el

  (straight-use-package 'clojure-mode)
  (unless (fboundp 'lsp-deferred)
    (autoload #'lsp-deferred "lsp-mode" nil t))
  (add-hook 'clojure-mode-hook #'lsp-deferred)

#+end_src

***** Clojure package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-clojure.el

  (provide 'pg-programming-clojure)

#+end_src

**** Common Lisp

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-commonlisp.el

  ;;; pg-programming-commonlisp.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | sly

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-commonlisp.el

  (straight-use-package 'sly)
  (unless (fboundp 'sly)
    (autoload #'sly "sly" nil t))
  (with-eval-after-load 'sly
    (setopt inferior-lisp-program "sbcl"))

#+end_src

***** Common lisp package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-commonlisp.el

  (provide 'pg-programming-commonlisp)

#+end_src

**** Css

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-css.el

  ;;; pg-programming-css.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | css-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-css.el

  (with-eval-after-load 'css-mode
    (setopt css-indent-offset 2))

#+end_src

***** Package | lsp-css

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-css.el

  (unless (fboundp 'lsp-deferred)
    (autoload #'lsp-deferred "lsp-mode" nil t))
  (dolist (mode '(css-mode-hook
                  less-css-mode-hook
                  scss-mode-hook))
    (add-hook mode #'lsp-deferred))

#+end_src

***** Css package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-css.el

  (provide 'pg-programming-css)

#+end_src

**** Docker

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-docker.el

  ;;; pg-programming-docker.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | docker

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-docker.el

  (straight-use-package 'docker)
  (add-to-list 'auto-mode-alist
               (cons (concat "[/\\]"
                             "\\(?:Containerfile\\|Dockerfile\\)"
                             "\\(?:\\.[^/\\]*\\)?\\'")
                     'dockerfile-ts-mode))
  (add-hook 'dockerfile-ts-mode-hook #'lsp-deferred)

#+end_src

***** Docker package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-docker.el

  (provide 'pg-programming-docker)

#+end_src

**** Emacs Lisp

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-elisp.el

  ;;; pg-programming-elisp.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | ielm

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-elisp.el

  (unless (fboundp 'corfu-mode)
    (autoload #'corfu-mode "corfu" nil t))
  (add-hook 'ielm-mode-hook #'corfu-mode)
  (add-hook 'ielm-mode-hook #'(lambda ()
                                (display-line-numbers-mode 0)))

#+end_src

***** Emacs Lisp Package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-elisp.el

  (provide 'pg-programming-elisp)

#+end_src

**** Erlang

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-erlang.el

  ;;; pg-programming-erlang.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | erlang

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-erlang.el

  (straight-use-package 'erlang)
  (add-hook 'erlang-mode-hook #'lsp-deferred)

#+end_src

***** Erlang Package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-erlang.el

  (provide 'pg-programming-erlang)

#+end_src

**** GDScript
***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-gdscript.el

  ;;; pg-programming-gdscript.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | gdscript-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-gdscript.el

  (straight-use-package 'gdscript-mode)
  (setopt lsp-gdscript-port 6008
          gdscript-use-tab-indents nil)

#+end_src

***** GDScript Package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-gdscript.el

  (provide 'pg-programming-gdscript)

#+end_src

**** Git

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-git.el

  ;;; pg-programming-git.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | git-modes

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-git.el

  (straight-use-package 'git-modes)

#+end_src

***** Git Package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-git.el

  (provide 'pg-programming-git)

#+end_src

**** Groovy
***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-groovy.el

  ;;; pg-programming-groovy.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | groovy-emacs-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-groovy.el

  (straight-use-package '(groovy-emacs-modes :type git
                                             :host github
                                             :repo "Groovy-Emacs-Modes/groovy-emacs-modes"))

#+end_src

***** Groovy Package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-groovy.el

  (provide 'pg-programming-groovy)

#+end_src

**** Haskell

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-haskell.el

  ;;; pg-programming-haskell.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | haskell-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-haskell.el

  (add-hook 'inferior-haskell-mode-hook #'(lambda ()
                                            (display-line-numbers-mode 0)))
  (straight-use-package 'haskell-mode)
  (with-eval-after-load 'haskell-mode
    (setopt haskell-process-type 'ghci))

#+end_src

***** Haskell package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-haskell.el

  (provide 'pg-programming-haskell)

#+end_src

**** HTML

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-html.el

  ;;; pg-programming-html.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | mhtml-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-html.el

  (add-hook 'mhtml-mode-hook #'lsp-deferred)

#+end_src

***** Package | web-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-html.el

  (straight-use-package 'web-mode)
  (setopt web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-markup-indent-offset 2
          web-mode-markup-comment-indent-offset 2
          web-mode-enable-curly-brace-indentation t)

#+end_src

***** HTML package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-html.el

  (provide 'pg-programming-html)

#+end_src

**** I3wm Config

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-i3config.el

  ;;; pg-programming-i3config.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | i3wm-Config-Mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-i3config.el

  (straight-use-package 'i3wm-config-mode)
  (unless (fboundp 'i3wm-config-mode)
    (autoload #'i3wm-config-mode "i3wm-config-mode" nil t))

#+end_src

***** I3wm Config package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-i3config.el

  (provide 'pg-programming-i3config)

#+end_src

**** Java

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-java.el

  ;;; pg-programming-java.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | lsp-java

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-java.el

  (defun pg/spring-boot-properties ()
    "Makes appropriate calls when opening a spring properties file."
    (when (not (equal nil (string-match-p "application\\(-?[^-]+\\)?\\.properties"
                                          (file-name-nondirectory (buffer-file-name)))))
      (progn (run-hooks 'prog-mode-hook)
             (lsp-deferred))))

  (straight-use-package 'lsp-java)
  (unless (fboundp 'lsp-deferred)
    (autoload #'lsp-deferred "lsp-mode" nil t))
  (add-hook 'java-mode-hook #'lsp-deferred)
  (unless (fboundp 'lsp-java-boot-lens-mode)
    (autoload #'lsp-java-boot-lens-mode "lsp-java-boot" nil t))
  (add-hook 'java-mode-hook #'lsp-java-boot-lens-mode)
  (with-eval-after-load 'lsp-mode
    (require 'lsp-java))
  (with-eval-after-load 'lsp-java
    (add-hook 'find-file-hook #'pg/spring-boot-properties)
    (dolist (feature '(dap-java
                       lsp-java-boot))
      (require feature))
    (define-key lsp-mode-map (kbd "C-<return>") #'lsp-execute-code-action)
    (setopt lsp-java-configuration-runtimes `[( :name "JavaSE-17"
                                                :path ,(getenv "JAVA_HOME")
                                                :default t)]
            lsp-java-vmargs (list "-noverify" "-Xmx1G" "-XX:+UseG1GC" "-XX:+UseStringDeduplication" "--enable-preview")
            lsp-java-java-path "java"
            lsp-java-import-gradle-java-home (getenv "JAVA_HOME")))

#+end_src

***** Java package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-java.el

  (provide 'pg-programming-java)

#+end_src

**** Javascript

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-javascript.el

  ;;; pg-programming-javascript.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | js

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-javascript.el

  (add-hook 'js-mode-hook #'lsp-deferred)
  (unless (fboundp 'javascript-mode)
    (autoload #'javascript-mode "js" nil t))
  (with-eval-after-load 'js
    (setopt js-indent-level 2))

#+end_src

***** Javascript package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-javascript.el

  (provide 'pg-programming-javascript)

#+end_src

**** JSON

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-json.el

  ;;; pg-programming-json.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | json-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-json.el

  (straight-use-package 'json-mode)

#+end_src

***** JSON package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-json.el

  (provide 'pg-programming-json)

#+end_src

**** LaTeX

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-tex.el

  ;;; pg-programming-tex.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | auctex

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-tex.el

  (straight-use-package 'auctex)
  (add-hook 'TeX-mode-hook #'(lambda nil (run-hooks 'prog-mode-hook)))
  (unless (fboundp 'TeX-revert-document-buffer)
    (autoload #'TeX-revert-document-buffer "tex-mode" nil t))
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  (unless (fboundp 'latex-mode)
    (autoload #'latex-mode "tex-mode" nil t))
  (add-to-list 'auto-mode-alist '("\\.tex\\'" . latex-mode))
  (with-eval-after-load 'tex
    (setopt latex-run-command "pdflatex"
            TeX-view-program-selection '((output-pdf "PDF Tools"))
            TeX-source-correlate-start-server t)
    (put 'tex-mode 'derived-mode-parent 'prog-mode))

#+end_src

***** Package | company-auctex

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-tex.el

  (straight-use-package 'company-auctex)

#+end_src

***** LaTeX package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-tex.el

  (provide 'pg-programming-tex)

#+end_src

**** LMC

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-lmc.el

  ;;; pg-programming-lmc.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | lmc-java

Custom syntax highlighting for LMC assembly language.
      
#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-lmc.el

  (defvar lmc-java-mode-hook nil)

  (add-to-list 'auto-mode-alist '("\\.lmc\\'" . lmc-java-mode))

  (defconst lmc-java-font-lock-defaults
    (list
     '("#.*" . font-lock-comment-face)
     '("\\<\\(ADD\\|BR[PZ]?\\|DAT\\|HLT\\|IN\\|LDA\\|OUT\\|S\\(?:TO\\|UB\\)\\)\\>" . font-lock-keyword-face)
     '("^\\w+" . font-lock-function-name-face)
     '("\\b[0-9]+\\b" . font-lock-constant-face))
    "Minimal highlighting expressions for lmc mode")

  (defvar lmc-java-mode-syntax-table
    (let ((st (make-syntax-table)))
      (modify-syntax-entry ?# ". 1b" st)
      (modify-syntax-entry ?\n "> b" st)
      st)
    "Syntax table for lmc-mode")

  (define-derived-mode lmc-java-mode prog-mode "LMC"
    "Major mode for editing lmc files"
    :syntax-table lmc-java-mode-syntax-table

    (set (make-local-variable 'font-lock-defaults) '(lmc-java-font-lock-defaults))

    (setq-local comment-start "# "
                comment-end ""
                indent-tabs-mode nil))

#+end_src

***** Lmc package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-lmc.el

  (provide 'pg-programming-lmc)

#+end_src

**** Markdown

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-markdown.el

  ;;; pg-programming-markdown.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | markdown-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-markdown.el

  (straight-use-package 'markdown-mode)
  (add-hook 'gfm-view-mode-hook (lambda ()
                                  (display-line-numbers-mode 0)
                                  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                                                     (markdown-code-face (:height 1.0) org-code)))))
  (with-eval-after-load 'markdown-mode
    (dolist (face '((markdown-header-face-1 . 1.9)
                    (markdown-header-face-2 . 1.7)
                    (markdown-header-face-3 . 1.5)
                    (markdown-header-face-4 . 1.3)
                    (markdown-header-face-5 . 1.1)
                    (markdown-header-face-6 . 1.05)))
      (set-face-attribute (car face) nil :weight 'regular :height (cdr face))))

#+end_src

***** Markdown package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-markdown.el

  (provide 'pg-programming-markdown)

#+end_src

**** MIPS

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-mips.el

  ;;; pg-programming-mips.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | mips-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-mips.el

  (straight-use-package 'mips-mode)
  (unless (fboundp 'mips-mode)
    (autoload #'mips-mode "mips-mode" nil t))
  (add-to-list 'auto-mode-alist '("\\.asm\\'" . mips-mode))
  (with-eval-after-load 'mips-mode
    (setopt mips-tab-width 4))

#+end_src

***** Mips package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-mips.el

  (provide 'pg-programming-mips)

#+end_src

**** PHP

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-php.el

  ;;; pg-programming-php.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | php-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-php.el

  (straight-use-package 'php-mode)
  (setopt php-mode-lineup-cascaded-calls t)

#+end_src

***** PHP package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-php.el

  (provide 'pg-programming-php)

#+end_src

**** Prolog

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-prolog.el

    ;;; pg-programming-prolog.el -*- lexical-binding: t; -*-

#+end_src

***** Package | prolog

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-prolog.el

  (add-hook 'prolog-inferior-mode-hook #'(lambda ()
                                           (display-line-numbers-mode 0)))
  (unless (fboundp 'prolog-mode)
    (autoload #'prolog-mode "prolog" nil t))

#+end_src

***** Prolog package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-prolog.el

  (provide 'pg-programming-prolog)

#+end_src

**** Python

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-python.el

  ;;; pg-programming-python.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | python

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-python.el

  (defun pg/run-ipython ()
    "Runs an inferior iPython process."
    (interactive)
    (when (executable-find "ipython")
      (ansi-term "ipython")))

  (unless (fboundp 'lsp-deferred)
    (autoload #'lsp-deferred "lsp-mode" nil t))
  (add-hook 'python-ts-mode-hook #'lsp-deferred)
  (add-hook 'inferior-python-mode-hook #'corfu-mode)
  (add-hook 'inferior-python-mode-hook #'(lambda ()
                                           (display-line-numbers-mode 0)))

  (with-eval-after-load 'python
    (setopt python-fill-docstring-style 'django
            python-shell-virtualenv-root (concat (plist-get pg/user :home) "/.conda/envs")
            python-indent-offset 4)
    (define-key python-mode-map (kbd "C-c C-i") #'pg/run-ipython)
    (define-key inferior-python-mode-map (kbd "TAB") #'complete-symbol))

#+end_src

***** Package | conda

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-python.el

  (straight-use-package 'conda)
  (when (executable-find "conda")
    (add-hook'conda-postactivate-hook #'(lambda ()
                                          (setenv "OLD_JUPYTER_PATH" (getenv "JUPYTER_PATH"))
                                          (if (null (getenv "JUPYTER_PATH"))
                                              (setenv "JUPYTER_PATH" (concat conda-env-current-path "lib"))
                                            (setenv "JUPYTER_PATH" (concat (getenv "JUPYTER_PATH") ":" conda-env-current-path "lib")))))
    (add-hook 'conda-predeactivate-hook #'(lambda ()
                                            (setenv "JUPYTER_PATH" (getenv "OLD_JUPYTER_PATH"))
                                            (setenv "JUPYTER_PATH")))
    (setopt conda-anaconda-home (concat (plist-get pg/user :guix-home-profile))
            conda-env-home-directory (concat (plist-get pg/user :home) "/.conda")
            conda-env-subdirectory "envs")
    (unless (getenv "CONDA_DEFAULT_ENV")
      (conda-env-activate "ml_practice"))
    (with-eval-after-load 'conda
      (conda-env-initialize-interactive-shells)
      (conda-env-initialize-eshell)))

#+end_src

***** Package | lsp-pyright

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-python.el

  (straight-use-package 'lsp-pyright)
  (with-eval-after-load 'python
    (with-eval-after-load 'lsp-mode
      (require 'lsp-pyright)))

  (with-eval-after-load 'lsp-pyright
    (setopt lsp-pyright-venv-path (concat (plist-get pg/user :home) "/.conda/envs")
            lsp-pyright-venv-directory "envs"))

#+end_src

***** Package | dap-python

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-python.el

  (with-eval-after-load 'python
    (with-eval-after-load 'lsp-mode
      (require 'dap-python)))
  (with-eval-after-load 'dap-python
    (setopt dap-python-debugger 'debugpy))

#+end_src

***** Package | jupyter

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-python.el

  (defun pg/jupyter-refresh-kernelspecs ()
    "Refresh Jupyter kernelspecs"
    (interactive)
    (jupyter-available-kernelspecs t))

  (unless pg/is-windows
    (straight-use-package 'jupyter)
    (add-hook 'jupyter-repl-mode-hook #'company-mode)
    (add-hook 'jupyter-repl-mode-hook #'(lambda ()
                                          (display-line-numbers-mode 0)
                                          (require 'jupyter))))

#+end_src

***** Python package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-python.el

  (provide 'pg-programming-python)

#+end_src

**** Scala

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-scala.el

  ;;; pg-programming-scala.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | scala-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-scala.el

  (straight-use-package 'scala-mode)
  (unless (fboundp 'scala-mode)
    (autoload #'scala-mode "scala-mode" nil t))
  (add-to-list 'interpreter-mode-alist '("scala" . scala-mode))

#+end_src

***** Package | sbt-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-scala.el

  (straight-use-package 'sbt-mode)
  (unless (fboundp 'sbt-start)
    (autoload #'sbt-start "sbt-mode" nil t))
  (unless (fboundp 'sbt-command)
    (autoload #'sbt-command "sbt-mode" nil t))
  (with-eval-after-load 'sbt-mode
    (substitute-key-definition 'minibuffer-complete-word
                               'self-insert-command
                               minibuffer-local-completion-map))

#+end_src

***** Package | lsp-metals

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-scala.el

  (straight-use-package 'lsp-metals)
  (setopt lsp-metals-server-args '("-J-Dmetals.allow-multiline-string-formatting=off" "-J-Dmetals.icons=unicode")
          lsp-metals-enable-semantic-highlighting t)
  (unless (fboundp 'lsp)
    (autoload #'lsp-deferred "lsp-mode"))
  (add-hook 'scala-mode-hook #'lsp)

#+end_src

***** Scala package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-scala.el

  (provide 'pg-programming-scala)

#+end_src

**** SQL

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-sql.el

  ;;; pg-programming-sql.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | sql

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-sql.el

  (unless (fboundp 'lsp-deferred)
    (autoload #'lsp-deferred "lsp-mode" nil t))
  (add-hook 'sql-mode-hook #'lsp-deferred)
  (unless (fboundp 'sqlind-minor-mode)
    (autoload #'sqlind-minor-mode "sql-indent" nil t))
  (add-hook 'sql-mode-hook #'sqlind-minor-mode)
  (add-hook 'sql-interactive-mode-hook #'(lambda ()
                                           (display-line-numbers-mode 0)
                                           (toggle-truncate-lines t)))
  (with-eval-after-load 'sql
    (setopt sql-connection-alist
            `((main (sql-product postgres)
                    (sql-port 5432)
                    (sql-server "localhost")
                    (sql-user (plist-get pg/user :user))
                    (sql-password ,(pg/lookup-password :host "localhost" :user (plist-get pg/user :user) :port 5432))
                    (sql-database (plist-get pg/user :user)))
              (school (sql-product postgres)
                      (sql-port 5432)
                      (sql-server "localhost")
                      (sql-user (plist-get pg/user :user))
                      (sql-password ,(pg/lookup-password :host "localhost" :user (plist-get pg/user :user) :port 5432))
                      (sql-database "ift2935")))))

#+end_src

***** Package | lsp-sql

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-sql.el

  (with-eval-after-load 'sql
    (with-eval-after-load 'lsp-mode
      (require 'lsp-sqls)))
  (with-eval-after-load 'lsp-sqls
    (setopt lsp-sqls-connections
            `(,(cl-pairlis '(driver dataSourceName)
                           `("postgresql" ,(concat "host=127.0.0.1 port=5432 user="
                                                   (plist-get pg/user :user)
                                                   "password="
                                                   (pg/lookup-password :host "localhost"
                                                                       :user (plist-get pg/user :user)
                                                                       :port 5432)
                                                   " dbname="(plist-get pg/user :user)
                                                   " sslmode=disable")))
              ,(cl-pairlis '(driver dataSourceName)
                           `("postgresql" ,(concat "host=127.0.0.1 port=5432 user="
                                                   (plist-get pg/user :user)
                                                   "password="
                                                   (pg/lookup-password :host "localhost"
                                                                       :user (plist-get pg/user :user)
                                                                       :port 5432)
                                                   " dbname=ift2935 sslmode=disable"))))))

#+end_src

***** Package | sql-indent

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-sql.el

  (straight-use-package 'sql-indent)
  (with-eval-after-load 'sql
    (require 'sql-indent))
  (with-eval-after-load 'sql-indent
    (setq-default sqlind-basic-offset 4))

#+end_src

***** SQL package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-sql.el

  (provide 'pg-programming-sql)

#+end_src

**** TypeScript

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-typescript.el

  ;;; pg-programming-typescript.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | typescript-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-typescript.el

  (straight-use-package 'typescript-mode)
  (unless (fboundp 'typescript-mode)
    (autoload #'typescript-mode "typescript-mode" nil t))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
  (unless (fboundp 'lsp-deferred)
    (autoload #'lsp-deferred "lsp-mode" nil t))
  (add-hook 'typescript-mode-hook #'lsp-deferred)
  (dolist (fn #'(lsp-deferred
                 rainbow-mode))
    (add-hook 'tsx-ts-mode-hook fn))
  (with-eval-after-load 'typescript-mode
    (setopt typescript-indent-level 2))

#+end_src

***** Package | dap-node

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-typescript.el

  (with-eval-after-load 'typescript-mode
    (with-eval-after-load 'lsp-mode
      (require 'dap-node)))
  (with-eval-after-load 'dap-node
    (dap-node-setup))

#+end_src

***** Typescript package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-typescript.el

  (provide 'pg-programming-typescript)

#+end_src

**** XML

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-xml.el

  ;;; pg-programming-xml.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | nxml-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-xml.el

  (defun pg/close-tag ()
    (interactive)
    (insert ">")
    (save-excursion (pg/close-tag-maybe)))

  (defun pg/close-tag-maybe ()
    (when (looking-back "<[^/]*>")
      (nxml-finish-element)
      (delete-char -1)))

  (defun pg/newline-and-indent-maybe ()
    (interactive)
    (if (not (and (looking-back "<[^/]*>\s*")
                  (looking-at "\s*</[^/]*>")))
        (newline)
      (newline)
      (newline)
      (indent-according-to-mode)
      (previous-line)
      (indent-according-to-mode)))

  (with-eval-after-load 'nxml-mode
    (define-key nxml-mode-map (kbd ">") #'pg/close-tag)
    (define-key nxml-mode-map (kbd "RET") #'pg/newline-and-indent-maybe))

#+end_src

***** XML package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-xml.el

  (provide 'pg-programming-xml)

#+end_src

**** YAML

***** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-yaml.el

  ;;; pg-programming-yaml.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | yaml-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-yaml.el

  (straight-use-package 'yaml-mode)

#+end_src

***** YAML package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-programming-yaml.el

  (provide 'pg-programming-yaml)

#+end_src

** Notification

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-notification.el

  ;;; pg-notification.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | alert

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-notification.el

  (unless pg/is-windows
    (straight-use-package 'alert)
    (require 'alert)
    (with-eval-after-load 'alert
      (setopt alert-default-style 'notifications)))

#+end_src

*** Notification package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-notification.el

  (provide 'pg-notification)

#+end_src

** Org Mode

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  ;;; pg-org.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | org

Org mode package for writing structured documents and more. Here are some useful things to know about org files.
- ~#+title: Title~ - Sets the title of a document.
- ~M-left~ / ~M-right~ - Promotes/Demotes position of headers and bullet points.
- ~M-up~ / ~M-down~ - Moves the line above or below its current position, respecting the rank.
- ~S-right~ / ~S-left~ - Cycles through different states of headers and bullet points.
- ~M-RET~ - Adds another entry below the current header/bullet point of the same rank. 
- ~C-RET~ - Adds another entry after the current section occupied by the current header of the same rank.
  
#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (defun pg/org-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the img directory
  with respect to the org-buffer's location and insert a link to this
  file. Requires imageMagick for undertaking screenshots."
    (interactive)
    (setq imgpath "./img/")
    (if (not (f-dir-p imgpath))
        (make-directory imgpath))
    (setq filename
          (concat
           (make-temp-name
            (concat imgpath
                    (let ((bname (string-trim (shell-command-to-string (concat "basename -s .org " buffer-file-name)))))
                      (with-temp-buffer
                        (call-process "echo" nil t nil "-n" bname)
                        (buffer-string)))
                    "_"
                    (format-time-string "%Y%m%d_%H%M%S_"))) ".png"))
    (call-process "grimshot" nil nil nil "--notify" "save" "area" filename)
    (insert (concat "[[" filename "]]"))
    (org-display-inline-images))

  (defun pg/org-csv-to-table (beg end)
    "Insert a file into the current buffer at point, and convert it to an org
  table."
    (interactive (list (mark) (point)))
    (org-table-convert-region beg end ","))

  (defconst pg/org-view-html-tmp-dir "/tmp/org-html-preview/"
    "Directory of temporary html file to view.")

  (defun pg/org-view-html ()
    "Views an org source html block in default browser"
    (interactive)
    (let ((elem (org-element-at-point))
          (temp-file-path (concat pg/org-view-html-tmp-dir (number-to-string (random (expt 2 32))) ".html")))
      (cond ((not (eq 'export-block (car elem)))
             (message "Not in an export block!"))
            ((not (string-equal (plist-get (car (cdr elem)) :type) "HTML"))
             (message "Export block is not HTML!"))
            (t (progn (f-mkdir pg/org-view-html-tmp-dir)
                      (f-write (plist-get (car (cdr elem)) :value) 'utf-8 temp-file-path)
                      (start-process "org-html-preview" nil "xdg-open" temp-file-path))))))

  (defun pg/org-babel-tangle-config ()
    "Automatic tangle of org files."
    (when (eq major-mode #'org-mode)
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (defun pg/org-mode-setup ()
    "Define some behaviours for the major org-mode."
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (display-line-numbers-mode 0)
    (diminish 'org-indent-mode)
    (setq-local evil-auto-indent nil))

  (straight-use-package 'org)
  (require 'org)
  (add-hook 'org-mode-hook #'pg/org-mode-setup)
  (add-hook 'org-mode-hook #'(lambda ()
                               (add-hook 'after-save-hook #'pg/org-babel-tangle-config)))
  (with-eval-after-load 'org
    (setopt org-ellipsis " ▾"
            org-hide-emphasis-markers t
            org-auto-align-tags nil
            org-tags-column 0
            org-catch-invisible-edits 'show-and-error
            org-special-ctrl-a/e t
            org-insert-heading-respect-content t
            org-pretty-entities t
            org-log-done 'time
            org-fontify-quote-and-verse-blocks t
            org-log-into-drawer t
            org-deadline-warning-days 7
            org-todo-keywords '((sequence "TODO(t)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k)"))
            ;; org-plantuml-jar-path (expand-file-name "~/.guix-home/profile/share/java/plantuml.jar")
            org-babel-python-command "python3"
            org-confirm-babel-evaluate nil
            org-agenda-exporter-settings `((ps-left-header (org-agenda-write-buffer-name))
                                           (ps-right-header ("/pagenumberstring load" ,(lambda ()
                                                                                         (format-time-string "%d/%m/%Y"))))
                                           (ps-font-size (12 . 11))
                                           (ps-top-margin 55)
                                           (ps-left-margin 35)
                                           (ps-right-margin 30)))

    (require 'org-indent)
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.0)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font (plist-get pg/user :font-variable) :weight 'regular :height (cdr face)))

    (add-hook 'org-babel-after-execute-hook #'org-redisplay-inline-images)

    (defun pg/babel-ansi ()
      (when-let ((beg (org-babel-where-is-src-block-result nil nil)))
        (save-excursion
          (goto-char beg)
          (when (looking-at org-babel-result-regexp)
            (let ((end (org-babel-result-end))
                  (ansi-color-context-region nil))
              (ansi-color-apply-on-region beg end))))))
    (add-hook 'org-babel-after-execute-hook #'pg/babel-ansi)

    (require 'org-tempo) ;; Allows defined snippets to expand into appropriate code blocks
    (dolist (template '(("sh" . "src sh")
                        ("java" . "src java")
                        ("als" . "src alloy")
                        ;; ("puml" . "src plantuml")
                        ("vhd" . "src vhdl")
                        ("asm" . "src mips")
                        ("lmc" . "src lmc-java")
                        ("cc" . "src c")
                        ("el" . "src emacs-lisp")
                        ("hs" . "src haskell")
                        ("py" . "src python")
                        ("jp" . "src jupyter-python")
                        ("sql" . "src sql")
                        ("for" . "src fortran")))
      (add-to-list 'org-structure-template-alist template))

    (dolist (src '(("als" . alloy)
                   ("lmc-java" . lmc-java)
                   ("plantuml" . plantuml)))
      (add-to-list 'org-src-lang-modes src))

    (with-eval-after-load 'general
      (pg/leader-keys
        "o" '(:ignore t :which-key "org")
        "os" '(pg/org-screenshot :which-key "screenshot")
        "oc" '(org-capture :which-key "capture")
        "oa" '(org-agenda :which-key "agenda")
        "ot" '(org-todo-list :which-key "todos")
        "ol" '(:ignore t :which-key "links")
        "olo" '(org-open-at-point :which-key "open")
        "olb" '(org-mark-ring-goto :which-key "back")))

    (unless pg/is-termux
      (setopt org-agenda-files (list (concat (plist-get pg/user :home) "/Sync/Agenda/"))
              org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                                     (vm-imap . vm-visit-imap-folder-other-frame)
                                     (gnus . org-gnus-no-new-news)
                                     (file . find-file)
                                     (wl . wl-other-frame))
              org-agenda-custom-commands '(("d" "Dashboard"
                                            ((agenda ""
                                                     ((org-deadline-warning-days 7)))
                                             (todo "TODO"
                                                   ((org-agenda-overriding-header "Tasks")))
                                             (tags-todo "agenda/ACTIVE"
                                                        ((org-agenda-overriding-header "Active Tasks")))))

                                           ("Z" "TODOs"
                                            ((todo "TODO"
                                                   ((org-agenda-overriding-header "Todos")))))

                                           ("m" "Misc" tags-todo "other")

                                           ("s" "Schedule" agenda ""
                                            ((org-agenda-files org-agenda-files)))

                                           ("w" "Work Status"
                                            ((todo "WAIT"
                                                   ((org-agenda-overriding-header "Waiting")
                                                    (org-agenda-files org-agenda-files)))
                                             (todo "REVIEW"
                                                   ((org-agenda-overriding-header "In Review")
                                                    (org-agenda-files org-agenda-files)))
                                             (todo "HOLD"
                                                   ((org-agenda-overriding-header "On Hold")
                                                    (org-agenda-todo-list-sublevels nil)
                                                    (org-agenda-files org-agenda-files)))
                                             (todo "ACTIVE"
                                                   ((org-agenda-overriding-header "Active")
                                                    (org-agenda-files org-agenda-files)))
                                             (todo "COMPLETED"
                                                   ((org-agenda-overriding-header "Completed")
                                                    (org-agenda-files org-agenda-files)))
                                             (todo "CANC"
                                                   ((org-agenda-overriding-header "Cancelled")
                                                    (org-agenda-files org-agenda-files))))))
              org-capture-templates `(("t" "Tasks / Projects")

                                      ("tt" "Task" entry
                                       (file+olp ,(concat (plist-get pg/user :home) "/Sync/Agenda/Tasks.org") "Active")
                                       "* TODO %? :task:\nDEADLINE: %U\n  %a\n  %i" :empty-lines 1)

                                      ("tr" "Repeat" entry
                                       (file+olp ,(concat (plist-get pg/user :home) "/Sync/Agenda/Tasks.org") "Repeat")
                                       "* TODO %? :task:\n%^{notify|repeat}p" :empty-lines 1)

                                      ("j" "Meetings")
                                      ("jm" "Meeting" entry
                                       (file+olp ,(concat (plist-get pg/user :home) "/Sync/Agenda/Tasks.org") "Waiting")
                                       "* TODO %? \nSCHEDULED: %U\n" :empty-lines 1)

                                      ("m" "Email Workflow")
                                      ("mr" "Follow Up" entry
                                       (file+olp ,(concat (plist-get pg/user :home) "/Sync/Agenda/Tasks.org") "Follow up")
                                       "* TODO %a\nDEADLINE: %U%?\n %i" :empty-lines 1))
              org-format-latex-options (plist-put org-format-latex-options :scale 1.5))))

#+end_src

*** Package | org-agenda

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (add-hook 'org-agenda-mode-hook #'(lambda ()
                                      (display-line-numbers-mode 0)))
  (with-eval-after-load 'org-agenda
    (setopt org-agenda-tags-column 0
            org-agenda-block-separator ?─
            org-agenda-time-grid '((daily today require-timed)
                                   (800 1000 1200 1400 1600 1800 2000)
                                   " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
            org-agenda-current-time-string "◀── now ─────────────────────────────────────────────────"))

#+end_src

*** Package | org-appear

Toggles visibility of emphasis markers.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (straight-use-package 'org-appear)
  (unless (fboundp 'org-appear-mode)
    (autoload #'org-appear-mode "org-appear" nil t))
  (add-hook 'org-mode-hook #'org-appear-mode)

#+end_src

*** Package | org-contacts

Manages contacts

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (straight-use-package 'org-contacts)
  (with-eval-after-load 'org-contacts
    (setopt org-contacts-files (list (expand-file-name "~/Sync/Social/contacts.org"))))

#+end_src

*** Package | org-tree-slide

Allows for creation of slideshow presentations in emacs with org mode. The ~org-beamer-export-to-pdf~ command can be used to export the presentation as a pdf file - it requires ~pdflatex~. More detail [[https://orgmode.org/worg/exporters/beamer/tutorial.html][here]].

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (defun pg/presentation-setup ()
    "Setup before starting org presentation."
    (org-display-inline-images)
    (setq-local doom-modeline-minor-modes t
                org-format-latex-options (plist-put org-format-latex-options :scale 2.5)
                face-remapping-alist '((default (:height 1.75) default)))
    (org-latex-preview)
    (variable-pitch-mode 1))

  (defun pg/presentation-end ()
    "Cleanup after ending org presentation."
    (variable-pitch-mode 0)
    (setq-local doom-modeline-minor-modes nil
                org-format-latex-options (plist-put org-format-latex-options :scale 1.5)
                face-remapping-alist '((default variable-pitch default)))
    (org-latex-preview))

  (straight-use-package 'org-tree-slide)
  (unless (fboundp 'org-tree-slide-mode)
    (autoload #'org-tree-slide-mode "org-tree-slide" nil t))
  (with-eval-after-load 'general
    (pg/leader-keys
      "op" '(org-tree-slide-mode :which-key "slide")))
  (with-eval-after-load 'org-tree-slide
    (dolist (command '(org-tree-slide-before-move-next-hook
                       org-tree-slide-before-move-previous-hook))
      (add-hook command #'org-latex-preview))
    (add-hook 'org-tree-slide-play-hook #'pg/presentation-setup)
    (add-hook 'org-tree-slide-stop-hook #'pg/presentation-end)
    (setopt org-tree-slide-activate-message "Presentation started"
            org-tree-slide-deactivate-message "Presentation ended"
            org-tree-slide-breadcrumbs " > "
            org-tree-slide-header t
            org-image-actual-width nil))

#+end_src

*** Package | ox-reveal

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (straight-use-package 'ox-reveal)
  (unless (fboundp 'org-reveal-export-to-html)
    (autoload #'org-reveal-export-to-html "ox-reveal" nil t))
  (with-eval-after-load 'ox-reveal
    (setopt org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"
            org-reveal-hlevel 1
            org-export-headline-levels 6
            org-reveal-theme "league"))

#+end_src

*** Package | org-modern

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (straight-use-package 'org-modern)
  (with-eval-after-load 'org
    (setopt org-modern-list '((?+ . "○")
                              (?- . "◉")
                              (?* . "▪"))
            org-modern-table nil)
    (global-org-modern-mode))

#+end_src

*** Package | org-notify

Handles notifications of scheduled tasks.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (unless pg/is-windows
    (straight-use-package 'org-notify)
    (with-eval-after-load 'org
      (require 'org-notify))
    (with-eval-after-load 'org-notify
      (org-notify-start)
      (setq org-notify-map nil)
      (org-notify-add 'default '( :time "1w"
                                  :actions (-notify/window)
                                  :period "1h"
                                  :duration 5))
      (org-notify-add 'repeat '( :time "1w"
                                 :actions (-notify/window)
                                 :period "1w"
                                 :duration 5))))

#+end_src

*** Package | org-msg

Allows for markup language when composing email

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (straight-use-package 'org-msg)
  (unless (fboundp 'org-msg-mode)
    (autoload #'org-msg-mode "org-msg" nil t))
  (add-hook 'mu4e-compose-pre-hook #'org-msg-mode)
  (with-eval-after-load 'org-msg
    (setopt org-msg-options "html-postamble:nil toc:nil author:nil num:nil \\n:t"
            org-msg-signature (concat "\n\nCordialement/Regards,\n\n*--*\n"
                                      "Philippe Gabriel - 40160338 \n[[mailto:pgabriel999@hotmail.com][pgabriel999@hotmail.com]]")
            org-msg-startup "indent inlineimages hidestars"
            org-msg-greeting-fmt "\nBonjour/Hi %s,\n\n"
            org-msg-greeting-name-limit 3
            org-message-convert-citation t
            org-msg-default-alternatives '((new html)
                                           (reply-to-text html)
                                           (reply-to-html html))
            org-msg-recipient-names nil))

#+end_src

*** Package | org-roam

Helps with note-taking strategies.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (with-eval-after-load 'org
    (straight-use-package 'org-roam)
    (require 'org-roam))
  (with-eval-after-load 'org-roam
    (setopt org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag))
            org-roam-directory (concat (plist-get pg/user :documents) "/Notes")
            org-roam-capture-templates '(("d" "default" plain
                                          "%?"
                                          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                                             "#+title: ${title}\n#+STARTUP: latexpreview inlineimages\n#+date: %U\n")
                                          :unnarrowed t)
                                         ("a" "system admin" plain
                                          "%?"
                                          :if-new (file+head "IFT-3830/notes/%<%Y%m%d%H%M%S>-${slug}.org"
                                                             "#+title: ift3830-${title}\n#+STARTUP: latexpreview inlineimages\n#+date: %U\n")
                                          :unnarrowed t)
                                         ("s" "distributed system design" plain
                                          "%?"
                                          :if-new (file+head "COMP-6231/notes/%<%Y%m%d%H%M%S>-${slug}.org"
                                                             "#+title: comp6231-${title}\n#+STARTUP: latexpreview inlineimages\n#+date: %U\n")
                                          :unnarrowed t)))
    (org-roam-db-autosync-enable)
    (with-eval-after-load 'general
      (pg/leader-keys
        "on" '(:ignore t :which-key "notes")
        "onl" '(org-roam-buffer-toggle :which-key "links")
        "onf" '(org-roam-node-find :which-key "find/create")
        "oni" '(org-roam-node-insert :which-key "insert/create"))))

#+end_src

*** Package | org-fragtog

Allows display of latex fragments in org files.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (straight-use-package 'org-fragtog)
  (unless (fboundp 'org-fragtog-mode)
    (autoload #'org-fragtog-mode "org-fragtog" nil t))
  (add-hook 'org-mode-hook #'org-fragtog-mode)

#+end_src

*** Pomodoro timer

Custom pomodoro timer

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (defun pg/timer-setup ()
    "Sets up some parameters for the timer"
    (setq org-clock-sound (expand-file-name "~/Misc/ding.wav")))

  (defun pg/start-timer ()
    "Begins Pomodoro timer with study timer"
    (interactive)
    (pg/timer-setup)
    (pg/study-timer))

  (defun pg/start-with-break-timer ()
    "Begins Pomodoro timer with break timer"
    (interactive)
    (pg/timer-setup)
    (pg/break-timer))

  (defun pg/stop-timer ()
    "Stops the timer"
    (interactive)
    (setq org-clock-sound nil)
    (remove-hook 'org-timer-done-hook #'pg/study-timer)
    (remove-hook 'org-timer-done-hook #'pg/break-timer)
    (org-timer-stop))

  (defun pg/study-timer ()
    "Study timer for 1 hour"
    (add-hook 'org-timer-done-hook #'pg/break-timer)
    (remove-hook 'org-timer-done-hook #'pg/study-timer)
    (setq org-timer-default-timer "1:00:00")
    (setq current-prefix-arg '(4)) ;; Universal argument
    (call-interactively #'org-timer-set-timer))

  (defun pg/break-timer ()
    "Break timer for 15 minutes"
    (add-hook 'org-timer-done-hook #'pg/study-timer)
    (remove-hook 'org-timer-done-hook #'pg/break-timer)
    (setq org-timer-default-timer "15:00")
    (setq current-prefix-arg '(4)) ;; Universal argument
    (call-interactively #'org-timer-set-timer))

  (with-eval-after-load 'general
    (pg/leader-keys
      "ow" '(:ignore t :which-key "pomodoro")
      "owt" '(pg/start-timer :which-key "start")
      "owb" '(pg/start-with-break-timer :which-key "break")
      "ows" '(pg/stop-timer :which-key "stop")
      "owp" '(org-timer-pause-or-continue :which-key "pause")))

#+end_src

*** Org package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-org.el

  (provide 'pg-org)

#+end_src

** Viewers

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-viewers.el

  ;;; pg-viewers.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | djvu

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-viewers.el

  (straight-use-package 'djvu)
  (require 'djvu)

#+end_src

*** Package | doc-view

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-viewers.el

  (unless (fboundp 'doc-view-mode)
    (autoload #'doc-view-mode "doc-view" nil t))
  (add-hook 'doc-view-mode-hook #'(lambda ()
                                    (display-line-numbers-mode 0)))

#+end_src

*** Package | elfeed

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-viewers.el

  (straight-use-package 'elfeed)
  (unless (fboundp 'elfeed)
    (autoload #'elfeed "elfeed" nil t))
  (add-hook 'elfeed-search-mode-hook #'(lambda ()
                                         (display-line-numbers-mode 0)))
  (add-hook 'elfeed-show-mode-hook #'(lambda ()
                                       (display-line-numbers-mode 0)))
  (with-eval-after-load 'elfeed
    (setopt elfeed-feeds '("https://www.gnu.org/software/guile/news/feed.xml"
                           "https://planet.emacslife.com/atom.xml"
                           "https://oneofus.la/have-emacs-will-hack/feed.xml"
                           "http://oremacs.com/atom.xml"
                           "https://updates.orgmode.org/feed/changes"
                           "http://pragmaticemacs.com/feed/"
                           "https://www.reddit.com/r/GUIX.rss"
                           "https://www.reddit.com/r/emacs.rss"
                           "https://www.reddit.com/r/orgmode.rss"
                           "https://blog.tecosaur.com/tmio/rss.xml")
            elfeed-search-filter "@6-months-ago"))

#+end_src

*** Package | nov

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-viewers.el

  (straight-use-package 'nov)
  (unless (fboundp 'nov-mode)
    (autoload #'nov-mode "nov" nil t))
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  (add-hook 'nov-mode-hook #'(lambda ()
                               (display-line-numbers-mode 0)))
  (defun pg/nov-mode-setup ()
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq-local face-remapping-alist '((default (:height 1.5) default))))
  (add-hook 'nov-mode-hook #'pg/nov-mode-setup)

#+end_src

*** Package | pdf-tools

Allows for viewing of pdfs.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-viewers.el

  (unless (fboundp 'pdf-view-mode)
    (autoload #'pdf-view-mode "pdf-tools" nil t))
  (add-hook 'pdf-view-mode-hook #'(lambda ()
                                    (display-line-numbers-mode 0)))
  (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))

#+end_src

*** Viewers package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-viewers.el

  (provide 'pg-viewers)

#+end_src

** Bible

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bible.el

  ;;; pg-bible.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | dtk

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bible.el

  (straight-use-package 'dtk)
  (unless (fboundp 'dtk)
    (autoload #'dtk "dtk" nil t))
  (add-hook 'dtk-mode-hook #'(lambda ()
                               (setq-local face-remapping-alist
                                           '((default (:height 1.5) default)))))
  (with-eval-after-load 'dtk
    (setopt dtk-module "KJV"
            dtk-module-category "Biblical Texts"
            dtk-word-wrap t)
    (with-eval-after-load 'evil
      (evil-define-key 'normal 'dtk-mode-map
        (kbd "C-j") #'dtk-forward-verse
        (kbd "C-k") #'dtk-backward-verse
        (kbd "C-f") #'dtk-forward-chapter
        (kbd "C-b") #'dtk-backward-chapter
        "q" #'dtk-quit
        "c" #'dtk-clear-dtk-buffer
        "s" #'dtk-search)))

#+end_src

*** Bible package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bible.el

  (provide 'pg-bible)

#+end_src

** Finances

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-finance.el

  ;;; pg-finance.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | ledger-mode

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-finance.el

  (unless (fboundp 'ledger-mode)
    (autoload #'ledger-mode "ledger-mode" nil t))
  (add-to-list 'auto-mode-alist '("\\.dat\\'" . ledger-mode))
  (unless (fboundp 'company-mode)
    (autoload #'company-mode "company" nil t))
  (add-hook 'ledger-mode-hook #'company-mode)
  (add-hook 'ledger-report-mode-hook #'(lambda ()
                                         (display-line-numbers-mode 0)))
  (with-eval-after-load 'ledger-mode
    (setopt ledger-reconcile-default-commodity "CAD"
            ledger-binary-path (concat (plist-get pg/user :guix-home-profile) "/bin/ledger")
            ledger-clear-whole-transaction t))

#+end_src

*** Finances package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-finance.el

  (provide 'pg-finance)

#+end_src

** Social

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-social.el

  ;;; pg-social.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | erc

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-social.el

  (dolist (mode '(erc-mode-hook
                  erc-list-menu-mode-hook))
    (add-hook mode #'(lambda ()
                       (display-line-numbers-mode 0))))
  (with-eval-after-load 'erc
    (unless (fboundp 'corfu-mode)
      (autoload #'corfu-mode "corfu" nil t))
    (add-hook 'erc-mode-hook #'corfu-mode)
    (setopt erc-server "irc.libera.chat"
            erc-nick (plist-get pg/user :user)
            erc-user (plist-get pg/user :name)
            erc-kill-buffer-on-part t
            erc-auto-query bury))

#+end_src

*** Package | ement

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-social.el

  (defun pg/ement-connect ()
    "Connects to matrix client with username and password supplied."
    (interactive)
    (ement-connect :user-id (concat "@" (plist-get pg/user :user) ":matrix.org")
                   :password (pg/lookup-password :host "matrix.org"
                                                 :user (plist-get pg/user :user))))

  (straight-use-package 'ement)
  (unless (fboundp 'ement-connect)
    (autoload #'ement-connect "ement" nil t))
  (add-hook 'ement-room-mode-hook #'(lambda ()
                                      (display-line-numbers-mode 0)))

  (with-eval-after-load 'general
    (pg/leader-keys
      "c" '(:ignore t :which-key "comms")
      "cm" '(:ignore t :which-key "matrix")
      "cmc" '(pg/ement-connect :which-key "start")))

  (with-eval-after-load 'ement
    (setopt ement-room-prism 'both
            ement-room-sender-headers t)
    (with-eval-after-load 'general
      (pg/leader-keys
        "cmd" '(ement-disconnect :which-key "disconnect"))))

#+end_src

*** Package | slack

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-social.el

  (straight-use-package 'slack)
  (unless (fboundp 'slack-start)
    (autoload #'slack-start "slack" nil t))
  (add-hook 'slack-mode-hook #'(lambda ()
                                 (display-line-numbers-mode 0)))
  (with-eval-after-load 'slack
    (setopt slack-prefer-current-team t
            slack-buffer-emojify t)
    (slack-register-team :name "ift6755"
                         :default t
                         :token (pg/lookup-password :host "ift6755.slack.com"
                                                    :user (plist-get pg/user :email-udem))
                         :cookie (pg/lookup-password :host "ift6755.slack.com"
                                                     :user (concat (plist-get pg/user :email-udem) "^cookie"))
                         :subscribed-channels '((general questions random))
                         :modeline-enabled t)
    (with-eval-after-load 'evil
      (evil-define-key 'normal slack-info-mode-map
        ",u" #'slack-room-update-messages)
      (evil-define-key 'normal slack-mode-map
        ",ra" #'slack-message-add-reaction
        ",rr" #'slack-message-remove-reaction
        ",rs" #'slack-message-show-reaction-users
        ",mm" #'slack-message-write-another-buffer
        ",me" #'slack-message-edit
        ",md" #'slack-message-delete))
    (with-eval-after-load 'general
      (pg/leader-keys
        "csc" '(slack-channel-select :which-key "channels")
        "csm" '(slack-im-select :which-key "message")
        "csr" '(slack-message-add-reaction :which-key "react"))))

  (with-eval-after-load 'general
    (pg/leader-keys
      "c" '(:ignore t :which-key "comms")
      "cs" '(:ignore t :which-key "slack")
      "csc" '(slack-start :which-key "start")))

#+end_src

*** Package | sx

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-social.el

  (straight-use-package 'sx)
  (unless (fboundp 'sx-search)
    (autoload #'sx-search "sx" nil t))

#+end_src

*** Social package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-social.el

  (provide 'pg-social)

#+end_src

** Weather

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-weather.el

  ;;; pg-weather.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | wttrin

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-weather.el

  (defun pg/wttrin-fetch-raw-string (query)
    "Get the weather information based on your QUERY."
    (let ((url-user-agent "curl"))
      (add-to-list 'url-request-extra-headers wttrin-default-accept-language)
      (with-current-buffer
          (url-retrieve-synchronously
           (concat "http://wttr.in/" query)
           (lambda (status) (switch-to-buffer (current-buffer))))
        (decode-coding-string (buffer-string) 'utf-8))))

  (straight-use-package 'wttrin)
  (unless (fboundp 'wttrin)
    (autoload #'wttrin "wttrin" nil t))
  (with-eval-after-load 'wttrin
    (fset #'wttrin-fetch-raw-string #'pg/wttrin-fetch-raw-string)
    (setopt wttrin-default-cities (list (plist-get pg/user :city))
            wttrin-default-accept-language '("Accept-Language" . "en-US")))

#+end_src

*** Weather package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-weather.el

  (provide 'pg-weather)

#+end_src

** Music

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-music.el

  ;;; pg-music.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | emms

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-music.el

  (straight-use-package 'emms)
  (unless (fboundp 'emms-smart-browse)
    (autoload #'emms-smart-browse "emms" nil t))
  (with-eval-after-load 'emms
    (require 'emms-setup)
    (require 'emms-player-mpd)
    (add-hook 'emms-playlist-cleared #'emms-player-mpd-clear)
    (setopt emms-source-file-default-directory (plist-get pg/user :music)
            emms-player-mpd-music-directory (plist-get pg/user :music)
            emms-player-list '(emms-player-mpd)
            emms-volume-change-function #'emms-volume-mpd-change)
    (emms-all)
    (emms-default-players)
    (add-to-list 'emms-player-list 'emms-player-mpd)
    (dolist (binding `((,(kbd "<XF86AudioPrev>") . ,#'emms-previous)
                       (,(kbd "<XF86AudioNext>") . ,#'emms-next)
                       (,(kbd "<XF86AudioPlay>") . ,#'emms-pause)
                       (,(kbd "<XF86AudioStop>") . ,#'emms-stop)))
      (define-key emms-browser-mode-map (car binding) (cdr binding))))

#+end_src

*** Package | emms-mode-line-cycle

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-music.el

  (defun pg/emms-mode-line-cycle--icon-function (&optional title initialp)
    "Format the current track TITLE like `emms-mode-line-icon-function'. If
    INITIALP is no-nil, initialized."
    (concat " "
            emms-mode-line-icon-before-format
            ;; (emms-propertize "NP:" 'display emms-mode-line-icon-image-cache)
            (emms-mode-line-cycle--playlist-current title initialp)))

  (straight-use-package 'emms-mode-line-cycle)
  (with-eval-after-load 'emms
    (require 'emms-mode-line-cycle))
  (with-eval-after-load 'emms-mode-line-cycle
    (require 'emms-mode-line-icon)
    (fset #'emms-mode-line-cycle--icon-function #'pg/emms-mode-line-cycle--icon-function)
    (setopt emms-mode-line-cycle-use-icon-p t)
    (emms-mode-line 1)
    (emms-playing-time 1)
    (emms-mode-line-cycle 1))

#+end_src

*** Music package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-music.el

  (provide 'pg-music)

#+end_src

** Games

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-games.el

  ;;; pg-games.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | sudoku

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-games.el

  (straight-use-package 'sudoku)
  (unless (fboundp 'sudoku)
    (autoload #'sudoku "sudoku" nil t))
  (with-eval-after-load 'sudoku
    (setopt sudoku-style 'unicode
            sudoku-level 'hard))

#+end_src

*** Package | sokoban

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-games.el

  (straight-use-package 'sokoban)
  (unless (fboundp 'sokoban)
    (autoload #'sokoban "sokoban" nil t))
  (unless (fboundp 'sokoban-goto-level)
    (autoload #'sokoban-goto-level "sokoban" nil t))
  (add-hook 'sokoban-mode-hook #'(lambda ()
                                   (display-line-numbers-mode 0)))
  (with-eval-after-load 'sokoban
    (with-eval-after-load 'evil
      (evil-define-key 'normal sokoban-mode-map
        "h" #'sokoban-move-left
        "l" #'sokoban-move-right
        "j" #'sokoban-move-down
        "k" #'sokoban-move-up)))

#+end_src

*** Games package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-games.el

  (provide 'pg-games)

#+end_src

** Keybindings

*** Package header

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bindings.el

  ;;; pg-bindings.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | general

Allows for general custom keybindings definition to create own set of various keybindings.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bindings.el

  (straight-use-package 'general)
  (with-eval-after-load 'which-key
    (with-eval-after-load 'evil
      (require 'general)))

  (with-eval-after-load 'general
    (general-create-definer pg/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

#+end_src

*** Package | hydra

Allows the creation of keymaps for related commands and the ability to repeat terminal commands. Works in conjunction with the ~general~ package.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bindings.el

  (straight-use-package 'hydra)
  (unless (fboundp 'defhydra)
    (autoload #'defhydra "hydra"))

  (defhydra hydra-text-scale (:timeout 5)
    "Scale text."
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out"))

  (defhydra hydra-window-scale (:timeout 5)
    "Scale window."
    ("<" evil-window-decrease-width "width dec")
    (">" evil-window-increase-width "width inc")
    ("-" evil-window-decrease-height "height dec")
    ("+" evil-window-increase-height "height inc")
    ("=" balance-windows "balance"))

  (defhydra hydra-x-window-scale (:timeout 5)
    "Scale x window."
    ("<" (exwm-layout-shrink-window-horizontally 50) "width dec")
    (">" (exwm-layout-enlarge-window-horizontally 50) "width inc")
    ("-" (exwm-layout-shrink-window 50) "height dec")
    ("+" (exwm-layout-enlarge-window 50) "height inc")
    ("w" exwm-floating-toggle-floating "float toggle")
    ("f" exwm-layout-set-fullscreen "fullscreen"))

  (defhydra hydra-window-move (:timeout 5)
    "Move window."
    ("h" windmove-left "left")
    ("l" windmove-right "right")
    ("j" windmove-down "down")
    ("k" windmove-up "up"))

  (defhydra hydra-window-swap (:timeout 5)
    "Swap window."
    ("h" windmove-swap-states-left "left")
    ("l" windmove-swap-states-right "right")
    ("j" windmove-swap-states-down "down")
    ("k" windmove-swap-states-up "up"))

  (defhydra hydra-window-change (:timeout 5)
    "Change window."
    ("l" next-buffer "right")
    ("h" previous-buffer "left"))

  (defhydra hydra-eyebrowse-switch (:timeout 5)
    "Switch workspace."
    ("l" eyebrowse-next-window-config "next")
    ("h" eyebrowse-prev-window-config "prev"))

  (defhydra hydra-perspective-switch (:timeout 5)
    "Switch perspective."
    ("l" persp-next "next")
    ("h" persp-prev "prev"))

  (with-eval-after-load 'general
    (pg/leader-keys
      "s" '(:ignore t :which-key "scaling")
      "st" '(hydra-text-scale/body :which-key "scale text")
      "sw" '(hydra-window-scale/body :which-key "scale window")
      "sx" '(hydra-x-window-scale/body :which-key "scale x window")

      "w" '(:ignore t :which-key "window")
      "wm" '(hydra-window-move/body :which-key "move")
      "ws" '(hydra-window-swap/body :which-key "swap")
      "wc" '(hydra-window-change/body :which-key "change")))

#+end_src

*** Package | iso-transl

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bindings.el

  (require 'iso-transl)
  (with-eval-after-load 'iso-transl
    (global-set-key (kbd "<Multi_key>") #'iso-transl-ctl-x-8-map))

#+end_src

*** Keybindings package

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/lisp/pg-bindings.el

  (provide 'pg-bindings)

#+end_src

* Emacs Profile

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/early-init.el

  ;;; early-init.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

  (setopt package-enable-at-startup nil)

#+end_src

#+begin_src emacs-lisp :tangle ~/.dotfiles/.emacs.d/init.el

  ;;; init.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

  (setq gc-cons-threshold (* 50 1000 1000)) ;; Sets garbage collection threshold high enough

  (push (expand-file-name "lisp" user-emacs-directory) load-path)
  (push (expand-file-name "themes" user-emacs-directory) custom-theme-load-path)

  (defconst pg/user
    `( :user "phil-gab99"
       :name "Philippe Gabriel"
       :email "pgabriel999@hotmail.com"
       :email-udem "philippe.gabriel.1@umontreal.ca"
       :city "montreal"
       :font-fixed "JetBrains Mono"
       :font-variable "Iosevka Aile"
       :home ,(or (getenv "HOME") (expand-file-name "~"))
       :cache ,(or (getenv "XDG_CACHE_HOME") (expand-file-name ".cache" "~"))
       :config ,(or (getenv "XDG_CONFIG_HOME") (expand-file-name ".config" "~"))
       :documents ,(or (getenv "XDG_DOCUMENTS_DIR") (expand-file-name "Documents" "~"))
       :download ,(or (getenv "XDG_DOWNLOAD_DIR") (expand-file-name "Downloads" "~"))
       :music ,(or (getenv "XDG_MUSIC_DIR") (expand-file-name "Music" "~"))
       :dotfiles ,(expand-file-name ".dotfiles" "~")
       :guix-home-profile ,(expand-file-name ".guix-home/profile" "~"))
    "Plist holding user details")

  ;; System related constants
  (defconst pg/is-termux
    (string-suffix-p "Android" (string-trim (shell-command-to-string "uname -a")))
    "Determines whether the current system is an Android based system.")
  (defconst pg/is-windows (eq system-type 'windows-nt)
    "Determines whether the current system is a Windows based system.")
  (defconst pg/is-linux (eq system-type 'gnu/linux)
    "Determines whether the current system is a GNU/Linux based system.")
  (defconst pg/is-guix-system
    (and pg/is-linux
         (string-match-p (regexp-quote "(guix@guix)")
                         (shell-command-to-string "cat /proc/version")))
    "Determines whether the current system is a GNU/Linux based system running the
    GNU Guix distribution.")
  (defconst pg/exwm-enabled
    (getenv "EXWM")
    "Determines whether the EXWM is currently running.")

  (defun pg/close-all-buffers ()
    "Closes all emacs buffers."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))

  (defun pg/save-buffers-kill-emacs ()
    "Closes all emacs buffers before exiting emacs."
    (interactive)
    (if pg/exwm-enabled (pg/kill-panel))
    (save-buffers-kill-emacs))

  (global-set-key (kbd "C-x C-c") #'pg/save-buffers-kill-emacs)

  (setopt load-prefer-newer t
          use-short-answers t
          auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
          warning-suppress-log-types '((lsp-mode))
          warning-suppress-types '((lsp-mode))
          warning-minimum-level :error
          help-at-pt-display-when-idle t)

  (require 'pg-startup)
  (if pg/exwm-enabled (require 'pg-desktop))

  (dolist (package '(pg-ui
                     pg-bindings
                     pg-org
                     pg-completion
                     pg-editing
                     pg-native-compilation
                     pg-guix
                     pg-passwords
                     pg-keylog
                     pg-buffer
                     pg-email
                     pg-help
                     pg-web
                     pg-file
                     pg-shell

                     pg-project
                     pg-programming
                     pg-programming-ada
                     ;; pg-programming-alloy
                     pg-programming-arduino
                     pg-programming-cc
                     pg-programming-clojure
                     ;; pg-programming-commonlisp
                     pg-programming-css
                     pg-programming-docker
                     pg-programming-elisp
                     pg-programming-erlang
                     pg-programming-gdscript
                     pg-programming-git
                     pg-programming-groovy
                     pg-programming-haskell
                     pg-programming-html
                     pg-programming-i3config
                     pg-programming-java
                     pg-programming-json
                     ;; pg-programming-lmc
                     pg-programming-markdown
                     pg-programming-mips
                     pg-programming-php
                     pg-programming-prolog
                     pg-programming-python
                     pg-programming-scala
                     ;; pg-programming-smtlibv2
                     pg-programming-sql
                     pg-programming-javascript
                     pg-programming-tex
                     pg-programming-typescript
                     ;; pg-programming-vhdl
                     pg-programming-xml
                     pg-programming-yaml

                     pg-notification
                     pg-viewers
                     ;; pg-bible
                     pg-finance
                     pg-social
                     pg-weather
                     pg-music
                     pg-games))
    (require package))

  ;; This section needs to be at the end so that Emacs doesn't complain about packages not being on load path
  (unless pg/is-windows
    (require 'ob-jupyter)
    (org-babel-do-load-languages ;; Loads languages to be executed by org-babel
     'org-babel-load-languages '((emacs-lisp . t)
                                 (java . t)
                                 (shell . t)
                                 ;; (plantuml . t)
                                 (python . t)
                                 (arduino . t)
                                 (jupyter . t)))

    (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                         (:session . "py")
                                                         (:kernel . "python3")))
    (setf (alist-get "jupyter-python" org-src-lang-modes nil nil #'equal) 'python-ts))

  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
