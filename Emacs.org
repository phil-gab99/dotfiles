#+title: Emacs configuration
#+author: Philippe Gabriel

Below is a sectioned configuration of emacs. Each code blocks gets written out to the ~~/.emacs.d/init.el~ config file.

* Startup

** Performance Measurements

Here we reduce threshold for garbage collector to improve performanceand check for the startup time.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  
  (setq gc-cons-threshold (* 50 1000 1000)) ; Sets garbage collection threshold high enough

#+end_src

** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-startup.el

  ;;; pg-startup.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

** Server Initialization

Starting a server for displaying polybar info

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-startup.el

  (server-start)

#+end_src

** Package Initialization

Some initializations are first set up.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-startup.el

  (unless (featurep 'straight)
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))

#+end_src

** Package | use-package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-startup.el

  (straight-use-package 'use-package)
  (require 'use-package)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-use-package"

#+end_src

** Startup package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-startup.el

  (provide 'pg-startup)

#+end_src

* Native Compilation

** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-native-compilation.el

  ;;; pg-native-compilation.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

** Native compilation settings

Some settings specific to the ~emacs-native-comp~ version of emacs

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-native-compilation.el

  (setq native-comp-async-report-warnings-errors nil) ; Silence compiler warnings
  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory)) ; Set directory for cache storage

#+end_src

** Native compilation package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-native-compilation.el

  (provide 'pg-native-compilation)

#+end_src

* Packages

** Guix Management

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-guix.el

  ;;; pg-guix.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | guix

Emacs interface for guix package manager.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-guix.el

  (use-package guix
    :straight nil
    :init
    (require 'guix)
    :commands guix)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-guix"

#+end_src

*** Package | geiser

Scheme REPL.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-guix.el

  (use-package geiser
    :straight nil
    :init
    (require 'geiser)
    :after guix)
    ;; :bind
    ;; (:map geiser-repl-mode-map
    ;;       ("C-l" . geiser-repl-clear-buffer)))

#+end_src

*** System management package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-guix.el

  (provide 'pg-guix)

#+end_src

** Password Utilities

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-passwords.el

  ;;; pg-passwords.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | auth-source

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-passwords.el

  (use-package auth-source
    :straight nil
    :init
    (require 'auth-source)
    :custom
    (auth-sources '("~/.authinfo.gpg")))

#+end_src

*** Package | epg-config

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-passwords.el

  (unless pg/is-termux
    (use-package epg-config
      :straight nil
      :init
      (require 'epg-config)
      :custom
      (epg-pinentry-mode 'loopback)))

#+end_src

*** Package | pinentry

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-passwords.el

  (unless pg/is-termux
    (use-package pinentry
      :straight t
      :init
      (require 'pinentry)
      :config
      (pinentry-start)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-pinentry"
  "pinentry-emacs"

#+end_src

*** Package | password-cache

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-passwords.el

  (use-package password-cache
    :straight nil
    :init
    (require 'password-cache)
    :custom
    (password-cache-expiry (* 60 60 2)))

#+end_src

*** Package | password-store

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-passwords.el

  (use-package password-store
    :straight t
    :init
    (require 'password-store)
    :custom
    (password-store-time-before-clipboard-restore 60))

#+end_src

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-password-store"

#+end_src

*** Password lookup

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-passwords.el

  (defun pg/lookup-password (&rest keys)
    "Looks up passwords from `authinfo' entries."
    (let ((result (apply #'auth-source-search keys)))
      (if result
          (funcall (plist-get (car result) :secret))
        nil)))

#+end_src

*** Password utilities package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-passwords.el

  (provide 'pg-passwords)

#+end_src

** Keybind Log

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-keylog.el

  ;;; pg-keylog.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | keycast

Useful when starting out with the various keybindings and when presenting to an audience.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-keylog.el

  (define-minor-mode pg/keycast-mode
    "Show current command and its key binding in the mode line (fix for use with
        doom-mode-line)."
    :global t
    (interactive)
    (if pg/keycast-mode
        (add-hook 'pre-command-hook #'keycast--update t)
      (remove-hook 'pre-command-hook #'keycast--update)))

  (use-package keycast
    :straight t
    :init
    (require 'keycast)
    :custom
    (keycast-mode-line-format "%2s%k%c%2s")
    :config
    (fset #'keycast-mode #'pg/keycast-mode)
    (keycast-mode)
    (add-to-list 'global-mode-string '("" keycast-mode-line)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-keycast"

#+end_src

*** Keybind Log package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-keylog.el

  (provide 'pg-keylog)

#+end_src

** Command Completion Framework

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-completion.el

  ;;; pg-completion.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | savehist

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-completion.el

  (use-package savehist
    :straight nil
    :init
    (require 'savehist)
    :config
    (savehist-mode))

#+end_src

*** Package | marginalia

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-completion.el

  (use-package marginalia
    :straight t
    :init
    (require 'marginalia)
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy
                             marginalia-annotators-light
                             nil))
    :config
    (marginalia-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-marginalia"

#+end_src

*** Package | consult

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-completion.el

  (use-package consult
    :straight t
    :init
    (require 'consult)
    :bind
    ("C-s" . consult-line)
    ("C-x b" . consult-buffer)
    (:map minibuffer-local-map
          ("C-r" . consult-history)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-consult"

#+end_src

*** Package | orderless

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-completion.el

  (use-package orderless
    :straight t
    :init
    (require 'orderless)
    :after vertico
    :custom
    (completion-styles '(orderless))
    (completion-category-defaults nil)
    (orderless-skip-highlighting nil)
    (completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-orderless"

#+end_src

*** Package | corfu

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-completion.el

  (use-package corfu
    :straight t
    :init
    (require 'corfu)
    :custom
    (corfu-cycle t)
    :bind
    (:map corfu-map
          ("C-j" . corfu-next)
          ("C-k" . corfu-previous)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-corfu"

#+end_src

*** Package | vertico

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-completion.el

  (use-package vertico
    :straight t
    :init
    (require 'vertico)
    :custom
    (vertico-cycle t)
    :bind
    (:map vertico-map
          ("C-j" . vertico-next)
          ("C-k" . vertico-previous))
    :config
    (vertico-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-vertico"

#+end_src

*** Package | embark

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-completion.el

  (use-package embark
    :straight t
    :init
    (require 'embark)
    :custom
    (embark-confirm-act-all nil)
    :bind
    ("C-S-a" . embark-act)
    (:map minibuffer-local-map
          ("C-d" . embark-act))
    :config
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-embark"

#+end_src

*** Package | embark-consult

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-completion.el

  (use-package embark-consult
    :straight '(embark-consult :host github
                               :repo "oantolin/embark"
                               :files ("embark-consult.el"))
    :init
    (require 'embark-consult)
    :after (embark consult)
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

*** Package | prescient

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-completion.el

  (use-package prescient
    :straight t
    :init
    (require 'prescient))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-prescient"

#+end_src

*** Package | which-key

Displays additional keybindings subsequent to prefix keybindings

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-completion.el

  (use-package which-key
    :straight t
    :init
    (require 'which-key)
    :after diminish
    :diminish which-key-mode
    :custom
    (which-key-idle-delay 1)
    :config
    (which-key-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-which-key"

#+end_src

*** Package | helm

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-completion.el

  (defun pg/helm-lsp-java ()
    "Enables `helm' when `lsp-java' is running."
    (if (and (eq #'java-mode major-mode)
             (memq #'lsp-mode local-minor-modes))
        (helm-mode 1)
      (helm-mode 0)))

  (use-package helm
    :straight t
    :init
    (require 'helm)
    :after lsp-java
    :hook
    (java-mode . pg/helm-lsp-java)
    :bind
    (:map helm-map
          ("C-j" . helm-next-line)
          ("C-k" . helm-previous-line)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-helm"

#+end_src

*** Command completion framework package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-completion.el

  (provide 'pg-completion)

#+end_src

** UI Enhancement

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-ui.el

  ;;; pg-ui.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** UI basic settings

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-ui.el

  (setq inhibit-startup-message t  ; Disable startup message
        scroll-conservatively 1000 ; Slow scrolling
        split-width-threshold 185) ; Width for splitting
  (unless pg/is-termux
    (scroll-bar-mode 0)            ; Disable visible scrollbar
    (tool-bar-mode 0)              ; Disable toolbar
    (tooltip-mode 0))
  (menu-bar-mode 0)                ; Disable menu bar

  ;; Set frame transparency
  (unless (or pg/is-termux (not pg/exwm-enabled))
    (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
    (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized)))

#+end_src

*** Package | diminish

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-ui.el

  (use-package diminish
    :straight t
    :init
    (require 'diminish))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-diminish"

#+end_src

*** Package | all-the-icons

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-ui.el

  (use-package all-the-icons
    :straight t
    :init
    (require 'all-the-icons))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-all-the-icons"

#+end_src

*** Package | doom-modeline

Customizes the look of the modeline for better aesthetic.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-ui.el

  (use-package doom-modeline
    :straight t
    :init
    (require 'doom-modeline)
    :custom
    (doom-modeline-height 15)
    (doom-modeline-modal-icon nil)
    (doom-modeline-enable-word-count t)
    (doom-modeline-indent-info t)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-mu4e t)
    :config
    (doom-modeline-mode 1))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-doom-modeline"

#+end_src

*** Package | autothemer

Important to disable current theme ~M-x disable-theme~ in order to experiment.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-ui.el

  (use-package autothemer
    :straight t
    :init
    (require 'autothemer)
    :config
    (load-theme 'onedark-variant t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-autothemer"

#+end_src

*** Package | dashboard

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-ui.el

  (defun pg/dashboard-setup-startup-hook ()
    "Setup post initialization hooks."
    (add-hook 'after-init-hook #'(lambda ()
                                   ;; Display useful lists of items
                                   (dashboard-insert-startupify-lists)))
    (add-hook 'emacs-startup-hook #'(lambda ()
                                      (switch-to-buffer dashboard-buffer-name)
                                      (goto-char (point-min))
                                      (redisplay)
                                      (run-hooks 'dashboard-after-initialize-hook))))

  (defun pg/display-startup-time ()
    "Displays some startip statistics."
    (let ((package-count 0) (time (float-time (time-subtract after-init-time before-init-time))))
      (when (boundp 'straight--profile-cache)
        (setq package-count (+ (hash-table-count straight--profile-cache) package-count)))
      (if (zerop package-count)
          (format "Emacs started in %.2f" time)
        (format "%d packages loaded in %.2f seconds with %d garbage collections" package-count time gcs-done))))

  (use-package dashboard
    :straight t
    :init
    (fset #'dashboard-setup-startup-hook #'pg/dashboard-setup-startup-hook)
    (require 'dashboard)
    :after projectile
    :custom
    (dashboard-set-file-icons t)
    (dashboard-items '((recents . 5)
                       (projects . 10)
                       (agenda . 5)))
    (dashboard-page-separator "\n\f\n")
    (dashboard-init-info #'pg/display-startup-time)
    :config
    (pg/dashboard-setup-startup-hook))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-dashboard" ;; old version 1.7.0, need 1.8.0

#+end_src

*** Package | page-break-lines

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-ui.el

  (use-package page-break-lines
    :straight t
    :init
    (require 'page-break-lines))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-page-break-lines"

#+end_src

*** UI enhancement package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-ui.el

  (provide 'pg-ui)

#+end_src

** Window Management

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-buffer.el

  ;;; pg-buffer.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Window basic management

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-buffer.el

  (setq even-window-sizes nil
        display-buffer-base-action
        '(display-buffer-reuse-mode-window
          display-buffer-reuse-window
          display-buffer-same-window))

#+end_src

*** Package | bufler

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-buffer.el

  (use-package bufler
    :straight t
    :init
    (require 'bufler)
    :after evil-collection
    :commands bufler
    :bind
    ("C-x C-b" . bufler)
    :config
    (evil-collection-define-key 'normal 'bufler-list-mode-map
      (kbd "RET")   'bufler-list-buffer-switch
      (kbd "M-RET") 'bufler-list-buffer-peek
      "D"           'bufler-list-buffer-kill)
    (setf bufler-groups
          (bufler-defgroups

            ;; Subgroup collecting all named workspaces.
            (group (auto-workspace))

            ;; Subgroup collecting buffers in a projectile project.
            (group (auto-projectile))

            ;; Grouping browser windows
            (group
             (group-or "Browsers"
                       (name-match "Firefox" (rx bos "firefox"))))

            (group
             (group-or "Chat"
                       (name-match "Discord" (rx bos "discord"))
                       (mode-match "Slack" (rx bos "slack-"))))

            (group
             ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
             (group-or "Help/Info"
                       (mode-match "*Help*" (rx bos (or "help-" "helpful-")))
                       (mode-match "*Info*" (rx bos "info-"))))

            (group
             ;; Subgroup collecting all special buffers (i.e. ones that are not
             ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
             ;; through to other groups, so they end up grouped with their project buffers).
             (group-and "*Special*"
                        (name-match "**Special**"
                                    (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace" "Pinentry") "*"))
                        (lambda (buffer)
                          (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                               buffer)
                                      (funcall (mode-match "Dired" (rx bos "dired"))
                                               buffer)
                                      (funcall (auto-file) buffer))
                            "*Special*"))))

            ;; Group remaining buffers by major mode.
            (auto-mode))))

#+end_src

*** Package | winner-mode

For window configurations

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-buffer.el

  (use-package winner
    :straight nil
    :init
    (require 'winner)
    :config
    (winner-mode))

#+end_src

*** Package | tab-bar

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-buffer.el

  (use-package tab-bar
    :straight nil
    :init
    (require 'tab-bar)
    :custom
    (tab-bar-show 1)
    :config
    (tab-bar-mode))

#+end_src

*** Package | perspective

For organizing the buffer list

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-buffer.el

  (use-package perspective
    :straight t
    :init
    (require 'perspective)
    :custom
    (persp-suppress-no-prefix-key-warning t)
    :bind
    ("C-x k" . persp-kill-buffer*)
    :config
    (unless (equal persp-mode t)
      (persp-mode)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-perspective"

#+end_src

*** Window management package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-buffer.el

  (provide 'pg-buffer)

#+end_src

** Email Management

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-email.el

  ;;; pg-email.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Email configuration file

After having setup the file, make sure to run the following commands:
- ~mu init --maildir=~/Mail --my-address=address1@domain1.com --my-address=address2@domain2.com ...~ - For all different addresses
- ~mu index~ - To index the given addresses

#+begin_src conf :tangle ~/.mbsyncrc

  # Main hotmail account
  IMAPAccount hotmail
  Host outlook.office365.com
  User pgabriel999@hotmail.com
  Port 993
  PassCmd "emacsclient -e \"(pg/lookup-password :host \\\"hotmail.com\\\" :user \\\"pgabriel999\\\")\" | cut -d '\"' -f2"
  SSLType IMAPS
  CertificateFile /etc/ssl/certs/ca-certificates.crt

  IMAPStore hotmail-remote
  Account hotmail

  MaildirStore hotmail-local
  Subfolders Verbatim
  Path /home/phil-gab99/Mail/Main/
  Inbox /home/phil-gab99/Mail/Main/Inbox

  Channel hotmail
  Far :hotmail-remote:
  Near :hotmail-local:
  Patterns *
  CopyArrivalDate yes
  Create Both
  Expunge Both
  SyncState *

  # University account
  IMAPAccount umontreal
  Host outlook.office365.com
  User philippe.gabriel.1@umontreal.ca
  Port 993
  PassCmd "emacsclient -e \"(pg/lookup-password :host \\\"umontreal.ca\\\" :user \\\"philippe.gabriel.1\\\")\" | cut -d '\"' -f2"
  SSLType IMAPS
  AuthMechs PLAIN
  CertificateFile /etc/ssl/certs/ca-certificates.crt

  IMAPStore umontreal-remote
  Account umontreal

  MaildirStore umontreal-local
  SubFolders Verbatim
  Path /home/phil-gab99/Mail/University/
  Inbox /home/phil-gab99/Mail/University/Inbox

  Channel umontreal
  Far :umontreal-remote:
  Near :umontreal-local:
  Patterns *
  CopyArrivalDate yes
  Create Both
  Expunge Both
  SyncState *

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "mu"
  "isync"
  "oauth2ms"

#+end_src

*** Package | mu4e

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-email.el

  (unless pg/is-termux
    (use-package mu4e
      :straight '(mu4e :type git
                       :host github
                       :repo "djcb/mu"
                       :branch "release/1.8")
      :commands mu4e
      :hook
      (mu4e-compose-mode . corfu-mode)
      ;; (mu4e-main-mode . (lambda () (mu4e t)))
      :custom
      (mail-user-agent #'mu4e-user-agent)
      (mu4e-change-filenames-when-moving t)
      (mu4e-update-interval (* 10 60))
      (mu4e-get-mail-command "mbsync -a")
      ;; (mu4e-maildir (expand-file-name "~/Mail"))
      (mu4e-compose-format-flowed t)
      (mu4e-compose-signature
       (concat "Philippe Gabriel - \n"
               "[[mailto:philippe.gabriel.1@umontreal.ca][philippe.gabriel.1@umontreal.ca]] | "
               "[[mailto:pgabriel999@hotmail.com][pgabriel999@hotmail.com]]"))
      (mu4e-compose-signature-auto-include nil)
      (message-send-mail-function 'smtpmail-send-it)
      (mu4e-maildir-shortcuts
       '(("/University/Inbox" . ?u)
         ("/University/Drafts" . ?d)
         ("/Main/Inbox" . ?m)
         ("/Main/Jobs" . ?j)
         ("/Main/University" . ?s)))
      (mu4e-context-policy 'pick-first)
      :config
      (require 'mu4e-org)
      (setq mu4e-contexts
            (list
             ;; Main account
             (make-mu4e-context
              :name "Main"
              :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/Main" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "pgabriel999@hotmail.com")
                      (user-full-name . "Philippe Gabriel")
                      (smtpmail-smtp-server . "smtp.office365.com")
                      (smtpmail-smtp-user . "pgabriel999@hotmail.com")
                      (smtpmail-smtp-service . 587)
                      (smtpmail-stream-type . starttls)
                      (mu4e-drafts-folder . "/Main/Drafts")
                      (mu4e-sent-folder . "/Main/Sent")
                      (mu4e-refile-folder . "/Main/Archive")
                      (mu4e-trash-folder . "/Main/Deleted")))

             ;; University account
             (make-mu4e-context
              :name "University"
              :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/University" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "philippe.gabriel.1@umontreal.ca")
                      (user-full-name . "Philippe Gabriel")
                      (smtpmail-smtp-server . "smtp.office365.com")
                      (smtpmail-smtp-user . "philippe.gabriel.1@umontreal.ca")
                      (smtpmail-smtp-service . 587)
                      (smtpmail-stream-type . starttls)
                      (mu4e-drafts-folder . "/University/Drafts")
                      (mu4e-sent-folder . "/University/Sent Items")
                      (mu4e-refile-folder . "/University/Archive")
                      (mu4e-trash-folder . "/University/Deleted Items")))))))

#+end_src

*** Package | mu4e-alert

Allows for notification pop-up and mode line count when receiving emails

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-email.el

  (use-package mu4e-alert
    :straight t
    :init
    (require 'mu4e-alert)
    :custom
    (mu4e-alert-notify-repeated-mails t)
    :config
    (mu4e-alert-set-default-style 'notifications)
    (mu4e-alert-enable-notifications)
    (mu4e-alert-enable-mode-line-display))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-mu4e-alert"

#+end_src

*** Email management package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-email.el

  (provide 'pg-email)

#+end_src

** Editing Experience

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-editing.el

  ;;; pg-editing.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Basic editing configuration

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-editing.el

  (setq tab-width 4                     ; Set tab length
        custom-buffer-indent 2
        display-line-numbers-type 'relative)
  (setq-default indent-tabs-mode nil    ; Disable tab caracter
                fill-column 80)         ; 80 caracter column indicator
  (show-paren-mode 1)                   ; Enable delimiters matching
  (save-place-mode 1)                   ; Remembers last cursor placement in file
  (column-number-mode)                  ; Show column numbers
  (mouse-avoidance-mode 'banish)        ; No mouse allowed
  (global-display-line-numbers-mode 1)  ; Show line numbers
  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
  (add-hook 'compilation-filter-hook
            #'(lambda () (ansi-color-apply-on-region (point-min) (point-max))))

  (dolist (mode '(org-mode-hook         ; Disable line numbers for some modes
                  Info-mode-hook
                  eww-mode-hook
                  term-mode-hook
                  coming-mode-hook
                  gfm-view-mode-hook
                  compilation-mode-hook
                  dashboard-mode-hook
                  eshell-mode-hook
                  sql-interactive-mode-hook
                  pdf-view-mode-hook
                  telega-root-mode-hook
                  telega-chat-mode
                  telega-image-mode
                  sokoban-mode-hook
                  doc-view-mode-hook
                  mu4e-main-mode-hook
                  Man-mode-hook
                  simple-mpc-mode-hook
                  treemacs-mode-hook
                  vterm-mode-hook
                  geiser-repl-mode-hook
                  slack-mode-hook
                  shell-mode-hook))
    (add-hook mode #'(lambda() (display-line-numbers-mode 0))))

#+end_src

*** Fonts

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-editing.el

  (set-face-attribute 'default nil :font "JetBrains Mono" :weight 'light :height 120)
  (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :weight 'light)
  (set-face-attribute 'variable-pitch nil :font "Iosevka Aile" :weight 'regular)

  (set-face-attribute 'italic nil :slant 'italic)

#+end_src

*** Package | ligature

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-editing.el

  (use-package ligature
    :straight '(ligature :type git
                         :host github
                         :repo "mickeynp/ligature.el")
    :init
    (require 'ligature)
    :config
    (ligature-set-ligatures 't '("++" "--" "/=" "&&" "||" "||=" "->" "=>" "::" "__" "==" "===" "!=" "=/=" "!=="
                                 "<=" ">=" "<=>" "/*" "*/" "//" "///" "\\n" "\\\\" "<<" "<<<" "<<=" ">>" ">>>" ">>="
                                 "|=" "^=" "**" "?." "</" "<!--" "</>" "-->" "/>" "www" "##" "###" "####" "#####"
                                 "######" "--" "---" "----" "-----" "------" "====" "=====" "======" "[]" "<>" "<~>"
                                 "??" ".." "..." "=~" "!~" ":=" "..<" "!!" ":::" "=!=" "=:=" "<:<" "..=" "::<"
                                 "#{" "#(" "#_" "#_(" "#?" "#:" ".-" ";;" "~@" "<-" "#{}" "|>" "=>>" "=<<" ">=>" "<=<"
                                 "=>=" "=<=" "<$" "<$>" "$>" "<+" "<+>" "+>" "<*" "<*>" "*>" "<|>" ".=" "#=" "+++" "***"
                                 ":>:" ":<:" "<|||" "<||" "<|" "||>" "|||>" "[|" "|]" "~-" "~~" "%%" "/\\" "\\/" "-|" "_|"
                                 "_|_" "|-" "||-" ":>" ":<" ">:" "<:" "::>" "<::" ">::" "{|" "|}" "#[" "]#" "::="
                                 "#!" "#=" "->>" ">-" ">>-" "->-" "->>-" "=>>=" ">>->" ">>=>" "|->" "|=>" "~>" "~~>" "//=>"
                                 "<<-" "-<" "-<<" "-||" "-<-" "-<<-" "=<" "=|" "=||" "=<<=" "<-<<" "<=<<" "<-|" "<=|" "<~"
                                 "<~~" "<=//" "<->" "<<=>>" "|-|-|" "|=|=|" "/=/"))
    (global-ligature-mode 't))

#+end_src

*** Package | rainbow-delimiters

Colors matching delimiters with different colours for distinguishability.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-editing.el

  (use-package rainbow-delimiters
    :straight t
    :init
    (require 'rainbow-delimiters)
    :hook
    (prog-mode . rainbow-delimiters-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-rainbow-delimiters"

#+end_src

*** Package | abbrev-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-editing.el

  (use-package abbrev
    :straight nil
    :init
    (require 'abbrev)
    :after diminish
    :diminish abbrev-mode)

#+end_src

*** Package | highlight-indent-guides

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-editing.el

  (use-package highlight-indent-guides
    :straight t
    :init
    (require 'highlight-indent-guides)
    :hook
    (prog-mode . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-responsive 'stack)
    (highlight-indent-guides-method 'character))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-highlight-indent-guides" ;; Old version 0.8.5

#+end_src

*** Package | smartparens

For surrounding delimiter matching and autocompletion.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-editing.el

  (use-package smartparens
    :straight t
    :init
    (require 'smartparens)
    :after diminish
    :diminish smartparens-mode
    :config
    (smartparens-global-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-smartparens"

#+end_src

*** Package | outshine

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-editing.el

  (use-package outshine
    :straight t
    :init
    (require 'outshine)
    :hook
    (prog-mode . outshine-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-outshine"

#+end_src

*** Package | selectric-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-editing.el

  (defun pg/selectric-type-sound ()
    "Make the sound of the printing element hitting the paper."
    (progn
      (selectric-make-sound (format "%sselectric-move.wav" selectric-files-path))
      (unless (minibufferp)
        (if (= (current-column) (current-fill-column))
            (selectric-make-sound (format "%sping.wav" selectric-files-path))))))

  (use-package selectric-mode
    :disabled
    :straight t
    :init
    (require 'selectric-mode)
    :init
    (fset #'selectric-type-sound #'pg/selectric-type-sound))

#+end_src

*** Package | rainbow-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-editing.el

  (use-package rainbow-mode
    :straight t
    :init
    (require 'rainbow-mode)
    :after diminish
    :diminish rainbow-mode
    :hook
    ((org-mode
      emacs-lisp-mode
      web-mode
      typescript-mode
      css-mode
      scss-mode
      less-css-mode) . rainbow-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-rainbow-mode"

#+end_src

*** Package | emojify

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-editing.el

  (use-package emojify
    :straight t
    :init
    (require 'emojify)
    :config
    (global-emojify-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-emojify"

#+end_src

*** Package | evil

Allows usage of vim-like keybindings for some modes in emacs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-editing.el

  (defun pg/evil-hook()
    "Modes that should start in emacs mode"
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
    :straight t
    :preface
    (customize-set-variable 'evil-want-keybinding nil)
    :init
    (require 'evil)
    :hook
    (evil-mode . pg/evil-hook)
    :custom
    (evil-want-integration t)
    (evil-want-C-u-scroll t)
    (evil-want-C-i-jump nil)
    (evil-want-Y-yank-to-eol t)
    (evil-want-fine-undo t)
    :bind
    (:map evil-insert-state-map
          ("C-g" . evil-normal-state))
    :config
    (evil-mode 1)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (dolist (mode '(messages-buffer-mode
                    dashboard-mode))
      (evil-set-initial-state mode 'normal)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-evil"

#+end_src

*** Package | evil-collection

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-editing.el

  (use-package evil-collection
    :straight t
    :init
    (require 'evil-collection)
    :after (evil diminish)
    :diminish evil-collection-unimpaired-mode
    :config
    (evil-collection-init))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-evil-collection"

#+end_src

*** Editing experience package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-editing.el

  (provide 'pg-editing)

#+end_src

** Help Documentation

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-help.el

  ;;; pg-help.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | helpful

Displays full documentations in place of the default help function.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-help.el

  (use-package helpful
    :straight t
    :init
    (require 'helpful)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-helpful"

#+end_src

*** Package | Info

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-help.el

  (defun pg/Info-mode-setup ()
    "Defining some behaviours for the major info-mode."
    (auto-fill-mode 0)
    (setq-local face-remapping-alist '((default (:height 1.5) default)
                                       (fixed-pitch (:height 1.5) fixed-pitch)
                                       (info-menu-header (:height 1.5) info-menu-header)
                                       (info-title-1 (:height 1.05) info-title-1)
                                       (info-title-2 (:height 1.15) info-title-2)
                                       (info-title-3 (:height 1.15) info-title-3)
                                       (info-title-4 (:height 2.0) info-title-4)))
    (set-face-attribute 'Info-quoted nil :foreground "orange" :inherit 'fixed-pitch)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package info
    :straight nil
    :init
    (require 'info)
    :hook
    (Info-mode-hook . pg/Info-mode-setup))

#+end_src

*** Package | visual-fill-column

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-help.el

  (defun pg/docs-visual-fill ()
    "Applies text soft wrap."
    (setq visual-fill-column-width 150
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :straight t
    :init
    (require 'visual-fill-column)
    :hook
    ((org-mode
      gfm-view-mode
      Info-mode
      eww-mode) . pg/docs-visual-fill))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-visual-fill-column"

#+end_src

*** Help documentation package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-help.el

  (provide 'pg-help)

#+end_src

** Web Design

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-web.el

  ;;; pg-web.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | eww

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-web.el

  (defun pg/eww-mode-setup ()
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq-local face-remapping-alist '((variable-pitch (:height 2.0) variable-pitch)
                                       (fixed-pitch (:height 2.0) fixed-pitch)
                                       (default (:height 2.0) default))))

  (use-package eww
    :straight nil
    :init
    (require 'eww)
    :hook
    (eww-mode . pg/eww-mode-setup))

#+end_src

*** Web design package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-web.el

  (provide 'pg-web)

#+end_src

** File management

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-file.el

  ;;; pg-file.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Temporary Files Management and Symlinks

Some settings to manage where emacs stores backup files (such as the =~= backup files).

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-file.el

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory)))
        auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t))
        vc-follow-symlinks t)

#+end_src

*** Package | dired

The built-in directory editor. Some basic useful keybindings to keep in mind:
- ~j~ / ~k~ - Next / Previous line
- ~J~ - Jump to file in buffer
- ~RET~ - Select file or directory
- ~^~ - Go to parent directory
- ~g O~ - Open file in other window
- ~g o~ - Open file in other window in preview mode, which can be closed with ~q~
- ~M-RET~ - Show file in other window without focusing (previewing)

Keybindings relative to marking (selecting) in dired:
- ~m~ - Marks a file
- ~u~ - Unmarks a file
- ~U~ - Unmarks all files in buffer
- ~t~ - Inverts marked files in buffer
- ~% m~ - Mark files in buffer using regular expression
- ~*~ - Lots of other auto-marking functions
- ~K~ - "Kill" marked items, removed from the view only (refresh buffer with ~g r~ to get them back)
Many operations can be done on a single file if there are no active marks.

Keybindings relative to copying and renaming files:
- ~C~ - Copy marked files (or if no files are marked, the current file)
- ~R~ - Rename marked files
- ~% R~ - Rename based on regular expression

Keybindings relative to deleting files:
- ~D~ - Delete marked file
- ~d~ - Mark file for deletion
- ~x~ - Execute deletion for marks
- ~delete-by-moving-to-trash~ - Move to trash instead of deleting permanently if set to true

Keybindings relative to archives and compressing:
- ~Z~ - Compress or uncompress a file or folder to (.tar.gz)
- ~c~ - Compress selection to a specific file
- ~dired-compress-files-alist~ - Bind compression commands to file extension by adding additional extensions to the list

Keybindings for other useful operations:
- ~T~ - Touch (change timestamp)
- ~M~ - Change file mode
- ~O~ - Change file owner
- ~G~ - Change file group
- ~S~ - Create a symbolic link to this file
- ~L~ - Load an Emacs Lisp file into Emacs
  
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-file.el

  (use-package dired
    :straight nil
    :init
    (require 'dired)
    :after evil-collection
    :commands (dired dired-jump)
    :custom
    (dired-listing-switches "-agho --group-directories-first")
    :bind
    ("C-x C-j" . dired-jump)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

#+end_src

*** Package | dired-single

Keeps a single dired buffer open at a time (to not have multiple buried buffers).

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-file.el

  (use-package dired-single
    :straight t
    :init
    (require 'dired-single)
    :after dired)

#+end_src

*** Package | all-the-icons-dired

Displays icons in dired-mode.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-file.el

  (unless pg/is-termux
    (use-package all-the-icons-dired
      :straight t
      :init
      (require 'all-the-icons-dired)
      :hook
      (dired-mode . all-the-icons-dired-mode)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-all-the-icons-dired"

#+end_src

*** Package | dired-hide-dotfiles

Togglable option for hiding dot files.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-file.el

  (use-package dired-hide-dotfiles
    :straight t
    :init
    (require 'dired-hide-dotfiles)
    :after (dired evil-collection)
    :hook
    (dired-mode-hook . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map "H" 'dired-hide-dotfiles-mode))

#+end_src

*** Package | openwith

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-file.el

  (unless pg/is-termux
    (use-package openwith
      :disabled
      :straight t
    :init
    (require 'openwith)
      :custom
      (large-file-warning-threshold nil) 
      (openwith-associations `((,(openwith-make-extension-regexp '("mpg" "mpeg" "mp4" "avi" "wmv" "mov" "flv" "ogm" "ogg" "mkv"))
                                "mpv"
                                (file))
                               (,(openwith-make-extension-regexp '("odt"))
                                "libreoffice"
                                (file))))
      :config
      (openwith-mode 1)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-openwith"

#+end_src

*** File management package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-file.el

  (provide 'pg-file)

#+end_src

** Shell customization

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-shell.el

  ;;; pg-shell.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | eshell-git-prompt

Adds more detail to the prompt in eshell with custome themes.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-shell.el

  (use-package eshell-git-prompt
    :straight t
    :init
    (require 'eshell-git-prompt)
    :after eshell
    :config
    (eshell-git-prompt-use-theme 'multiline2))

#+end_src

*** Package | eshell-syntax-highlighting

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-shell.el

  (use-package eshell-syntax-highlighting
    :straight t
    :init
    (require 'eshell-syntax-highlighting)
    :after eshell
    :custom
    (eshell-syntax-highlighting-global-mode t))

#+end_src

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-eshell-syntax-highlighting"

#+end_src

*** Package | esh-autosuggest

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-shell.el

  (defun pg/esh-autosuggest-setup ()
    "Eshell autosuggest setup."
    (require 'company)
    (set-face-foreground 'company-preview-common nil)
    (set-face-background 'company-preview nil))

  (use-package esh-autosuggest
    :straight t
    :init
    (require 'esh-autosuggest)
    :after eshell
    :hook
    (eshell-mode . esh-autosuggest-mode)
    :custom
    (esh-autosuggest-delay 0.5)
    :config
    (pg/esh-autosuggest-setup))

#+end_src

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-esh-autosuggest"

#+end_src

*** Package | eshell

Some configurations to the built-in eshell.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-shell.el

  (defun pg/configure-eshell ()
    "Eshell setup."
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook #'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (corfu-mode)

    (setq eshell-history-size 10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell
    :straight nil
    :init 
    (require 'eshell)
    (require 'em-tramp)
    :hook
    (eshell-first-time-mode . pg/configure-eshell)
    :custom
    (eshell-prefer-lisp-functions t))

#+end_src

*** Package | vterm

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-shell.el

  (use-package vterm
    :straight nil
    :init
    (require 'vterm))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-vterm"

#+end_src

*** Shell customization package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-shell.el

  (provide 'pg-shell)

#+end_src

** Project Management and Version Control

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-project.el

  ;;; pg-project.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | projectile

Allows for git projects management. Accessed using the ~C-c p~ prefix. Some important notes:
- ~C-c p E~ - Allows creation of a local dirs dot file for pre-defining the values for some important other projectile variables.
  - If variables have not been set after this change then evaluate (~M-:~) the following function ~(hack-dir-local-variables)~.
- ~C-c p s r~ - Allows for use of the ~ripgrep~ command across the current reopository. Useful along with ~C-c C-o~ to pop out the results from the minibuffer into another buffer.
Note that the emacs built-in local dir creation can also be used and is more flexible.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-project.el

  (use-package projectile
    :straight t
    :init
    (require 'projectile)
    :after diminish
    :diminish projectile-mode
    :hook
    (lsp-mode . projectile-mode)
    :custom
    (projectile-switch-project-action #'projectile-dired)
    :bind
    (:map projectile-mode-map
	  ("C-c p" . projectile-command-map))
    :config
    (when (file-directory-p "~/Projects")
      (customize-set-variable 'projectile-project-search-path '("~/Projects"))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-projectile" ;; old version 2.5.0

#+end_src

*** Package | magit

Allows for git commands to be applied to the current repository using the command ~C-x g~ which invokes a ~git status~ command with some additional information. Typing ~?~ invokes a list of possible commands, typing ~?~ again invokes the help function for the different commands and typing ~?~ a third time invokes the manual for the package.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-project.el

  (use-package magit
    :straight t
    :init
    (require 'magit)
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-magit"

#+end_src

*** Package | git-gutter

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-project.el

  (use-package git-gutter
    :straight t
    :init
    (require 'git-gutter)
    :after diminish
    :diminish git-gutter-mode
    :hook
    ((text-mode-hook
      prog-mode-hook) . git-gutter-mode)
    :config
    (set-face-foreground 'git-gutter:added "LightGreen")
    (set-face-foreground 'git-gutter:modified "LightGoldenrod")
    (set-face-foreground 'git-gutter:deleted "LightCoral"))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-git-gutter"
  ;; "emacs-git-gutter-fringe"

#+end_src

*** Package | forge

Adds git forges to magit.
Steps to get working:
- Run ~forge-pull~ at the current git repo

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-project.el

  (use-package forge
    :straight t
    :init
    (require 'forge)
    :after magit
    :custom
    (forge-add-default-bindings nil))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-forge"

#+end_src

*** Project management and version control package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-project.el

  (provide 'pg-project)

#+end_src

** IDE Functionalities 

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming.el

  ;;; pg-programming.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | lsp-mode

Language Server Protocol for basic IDE functionalities. See [[https://emacs-lsp.github.io/lsp-mode/page/languages/][here]] for how to setup for different languages.
The ~lsp-ui-doc-focus-frame~ command allows to access the documentation frame of the pop-up.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming.el

  (defun pg/lsp-mode-setup ()
    "Displays structure of cursor position for all buffers."
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-lens-mode)
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :straight t
    :init
    (require 'lsp-mode)
    (require 'lsp-completion)
    :commands (lsp lsp-deferred)
    :hook
    (lsp-mode-hook . pg/lsp-mode-setup)
    :custom
    (lsp-completion-provider :none)
    (lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-lsp-mode"

#+end_src

*** Package | lsp-ui

Displays useful doc on hover.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming.el

  (use-package lsp-ui
    :straight t
    :init
    (require 'lsp-ui)
    :after lsp-mode
    :hook
    (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show-with-cursor t)
    (lsp-ui-doc-include-signature t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-lsp-ui"

#+end_src

*** Package | lsp-treemacs

Tree views in emacs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming.el

  (use-package lsp-treemacs
    :straight t
    :init
    (require 'lsp-treemacs)
    :after lsp)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-lsp-treemacs"

#+end_src

*** Package | company

For auto-completions while coding.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming.el

  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
    "Configures company backend with yasnippet for autocomplete candidates."
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (use-package company
    :straight t
    :init
    (require 'company)
    :hook
    (prog-mode . company-mode)
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    (company-tooltip-minimum-width 40)
    (company-tooltip-maximum-width 60)
    (company-backends (mapcar #'company-mode/backend-with-yas company-backends))
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-company"

#+end_src

*** Package | company-box

Includes icons for company mode suggestions.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming.el

  (use-package company-box
    :straight t
    :init
    (require 'company-box)
    :after company
    :hook
    (company-mode . company-box-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-company-box"

#+end_src

*** Package | company-prescient

Remembers autocomplete selections.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming.el

  (use-package company-prescient
    :straight t
    :init
    (require 'company-prescient)
    :after (company prescient)
    :custom
    (company-prescient-mode 1))

#+end_src

*** Package | flycheck

Syntax checking.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming.el

  (use-package flycheck
    :straight t
    :init
    (require 'flycheck)
    :after lsp-mode
    :hook
    (lsp-mode-hook . flycheck-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-flycheck"

#+end_src

*** Package | dap-mode

Debugger Adaptor Protocol for IDE debugging commands. See [[https://emacs-lsp.github.io/dap-mode/page/configuration/][here]] for how to setup for different languages.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming.el

  (use-package dap-mode
    :straight t
    :init
    (require 'dap-mode)
    :after lsp-mode
    :custom
    (dap-mode 1)
    (dap-ui-mode 1)
    (dap-ui-controls-mode 1))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-dap-mode"

#+end_src

*** Package | plantuml-mode

Allows writing textual descriptions for creating uml diagrams

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming.el

  (use-package plantuml-mode
    :straight t
    :init
    (require 'plantuml-mode)
    :custom
    (plantuml-indent-level 4)
    (plantuml-jar-path "~/bin/plantuml.jar")
    (plantuml-default-exec-mode 'jar))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-plantuml-mode"

#+end_src

*** Package | comment-dwin-2

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming.el

  (use-package comment-dwim-2
    :straight t
    :init
    (require 'comment-dwim-2)
    :bind
    ("M-/" . comment-dwim-2)
    (:map org-mode-map
          ("M-/" . org-comment-dwim-2)))

#+end_src

*** Package | yasnippet

Allows for code snippets for different languages.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming.el

  (use-package yasnippet
    :straight t
    :init
    (require 'yasnippet)
    :after (company diminish)
    :diminish yas-minor-mode
    :hook
    (prog-mode . yas-minor-mode)
    (yas-minor-mode . (lambda ()
                        (yas-activate-extra-mode 'fundamental-mode)))
    :config
    (yas-global-mode 1))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-yasnippet"

#+end_src

*** Package | yasnippet-snippets

Collection of code snippets for yasnippet.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming.el

  (use-package yasnippet-snippets
    :straight t
    :init
    (require 'yasnippet-snippets))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-yasnippet-snippets"

#+end_src

*** IDE functionalities package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming.el

  (provide 'pg-programming)

#+end_src

*** Languages

Some general tools for programming:

*Guix Packages*

#+begin_src scheme :tangle ~/.config/guix/manifests/build-tools.scm

  (specifications->manifest
   '("meson"
     "ninja"
     "autoconf"
     "automake"
     "libtool"
     "gmime"
     "xapian"
     "docker"
     ;; "gtk+"
     ;; "gtk+:bin"
     ;; "webkitgtk"
     ;; "guile"
     "pkg-config"
     "glibc"
     "glib"
     "glib:bin"
     ;; "check"
     "make"
     "cmake"))

#+end_src

**** Alloy

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-alloy.el

  ;;; pg-programming-alloy.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | alloy-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-alloy.el

  (use-package alloy-mode
    :disabled
    :straight t
    :init
    (require 'alloy-mode)
    :hook
    (alloy-mode . (lambda ()
                    (setq indent-tabs-mode nil)))
    :custom
    (alloy-basic-offset 4))

#+end_src

***** Alloy package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-alloy.el

  (provide 'pg-programming-alloy)

#+end_src

**** C/C++/Objective-C

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-cc.el

  ;;; pg-programming-cc.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | cc-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-cc.el

  (use-package cc-mode
    :straight nil
    :init
    (require 'cc-mode)
    :hook
    ((c-mode
      c++-mode
      objc-mode) . lsp-deferred)
    :custom
    (company-clang-executable (expand-file-name "~/.guix-extra-profiles/cc/cc/bin/clang")))

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.config/guix/manifests/cc.scm

  (specifications->manifest
   '("gcc-toolchain@10.3.0"
     "texinfo"
     "llvm"
     "clang"
     "ccls"
     "lld"
     "file"
     "elfutils"
     "go"))

#+end_src

***** Package | cc-vars

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-cc.el

  (use-package cc-vars
    :straight nil
    :init
    (require 'cc-vars)
    :after cc-mode
    :custom
    (c-basic-offset 4))

#+end_src
***** Package | company-c-headers

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-cc.el

  (use-package company-c-headers
    :straight t
    :init
    (require 'company-c-headers)
    :after (cc-mode company)
    :config
    (add-to-list 'company-backends '(company-c-headers :with company-yasnippet)))

#+end_src

***** Package | ccls

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-cc.el

  (use-package ccls
    :straight t
    :init
    (require 'ccls)
    :after (cc-mode lsp-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-ccls"

#+end_src

***** C languages package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-cc.el

  (provide 'pg-programming-cc)

#+end_src

**** Common Lisp

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-commonlisp.el

  ;;; pg-programming-commonlisp.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | sly

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-commonlisp.el

  (use-package sly
    :straight t
    :init
    (require 'sly)
    :after lisp-mode
    :custom
    (inferior-lisp-program "sbcl"))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-sly"

#+end_src

***** Common lisp package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-commonlisp.el

  (provide 'pg-programming-commonlisp)

#+end_src

**** Css/LessCSS/SASS/SCSS

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-css.el

  ;;; pg-programming-css.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | lsp-css

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-css.el

  (use-package lsp-css
    :straight nil
    :init
    (require 'lsp-css)
    :after lsp-mode
    :hook
    ((css-mode
      less-css-mode
      scss-mode) . lsp-deferred))

#+end_src

***** Css package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-css.el

  (provide 'pg-programming-css)

#+end_src

**** Docker

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-docker.el

  ;;; pg-programming-docker.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | docker

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-docker.el

  (use-package docker
    :straight t
    :init
    (require 'docker))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-docker"

#+end_src

***** Package | dockerfile-mode
     
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-docker.el

  (use-package dockerfile-mode
    :straight t
    :init
    (require 'dockerfile-mode)
    :after docker)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-dockerfile-mode"

#+end_src

***** Docker package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-docker.el

  (provide 'pg-programming-docker)

#+end_src

**** Git

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-git.el

  ;;; pg-programming-git.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | git-modes

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-git.el

  (use-package git-modes
    :straight t
    :init
    (require 'git-modes))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-git-modes"

#+end_src

***** Git package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-git.el

  (provide 'pg-programming-git)

#+end_src

**** Groovy

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-groovy.el

  ;;; pg-programming-groovy.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | groovy-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-groovy.el

  (use-package groovy-mode
    :straight '(groovy-emacs-modes :type git
                                   :host github
                                   :repo "Groovy-Emacs-Modes/groovy-emacs-modes")
    :init
    (require 'groovy-mode))

#+end_src

***** Groovy package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-groovy.el

  (provide 'pg-programming-groovy)

#+end_src

**** Haskell

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-haskell.el

  ;;; pg-programming-haskell.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | haskell-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-haskell.el

  (use-package haskell-mode
    :straight t
    :init
    (require 'haskell-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.config/guix/manifests/haskell.scm

  (specifications->manifest
   '("ghc@8"))

#+end_src

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-haskell-mode"

#+end_src

***** Package | lsp-haskell

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-haskell.el

  (use-package lsp-haskell
    :disabled
    :straight t
    :init
    (require 'lsp-haskell)
    :after lsp-mode
    :hook
    ((haskell-mode
      haskell-literate-mode) . lsp-deferred))

#+end_src

***** Haskell package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-haskell.el

  (provide 'pg-programming-haskell)

#+end_src

**** Java

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-java.el

  ;;; pg-programming-java.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | lsp-java

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-java.el

  (defun pg/spring-boot-properties ()
    "Makes appropriate calls when opening a spring properties file."
    (when (not (equal nil (string-match-p "application\\(-?[^-]+\\)?\\.properties"
                                          (file-name-nondirectory (buffer-file-name)))))
      (progn (run-hooks 'prog-mode-hook)
             (lsp-deferred))))

  (use-package lsp-java
    :straight t
    :init
    (require 'lsp-java)
    (dolist (feature '(dap-java
                       lsp-java-boot))
      (require feature))
    :hook
    (java-mode . (lsp-deferred lsp-java-boot-lens-mode))
    (find-file . pg/spring-boot-properties)
    :custom
    (lsp-java-configuration-runtimes '[( :name "JavaSE-17"
                                         :path (expand-file-name "~/.guix-extra-profiles/java/java")
                                         :default t)])
    (lsp-java-vmargs (list "-noverify" "--enable-preview"))
    (lsp-java-java-path "java")
    (lsp-java-import-gradle-java-home (expand-file-name "~/.guix-extra-profiles/java/java"))
    :bind
    (:map lsp-mode-map
          ("C-<return>" . lsp-execute-code-action)))

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.config/guix/manifests/java.scm

  (specifications->manifest
   '("openjdk@17:jdk"
     "openjdk@17:doc"
     "maven"))

#+end_src

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-lsp-java"

#+end_src

***** Java package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-java.el

  (provide 'pg-programming-java)

#+end_src

**** LaTeX

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-tex.el

  ;;; pg-programming-tex.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | tex

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-tex.el

  (use-package tex
    :straight auctex
    :init
    (require 'tex)
    :mode ("\\.tex$" . latex-mode)
    :hook
    (TeX-mode-hook . (lambda ()
                       (run-hooks 'prog-mode-hook)))
    :custom
    (latex-run-command "pdflatex")
    (TeX-view-program-selection '((output-pdf "PDF Tools")))
    (TeX-source-correlate-start-server t)
    :config
    (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
    (put 'tex-mode 'derived-mode-parent 'prog-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.config/guix/manifests/latex.scm

  (specifications->manifest
   '("rubber"
     "texlive"))

#+end_src

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-auctex"

#+end_src

***** Package | company-auctex

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-tex.el

  (use-package company-auctex
    :straight t
    :init
    (require 'company-auctex)
    :after (company auctex)
    :config
    (add-to-list 'company-backends '(company-auctex :with company-yasnippet)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-company-auctex"

#+end_src

***** LaTeX package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-tex.el

  (provide 'pg-programming-tex)

#+end_src

**** LMC

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-lmc.el

  ;;; pg-programming-lmc.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | lmc-java

Custom syntax highlighting for LMC assembly language.
      
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-lmc.el

  (defvar lmc-java-mode-hook nil)

  ;; (add-to-list 'auto-mode-alist '("\\.lmc\\'" . lmc-java-mode))

  (defconst lmc-java-font-lock-defaults
    (list
     '("#.*" . font-lock-comment-face)
     '("\\<\\(ADD\\|BR[PZ]?\\|DAT\\|HLT\\|IN\\|LDA\\|OUT\\|S\\(?:TO\\|UB\\)\\)\\>" . font-lock-keyword-face)
     '("^\\w+" . font-lock-function-name-face)
     '("\\b[0-9]+\\b" . font-lock-constant-face))
    "Minimal highlighting expressions for lmc mode")

  (defvar lmc-java-mode-syntax-table
    (let ((st (make-syntax-table)))
      (modify-syntax-entry ?# ". 1b" st)
      (modify-syntax-entry ?\n "> b" st)
      st)
    "Syntax table for lmc-mode")

  (define-derived-mode lmc-java-mode prog-mode "LMC"
    "Major mode for editing lmc files"
    :syntax-table lmc-mode-syntax-table

    (set (make-local-variable 'font-lock-defaults) '(lmc-font-lock-defaults))

    (setq-local comment-start "# "
                comment-end ""
                indent-tabs-mode nil))

#+end_src

***** Package | lmc

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-lmc.el

  (define-derived-mode pg/lmc-asm-mode prog-mode "LMC-Asm"
    "Major mode to edit LMC assembly code."
    :syntax-table emacs-lisp-mode-syntax-table
    (set (make-local-variable 'font-lock-defaults)
         '(lmc-asm-font-lock-keywords))
    (set (make-local-variable 'indent-line-function)
         #'lmc-asm-indent-line)
    (set (make-local-variable 'indent-tabs-mode) nil)
    (set (make-local-variable 'imenu-generic-expression)
         lmc-asm-imenu-generic-expression)
    (set (make-local-variable 'outline-regexp) lmc-asm-outline-regexp)
    (add-hook 'completion-at-point-functions #'lmc-asm-completion nil t)
    (set (make-local-variable 'comment-start) "#")
    (set (make-local-variable 'comment-start-skip)
         "\\(\\(^\\|[^\\\\\n]\\)\\(\\\\\\\\\\)*\\)#+ *"))

  (use-package lmc
    :straight t
    :init
    (require 'lmc)
    :init
    (fset #'lmc-asm-mode #'pg/lmc-asm-mode))

#+end_src

***** Lmc package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-lmc.el

  (provide 'pg-programming-lmc)

#+end_src

**** Markdown

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-markdown.el

  ;;; pg-programming-markdown.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | markdown-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-markdown.el

  (use-package markdown-mode
    :straight t
    :init
    (require 'markdown-mode)
    :hook
    (gfm-view-mode . (lambda ()
                       (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                                          (markdown-code-face (:height 1.5) fixed-pitch))))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-markdown-mode"

#+end_src

***** Markdown package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-markdown.el

  (provide 'pg-programming-markdown)

#+end_src

**** MIPS

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-mips.el

  ;;; pg-programming-mips.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | mips-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-mips.el

  (use-package mips-mode
    :straight t
    :init
    (require 'mips-mode)
    :mode "\\.asm$"
    :custom
    (mips-tab-width 4))

#+end_src

***** Mips package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-mips.el

  (provide 'pg-programming-mips)

#+end_src

**** Python

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-python.el

  ;;; pg-programming-python.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | lsp-python-ms

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-python.el

  (use-package lsp-python-ms
    :straight t
    :init
    (require 'lsp-python-ms)
    :after (python lsp-mode)
    :hook
    (python-mode . lsp-deferred)
    :custom
    (lsp-python-ms-auto-install-server t))

#+end_src

***** Package | dap-python

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-python.el

  (use-package dap-python
    :straight nil
    :init
    (require 'dap-python)
    :after (python lsp-mode)
    :custom
    (dap-python-debugger 'debugpy))

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.config/guix/manifests/python.scm

    (specifications->manifest
     '("python"))

#+end_src

***** TODO Package | jupyter

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-python.el

  (use-package jupyter
    :disabled
    :straight t
    :init
    (require 'jupyter))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-jupyter"

#+end_src

***** Python package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-python.el

  (provide 'pg-programming-python)

#+end_src

**** SMTLibv2

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-smtlibv2.el

  ;;; pg-programming-smtlibv2.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** HOLD Package | z3-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-smtlibv2.el

  (use-package z3-mode
    :disabled
    :straight t
    :init
    (require 'z3-mode))

#+end_src

***** SMTLibv2 package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-smtlibv2.el

  (provide 'pg-programming-smtlibv2)

#+end_src

**** SQL

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-sql.el

  ;;; pg-programming-sql.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | sql

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-sql.el

  (use-package sql
    :straight nil
    :init
    (require 'sql)
    :hook
    (sql-interactive-mode . (lambda ()
                              (toggle-truncate-lines t)))
    :custom
    (sql-connection-alist '((main (sql-product 'postgres)
                                  (sql-port 5432)
                                  (sql-server "localhost")
                                  (sql-user "phil-gab99")
                                  (sql-password (pg/lookup-password :host "localhost" :user "phil-gab99" :port 5432))
                                  (sql-database "phil-gab99"))
                            (school (sql-product 'postgres)
                                    (sql-port 5432)
                                    (sql-server "localhost")
                                    (sql-user "phil-gab99")
                                    (sql-password (pg/lookup-password :host "localhost" :user "phil-gab99" :port 5432))
                                    (sql-database "ift2935")))))

#+end_src


*Guix Packages*

#+begin_src scheme :tangle ~/.config/guix/manifests/sql.scm

  (specifications->manifest
   '("postgresql@14.2"
     "sqls"))

#+end_src

***** Package | lsp-sql

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-sql.el

  (use-package lsp-sqls
    :straight nil
    :after (sql lsp-mode)
    :hook
    (sql-mode . lsp-deferred)
    :custom
    (lsp-sqls-connections
     `(,(cl-pairlis '(driver dataSourceName)
                    `(("postgresql") ,(concat "host=127.0.0.1 port=5432 user=phil-gab99 password="
                                              (pg/lookup-password :host "localhost" :user "phil-gab99" :port 5432)
                                              " dbname=phil-gab99 sslmode=disable")))
       ,(cl-pairlis '(driver dataSourceName)
                    `(("postgresql") ,(concat "host=127.0.0.1 port=5432 user=phil-gab99 password="
                                              (pg/lookup-password :host "localhost" :user "phil-gab99" :port 5432)
                                              " dbname=ift2935 sslmode=disable"))))))

#+end_src

***** Package | sql-indent

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-sql.el

  (use-package sql-indent
    :straight t
    :init
    (require 'sql-indent)
    :after sql
    :hook
    (sql-mode . sqlind-minor-mode)
    :config
    (setq-default sqlind-basic-offset 4))

#+end_src

***** SQL package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-sql.el

  (provide 'pg-programming-sql)

#+end_src

**** TypeScript

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-typescript.el

  ;;; pg-programming-typescript.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | typescript-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-typescript.el

  (use-package typescript-mode
    :straight t
    :init
    (require 'typescript-mode)
    :mode "\\.ts$")

#+end_src



*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-typescript-mode"

#+end_src

***** Package | dap-node

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-typescript.el

  (use-package dap-node
    :straight nil
    :after (typescript-mode lsp-mode)
    :hook
    (typescript-mode . lsp-deferred)
    :config
    (dap-node-setup))

#+end_src

***** Typescript package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-typescript.el

  (provide 'pg-programming-typescript)

#+end_src

**** VHDL

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-vhdl.el

  ;;; pg-programming-vhdl.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** TODO Package | vhdl-tools

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-vhdl.el

  (flycheck-define-checker vhdl-tool
    "A VHDL syntax checker, type checker and linter using VHDL-Tool."
    :command ("vhdl-tool" "client" "lint" "--compact" "--stdin" "-f" source)
    :standard-input t
    :modes (vhdl-mode)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ":w:" (message) line-end)
     (error line-start (file-name) ":" line ":" column ":e:" (message) line-end)))

  (use-package vhdl-tools
    :disabled
    :straight t
    :init
    (require 'vhdl-tools)
    :after flycheck
    :hook
    (vhdl-mode . lsp-deferred)
    :config
    (add-to-list 'flycheck-checkers 'vhdl-tool)
    :custom
    (lsp-vhdl-server-path "~/.emacs.d/lsp-servers/vhdl-tool"))

#+end_src

***** VHDL package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-vhdl.el

  (provide 'pg-programming-vhdl)

#+end_src

**** YAML

***** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-yaml.el

  ;;; pg-programming-yaml.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

***** Package | yaml-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-yaml.el

  (use-package yaml-mode
    :straight t
    :init
    (require 'yaml-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-yaml-mode"

#+end_src

***** YAML package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-programming-yaml.el

  (provide 'pg-programming-yaml)

#+end_src

** Notification

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-notification.el

  ;;; pg-notification.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | alert

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-notification.el

  (use-package alert
    :straight t
    :init
    (require 'alert)
    :custom
    (alert-default-style 'notifications))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-alert"

#+end_src

*** Notification package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-notification.el

  (provide 'pg-notification)

#+end_src

** Org Mode

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-org.el

  ;;; pg-org.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | org

Org mode package for writing structured documents and more. Here are some useful things to know about org files.
- ~#+title: Title~ - Sets the title of a document.
- ~M-left~ / ~M-right~ - Promotes/Demotes position of headers and bullet points.
- ~M-up~ / ~M-down~ - Moves the line above or below its current position, respecting the rank.
- ~S-right~ / ~S-left~ - Cycles through different states of headers and bullet points.
- ~M-RET~ - Adds another entry below the current header/bullet point of the same rank. 
- ~C-RET~ - Adds another entry after the current section occupied by the current header of the same rank.
  
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-org.el

  (defun org-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the `img'
      directory with respect to the org-buffer's location and insert a link to
      this file."
    (interactive)
    (setq imgpath (concat (let ((abspath (shell-command-to-string (concat "dirname " buffer-file-name))))
                            (with-temp-buffer
                              (call-process "echo" nil t nil "-n" abspath)
                              (delete-char -1)  ;; delete trailing \n
                              (buffer-string)))
                          "/img/"))
    (if (not (f-dir-p imgpath))
        (make-directory imgpath))
    (setq filename
          (concat
           (make-temp-name
            (concat imgpath
                    (let ((bname (shell-command-to-string (concat "basename -s .org " buffer-file-name))))
                      (with-temp-buffer
                        (call-process "echo" nil t nil "-n" bname)
                        (delete-char -1)  ;; delete trailing \n
                        (buffer-string)))
                    "_"
                    (format-time-string "%Y%m%d_%H%M%S_"))) ".png"))
    (call-process "import" nil nil nil filename)
    (insert (concat "[[" filename "]]"))
    (org-display-inline-images))

  (defun org-csv-to-table (beg end)
    "Insert a file into the current buffer at point, and convert it to an org
      table."
    (interactive (list (mark) (point)))
    (org-table-convert-region beg end ","))

  (defun pg/org-mode-setup ()
    "Define some behaviours for the major org-mode."
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (diminish 'org-indent-mode)
    (setq evil-auto-indent nil))

  (use-package org
    :straight t
    :init
    (require 'org)
    :hook
    (org-mode . pg/org-mode-setup)
    :custom
    (org-ellipsis " ▾")
    (org-hide-emphasis-markers t)
    (org-agenda-start-with-log-mode t)
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-deadline-warning-days 7)
    (org-todo-keywords '((sequence "TODO(t)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k)")))
    (org-plantuml-jar-path "~/bin/plantuml.jar")
    (org-agenda-exporter-settings '((ps-left-header (list 'org-agenda-write-buffer-name))
                                    (ps-right-header (list "/pagenumberstring load" (lambda nil
                                                                                      (format-time-string "%d/%m/%Y"))))
                                    (ps-font-size '(12 . 11))
                                    (ps-top-margin 55)
                                    (ps-left-margin 35)
                                    (ps-right-margin 30)))
    :config
    (set-face-attribute 'org-ellipsis nil :underline nil)
    (unless pg/is-termux
      (customize-set-variable 'org-agenda-files '("~/Documents/Org/Agenda/"))
      (customize-set-variable 'org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                                                      (vm-imap . vm-visit-imap-folder-other-frame)
                                                      (gnus . org-gnus-no-new-news)
                                                      (file . find-file)
                                                      (wl . wl-other-frame)))
      (customize-set-variable 'org-agenda-custom-commands
                              '(("d" "Dashboard"
                                 ((agenda ""
                                          ((org-deadline-warning-days 7)))
                                  (todo "TODO"
                                        ((org-agenda-overriding-header "Tasks")))
                                  (tags-todo "agenda/ACTIVE"
                                             ((org-agenda-overriding-header "Active Tasks")))))
                                ("Z" "TODOs"
                                 ((todo "TODO"
                                        ((org-agenda-overriding-header "Todos")))))

                                ("m" "Misc" tags-todo "other")

                                ("s" "Schedule" agenda ""
                                 ((org-agenda-files
                                   '("~/Documents/Org/Agenda/Schedule-S5-summer.org")))
                                 ("~/Documents/Schedule-S5-summer.pdf"))

                                ("w" "Work Status"
                                 ((todo "WAIT"
                                        ((org-agenda-overriding-header "Waiting")
                                         (org-agenda-files org-agenda-files)))
                                  (todo "REVIEW"
                                        ((org-agenda-overriding-header "In Review")
                                         (org-agenda-files org-agenda-files)))
                                  (todo "HOLD"
                                        ((org-agenda-overriding-header "On Hold")
                                         (org-agenda-todo-list-sublevels nil)
                                         (org-agenda-files org-agenda-files)))
                                  (todo "ACTIVE"
                                        ((org-agenda-overriding-header "Active")
                                         (org-agenda-files org-agenda-files)))
                                  (todo "COMPLETED"
                                        ((org-agenda-overriding-header "Completed")
                                         (org-agenda-files org-agenda-files)))
                                  (todo "CANC"
                                        ((org-agenda-overriding-header "Cancelled")
                                         (org-agenda-files org-agenda-files)))))))
      (customize-set-variable 'org-capture-templates
                              `(("t" "Tasks / Projects")


                                ("tt" "Task" entry
                                 (file+olp "~/Documents/Org/Agenda/Tasks.org" "Active")
                                 "* TODO %?\n  DEADLINE: %U\n  %a\n  %i" :empty-lines 1)

                                ("j" "Meetings")
                                ("jm" "Meeting" entry
                                 (file+olp "~/Documents/Org/Agenda/Tasks.org" "Waiting")
                                 "* TODO %? \n SCHEDULED: %U\n" :empty-lines 1)

                                ("m" "Email Workflow")
                                ("mr" "Follow Up" entry
                                 (file+olp "~/Documents/Org/Agenda/Mail.org" "Follow up")
                                 "* TODO %a\nDEADLINE: %U%?\n %i" :empty-lines 1)))
      (customize-set-variable 'org-format-latex-options
                              (plist-put org-format-latex-options :scale 1.5))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-org"

#+end_src

*** Package | org-appear

Toggles visibility of emphasis markers.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-org.el

  (use-package org-appear
    :straight t
    :init
    (require 'org-appear)
    :after org
    :hook
    (org-mode . org-appear-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-org-appear"

#+end_src

*** Package | org-bullets

Customizes the heading bullets.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-org.el

  (use-package org-bullets
    :straight t
    :init
    (require 'org-bullets)
    :after org
    :hook
    (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-org-bullets"

#+end_src

*** Package | org-tree-slide

Allows for creation of slideshow presentations in emacs with org mode. The ~org-beamer-export-to-pdf~ command can be used to export the presentation as a pdf file - it requires ~pdflatex~. More detail [[https://orgmode.org/worg/exporters/beamer/tutorial.html][here]].

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-org.el

  (defun pg/presentation-setup ()
    "Setup before starting org presentation."
    (org-display-inline-images)
    (variable-pitch-mode 1)
    (setq-local doom-modeline-minor-modes t
                org-format-latex-options (plist-put org-format-latex-options :scale 2.5)
                face-remapping-alist '((default (:height 1.25) default)
                                       (header-line (:height 4.5) variable-pitch)
                                       (variable-pitch (:height 1.25) variable-pitch)
                                       (org-table (:height 1.5) org-table)
                                       (org-verbatim (:height 1.5) org-verbatim)
                                       (org-code (:height 1.5) org-code)
                                       (org-block (:height 1.5) org-block))))

  (defun pg/presentation-end ()
    "Cleanup after ending org presentation."
    (variable-pitch-mode 0)
    (org-latex-preview)
    (setq-local doom-modeline-minor-modes nil
                org-format-latex-options (plist-put org-format-latex-options :scale 1.5)
                face-remapping-alist '((default variable-pitch default))))

  (use-package org-tree-slide
    :straight t
    :init
    (require 'org-tree-slide)
    :after org
    :hook
    ((org-tree-slide-before-move-next
      org-tree-slide-before-move-previous) . org-latex-preview)
    (org-tree-slide-play . pg/presentation-setup)
    (org-tree-slide-stop . pg/presentation-end)
    :custom
    (org-tree-slide-activate-message "Presentation started")
    (org-tree-slide-deactivate-message "Presentation ended")
    (org-tree-slide-breadcrumbs " > ")
    (org-tree-slide-header t)
    (org-image-actual-width nil))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-org-tree-slide"

#+end_src

*** Package | ox-reveal

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-org.el

  (use-package ox-reveal
    :straight t
    :init
    (require 'ox-reveal)
    :after org
    :custom
    (org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
    (org-reveal-hlevel 1)
    (org-export-headline-levels 6)
    (org-reveal-theme "league"))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-ox-reveal"

#+end_src

*** Package | org-notify

Handles notifications of scheduled tasks.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-org.el

  (use-package org-notify
    :straight t
    :init
    (require 'org-notify)
    :after org
    :config
    (org-notify-start)
    (setq org-notify-map nil)
    (org-notify-add 'default '(:time "1w" :actions notify/window :period "1h" :duration 5))
    (org-notify-add 'meeting '(:time "1w" :actions email :period "1d")))

  ;; (org-notify-add 'appt
  ;;                 '(:time "-1s" :period "20s" :duration 10 :actions (-message -ding))
  ;;                 '(:time "15m" :period "2m" :duration 100 :actions -notify)
  ;;                 '(:time "2h" :period "5m" :actions -message)
  ;;                 '(:time "3d" :actions -email))

#+end_src

*** Package | org-msg

Allows for markup language when composing email

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-org.el

  (use-package org-msg
    :straight t
    :init
    (require 'org-msg)
    :after (org mu4e)
    :custom
    (org-msg-options "html-postamble:nil toc:nil author:nil num:nil \\n:t")
    (org-msg-startup "indent inlineimages hidestars")
    (org-msg-greeting-fmt "\nBonjour/Hi %s,\n\n")
    (org-msg-greeting-name-limit 3)
    (org-message-convert-citation t)
    (org-msg-signature (concat "\n\nCordialement/Regards,\n\n*--*\n" mu4e-compose-signature))
    (org-msg-default-alternatives '((new html)
                                    (reply-to-text html)
                                    (reply-to-html html)))
    (org-msg-recipient-names nil)
    :config
    (org-msg-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-org-msg"

#+end_src

*** Package | org-roam

Helps with note-taking strategies.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-org.el

  (use-package org-roam
    :straight t
    :init
    (require 'org-roam)
    :after org
    :custom
    (org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-directory "~/Documents/Notes")
    (org-roam-capture-templates '(("d" "default" plain
                                   "%?"
                                   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                                      "#+title: ${title}\n#+STARTUP: latexpreview inlineimages\n#+date: %U\n")
                                   :unnarrowed t)
                                  ("e" "economy" plain
                                   "%?"
                                   :if-new (file+head "ECN-1000/notes/%<%Y%m%d%H%M%S>-${slug}.org"
                                                      "#+title: ecn1000-${title}\n#+STARTUP: latexpreview inlineimages\n#+date: %U\n")
                                   :unnarrowed t)))
    :config
    (org-roam-setup))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-org-roam"

#+end_src

*** Package | org-fragtog

Allows display of latex fragments in org files.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-org.el

  (use-package org-fragtog
    :straight t
    :init
    (require 'org-fragtog)
    :after org
    :hook
    (org-mode . org-fragtog-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-org-fragtog"

#+end_src

*** UI customization

Various improvements to the UI look in org files.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-org.el

  (font-lock-add-keywords 'org-mode ; Replace '-' with bullets
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region
                                           (match-beginning 1) (match-end 1) "•"))))))

  (require 'org-indent) ; Changes some org structures to fixed pitch
  (set-face-attribute 'org-block nil :foreground nil :background "gray5" :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :foreground "orange" :inherit 'fixed-pitch)
  (set-face-attribute 'org-verbatim nil :foreground "green" :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :foreground "thistle3" :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  (dolist (face '((org-level-1 . 1.2) ; Sets font for variable-pitch text
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'regular :height (cdr face)))

#+end_src

*** Code blocks

Customizes behaviour of code blocks. Some useful constructs to know:
- ~#+PROPERTY: header-args: emacs-lisp~ - Sets a property to code blocks to have their header args be defined as indicated.
- ~#+NAME: code-block-name~ - Gives a name to a code block.
- ~:noweb yes/no~ - Used for source blocks to allow them to use values outputted by other source blocks.
- ~:mkdir p yes/no~ - Allows code blocks to create directories.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-org.el

  (with-eval-after-load 'org ; Defer the body code until org is loaded
    (org-babel-do-load-languages ; Loads languages to be executed by org-babel
     'org-babel-load-languages '((emacs-lisp . t)
                                 (java . t)
                                 (shell . t)
                                 (plantuml . t)
                                 ;; (jupyter . t)
                                 (python . t)))

    (setq org-confirm-babel-evaluate nil)

    (require 'org-tempo) ; Allows defined snippets to expand into appropriate code blocks
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("java" . "src java"))
    (add-to-list 'org-structure-template-alist '("als" . "src alloy"))
    (add-to-list 'org-structure-template-alist '("puml" . "src plantuml"))
    (add-to-list 'org-structure-template-alist '("vhd" . "src vhdl"))
    (add-to-list 'org-structure-template-alist '("asm" . "src mips"))
    (add-to-list 'org-structure-template-alist '("cc" . "src c"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("sql" . "src sql"))

    (add-to-list 'org-src-lang-modes '("als" . alloy))
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml)))

#+end_src

*** Auto-tangling configuration files

Allows automatic tangling on save of these configuration files.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-org.el

  (defun pg/org-babel-tangle-config ()
    "Automatic tangle of emacs config file."
    (when (eq major-mode #'org-mode)
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook #'(lambda ()
                               (add-hook 'after-save-hook #'pg/org-babel-tangle-config)))

#+end_src
 
*** Pomodoro timer

Custom pomodoro timer

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-org.el

  (defun pg/timer-setup ()
    "Sets up some parameters for the timer"
    (setq org-clock-sound "~/Misc/ding.wav"))

  (defun pg/start-timer ()
    "Begins Pomodoro timer with study timer"
    (interactive)
    (pg/timer-setup)
    (pg/study-timer))

  (defun pg/start-with-break-timer ()
    "Begin Pomodoro timer with break timer"
    (interactive)
    (pg/timer-setup)
    (pg/break-timer))

  (defun pg/stop-timer ()
    "Stops the timer"
    (interactive)
    (setq org-clock-sound nil)
    (remove-hook 'org-timer-done-hook #'pg/study-timer)
    (remove-hook 'org-timer-done-hook #'pg/break-timer)
    (org-timer-stop))

  (defun pg/study-timer ()
    "Study timer for 1 hour"
    (add-hook 'org-timer-done-hook #'pg/break-timer)
    (remove-hook 'org-timer-done-hook #'pg/study-timer)
    (setq org-timer-default-timer "1:00:00")
    (setq current-prefix-arg '(4)) ; Universal argument
    (call-interactively #'org-timer-set-timer))

  (defun pg/break-timer ()
    "Break timer for 30 minutes"
    (add-hook 'org-timer-done-hook #'pg/study-timer)
    (remove-hook 'org-timer-done-hook #'pg/break-timer)
    (setq org-timer-default-timer "30:00")
    (setq current-prefix-arg '(4)) ; Universal argument
    (call-interactively #'org-timer-set-timer))

#+end_src

*** Org package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-org.el

  (provide 'pg-org)

#+end_src

** Viewers

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-viewers.el

  ;;; pg-viewers.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | doc-view

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-viewers.el

  (use-package doc-view
    :straight nil
    :init
    (require 'doc-view)
    :mode "\\.djvu$")

#+end_src

*** Package | pdf-tools

Allows for viewing of pdfs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-viewers.el

  (use-package pdf-tools
    :straight t
    :init
    (require 'pdf-tools)
    :mode "\\.pdf$")

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-pdf-tools"

#+end_src

*** Package | djvu

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-viewers.el

  (use-package djvu
    :straight t
    :init
    (require 'djvu))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-djvu"

#+end_src

*** Viewers package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-viewers.el

  (provide 'pg-viewers)

#+end_src

** Bible

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-bible.el

  ;;; pg-bible.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | dtk

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-bible.el

  (use-package dtk
    :disabled
    :straight t
    :init
    (require 'dtk)
    :after evil
    :hook
    (dtk-mode . (lambda ()
                  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)))))
    :custom
    (dtk-module "KJV")
    (dtk-module-category "Biblical Texts")
    (dtk-word-wrap t)
    :config
    (evil-define-key 'normal 'dtk-mode-map
      (kbd "C-j") 'dtk-forward-verse
      (kbd "C-k") 'dtk-backward-verse
      (kbd "C-f") 'dtk-forward-chapter
      (kbd "C-b") 'dtk-backward-chapter
      "q" 'dtk-quit
      "c" 'dtk-clear-dtk-buffer
      "s" 'dtk-search))

#+end_src

*** Bible package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-bible.el

  (provide 'pg-bible)

#+end_src

** Finances

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-finance.el

  ;;; pg-finance.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | ledger-mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-finance.el

  (use-package ledger-mode
    :straight t
    :init
    (require 'ledger-mode)
    :mode "\\.dat$"
    :hook
    (ledger-mode . company-mode)
    :custom
    (ledger-reconcile-default-commodity "CAD")
    (ledger-binary-path (expand-file-name "~/.guix-extra-profiles/emacs/emacs/bin/ledger"))
    (ledger-clear-whole-transaction t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "ledger"
  ;; "emacs-ledger-mode"

#+end_src

*** Finances package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-finance.el

  (provide 'pg-finance)

#+end_src

** Social

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-social.el

  ;;; pg-social.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | slack

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-social.el

  (use-package slack
    :straight t
    :init
    (require 'emojify)
    :after evil
    :commands slack-start
    :custom
    (slack-prefer-current-team t)
    (slack-buffer-emojify t)
    :config
    (slack-register-team :name "ift6755"
                         :default t
                         :token (pg/lookup-password :host "ift6755.slack.com" :user "philippe.gabriel.1@umontreal.ca")
                         :cookie (pg/lookup-password :host "ift6755.slack.com" :user "philippe.gabriel.1@umontreal.ca^cookie")
                         :subscribed-channels '((general questions random))
                         :modeline-enabled t)

    (evil-define-key 'normal slack-info-mode-map
      ",u" 'slack-room-update-messages)
    (evil-define-key 'normal slack-mode-map
      ",ra" 'slack-message-add-reaction
      ",rr" 'slack-message-remove-reaction
      ",rs" 'slack-message-show-reaction-users
      ",mm" 'slack-message-write-another-buffer
      ",me" 'slack-message-edit
      ",md" 'slack-message-delete))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-slack" ;; Older commit

#+end_src

*** Package | sx

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-social.el

  (use-package sx
    :straight t
    :init
    (require 'sx)
    :commands sx-search)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-sx"

#+end_src

*** Package | telega

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-social.el

  (use-package telega
    :straight nil
    :init
    (require 'telega)
    (require 'telega-alert)
    (require 'telega-dashboard)
    :after org
    :custom
    (telega-alert-mode 1)
    :config
    (telega 1))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-telega"
  "emacs-telega-contrib"

#+end_src

*** Social package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-social.el

  (provide 'pg-social)

#+end_src

** Weather

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-weather.el

  ;;; pg-weather.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | wttrin

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-weather.el

  (defun pg/wttrin-fetch-raw-string (query)
    "Get the weather information based on your QUERY."
    (let ((url-user-agent "curl"))
      (add-to-list 'url-request-extra-headers wttrin-default-accept-language)
      (with-current-buffer
          (url-retrieve-synchronously
           (concat "http://wttr.in/" query)
           (lambda (status) (switch-to-buffer (current-buffer))))
        (decode-coding-string (buffer-string) 'utf-8))))

  (use-package wttrin
    :straight t
    :init
    (require 'wttrin)
    :init
    (fset #'wttrin-fetch-raw-string #'pg/wttrin-fetch-raw-string)
    :commands wttrin
    :custom
    (wttrin-default-cities '("montreal"))
    (wttrin-default-accept-language '("Accept-Language" . "en-US")))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-wttrin"

#+end_src

*** Weather package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-weather.el

  (provide 'pg-weather)

#+end_src

** Music

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-music.el

  ;;; pg-music.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | emms

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-music.el

  (defun pg/start-mpd ()
    "Start MPD, connects to it and syncs the metadata cache."
    (interactive)
    (shell-command "herd start mpd")
    (pg/update-mpd-db)
    (emms-player-mpd-connect)
    (emms-cache-set-from-mpd-all)
    (emms-smart-browse)
    (message "MPD Started!"))

  (defun pg/kill-mpd ()
    "Stops playback and kill the music daemon."
    (interactive)
    (emms-stop)
    (emms-smart-browse)
    (emms-player-mpd-disconnect)
    (shell-command "herd stop mpd")
    (message "MPD Killed!"))

  (defun pg/update-mpd-db ()
    "Updates the MPD database synchronously."
    (interactive)
    (pg/call-mpc nil "update")
    (message "MPD Database Updated!"))

  (defun pg/convert-number-to-relative-string (number)
    "Convert an integer NUMBER to a prefixed string.

        The prefix is either - or +. This is useful for mpc commands
        like volume and seek."
    (let ((number-string (number-to-string number)))
      (if (> number 0)
          (concat "+" number-string)
        number-string)))

  (defun pg/call-mpc (destination mpc-args)
    "Call mpc with `call-process'.

        DESTINATION will be passed to `call-process' and MPC-ARGS will be
        passed to the mpc program."
    (if (not (listp mpc-args))
        (setq mpc-args (list mpc-args)))
    (apply 'call-process "mpc" nil destination nil mpc-args))

  (defun pg/message-current-volume ()
    "Return the current volume."
    (message "%s"
             (with-temp-buffer
               (pg/call-mpc t "volume")
               (delete-char -1)  ;; delete trailing \n
               (buffer-string))))

  (defun pg/emms-volume-amixer-change (amount)
    "Change amixer master volume by AMOUNT."
    (let ((volume-change-string (pg/convert-number-to-relative-string amount)))
      (pg/call-mpc nil (list "volume" volume-change-string)))
    (pg/message-current-volume))

  (use-package emms
    :straight t
    :init
    (require 'emms)
    (require 'emms-setup)
    (require 'emms-player-mpd)
    (fset #'emms-volume-amixer-change #'pg/emms-volume-amixer-change)
    :hook
    (emms-playlist-cleared . emms-player-mpd-clear)
    :custom
    (emms-info-functions '(emms-info-mpd))
    (emms-player-list '(emms-player-mpd))
    :bind
    (:map emms-browser-mode-map
          ("<XF86AudioPrev>" . emms-previous)
          ("<XF86AudioNext>" . emms-next)
          ("<XF86AudioPlay>" . emms-pause)
          ("<XF86AudioStop>" . emms-stop))
    :config
    (emms-all))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-emms"

#+end_src

*** Package | emms-mode-line-cycle

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-music.el

  (use-package emms-mode-line-cycle
    :straight t
    :init
    (require 'emms-mode-line-cycle)
    (require 'emms-mode-line-icon)
    :after emms
    :custom
    (emms-mode-line-cycle-use-icon-p t)
    :config
    (emms-mode-line 1)
    (emms-playing-time 1)
    (emms-mode-line-cycle 1))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-emms-mode-line-cycle"

#+end_src

*** Music package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-music.el

  (provide 'pg-music)

#+end_src

** Games

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-games.el

  ;;; pg-games.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | sudoku

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-games.el

  (use-package sudoku
    :straight t
    :init
    (require 'sudoku)
    :commands sudoku
    :custom
    (sudoku-style 'unicode)
    (sudoku-level 'hard))

#+end_src

*** Package | sokoban

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-games.el

  (use-package sokoban
    :straight t
    :init
    (require 'sokoban)
    :after evil
    :commands (sokoban sokoban-goto-level)
    :config
    (evil-define-key 'normal sokoban-mode-map
      "h" 'sokoban-move-left
      "l" 'sokoban-move-right
      "j" 'sokoban-move-down
      "k" 'sokoban-move-up))

#+end_src

*** Games package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-games.el

  (provide 'pg-games)

#+end_src

** Keybindings

*** Package header

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-bindings.el

  ;;; pg-bindings.el -*- lexical-binding: t; -*-
  ;; Author: Philippe Gabriel

#+end_src

*** Package | hydra

Allows the creation of keymaps for related commands and the ability to repeat terminal commands. Works in conjunction with the ~general~ package.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-bindings.el

  (use-package hydra
    :straight t
    :init
    (require 'hydra))

  (defhydra hydra-text-scale (:timeout 5)
    "Scale text."
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out"))

  (defhydra hydra-window-scale (:timeout 5)
    "Scale window."
    ("<" evil-window-decrease-width "width dec")
    (">" evil-window-increase-width "width inc")
    ("-" evil-window-decrease-height "height dec")
    ("+" evil-window-increase-height "height inc")
    ("=" balance-windows "balance"))

  (defhydra hydra-x-window-scale (:timeout 5)
    "Scale x window."
    ("<" (exwm-layout-shrink-window-horizontally 50) "width dec")
    (">" (exwm-layout-enlarge-window-horizontally 50) "width inc")
    ("-" (exwm-layout-shrink-window 50) "height dec")
    ("+" (exwm-layout-enlarge-window 50) "height inc")
    ("w" exwm-floating-toggle-floating "float toggle")
    ("f" exwm-layout-set-fullscreen "fullscreen"))

  (defhydra hydra-window-move (:timeout 5)
    "Move window."
    ("h" windmove-left "left")
    ("l" windmove-right "right")
    ("j" windmove-down "down")
    ("k" windmove-up "up"))

  (defhydra hydra-window-swap (:timeout 5)
    "Swap window."
    ("h" windmove-swap-states-left "left")
    ("l" windmove-swap-states-right "right")
    ("j" windmove-swap-states-down "down")
    ("k" windmove-swap-states-up "up"))

  (defhydra hydra-window-change (:timeout 5)
    "Change window."
    ("l" next-buffer "right")
    ("h" previous-buffer "left"))

  (defhydra hydra-eyebrowse-switch (:timeout 5)
    "Switch workspace."
    ("l" eyebrowse-next-window-config "next")
    ("h" eyebrowse-prev-window-config "prev"))

  (defhydra hydra-perspective-switch (:timeout 5)
    "Switch perspective."
    ("l" persp-next "next")
    ("h" persp-prev "prev"))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-hydra"

#+end_src

*** Package | iso-transl

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-bindings.el

  (use-package iso-transl
    :straight nil
    :init
    (require 'iso-transl)
    :bind
    ("<Multi_key>" . iso-transl-ctl-x-8-map))

#+end_src

*** Package | general

Allows for general custom keybindings definition to create own set of various keybindings.

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-bindings.el

  (use-package general
    :straight t
    :init
    (require 'general)
    :after (evil which-key)
    :config
    (general-create-definer pg/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (pg/leader-keys

      ;; Chat
      "c" '(:ignore t :which-key "social")
      "cs" '(:ignore t :which-key "slack")
      "css" '(slack-start :which-key "start")
      "csc" '(slack-channel-select :which-key "channels")
      "csm" '(slack-im-select :which-key "message")
      "csr" '(slack-message-add-reaction :which-key "react")

      ;; Mail
      "m" '(:ignore t :which-key "email")
      "md" '(mu4e :which-key "dashboard")
      "mo" '(org-mime-edit-mail-in-org-mode :which-key "org edit")
      "mc" '(mu4e-compose-new :which-key "compose")


      ;; Scaling
      "s" '(:ignore t :which-key "scaling")
      "st" '(hydra-text-scale/body :which-key "scale text")
      "sw" '(hydra-window-scale/body :which-key "scale window")
      "sx" '(hydra-x-window-scale/body :which-key "scale x window")


      ;; Window navigations
      "w" '(:ignore t :which-key "window")
      "wm" '(hydra-window-move/body :which-key "move")
      "ws" '(hydra-window-swap/body :which-key "swap")
      "wc" '(hydra-window-change/body :which-key "change")

      "wu" '(winner-undo :which-key "undo config")
      "wr" '(winner-redo :which-key "redo config")

      "wp" '(:ignore t :which-key "persp")
      "wpc" '(persp-switch :which-key "create")
      "wps" '(hydra-perspective-switch/body :which-key "switch")
      "wpa" '(persp-add-buffer :which-key "add buf")
      "wpu" '(persp-set-buffer :which-key "set buf")
      "wpk" '(persp-kill :which-key "remove")

      "wt" '(:ignore t :which-key "tabs")
      "wtt" '(tab-new :which-key "create")
      "wtw" '(tab-close :which-key "close")
      "wtr" '(tab-rename :which-key "name")
      "wts" '(tab-switch :which-key "switch")
      "wtu" '(tab-undo :which-key "undo")


      ;; Project management
      "p" '(:ignore t :which-key "project")
      "ps" '(pg/eshell :which-key "eshell")
      "pg" '(:ignore t :which-key "git")
      "pgs" '(magit-status :which-key "status")
      "pgc" '(magit-clone :which-key "clone")
      "pp" '(:ignore t :which-key "projectile")
      "ppr" '(projectile-run-project :which-key "run")
      "ppc" '(projectile-compile-project :which-key "compile")
      "ppf" '(projectile-find-file :which-key "find file")


      ;; Lsp mode
      "l" '(:ignore t :which-key "lsp")

      "ld" '(:ignore t :which-key "doc")
      "ldf" '(lsp-ui-doc-focus-frame :which-key "focus frame")
      "ldu" '(lsp-ui-doc-unfocus-frame :which-key "unfocus frame")

      "li" '(:ignore t :which-key "info")
      "lit" '(treemacs :which-key "tree")
      "lio" '(lsp-treemacs-symbols :which-key "outline")
      "lie" '(lsp-treemacs-errors-list :which-key "errors")


      ;; Org mode
      "o" '(:ignore t :which-key "org")

      "ot" '(:ignore t :which-key "pomodoro")
      "ott" '(pg/start-timer :which-key "start")
      "otb" '(pg/start-with-break-timer :which-key "break")
      "ots" '(pg/stop-timer :which-key "stop")
      "otp" '(org-timer-pause-or-continue :which-key "pause")

      "os" '(org-screenshot :which-key "screenshot")
      "oc" '(org-capture :which-key "capture")
      "op" '(org-tree-slide-mode :which-key "slide")

      "ol" '(:ignore t :which-key "links")
      "olo" '(org-open-at-point :which-key "open")
      "olb" '(org-mark-ring-goto :which-key "back")

      "on" '(:ignore t :which-key "notes")
      "onl" '(org-roam-buffer-toggle :which-key "links")
      "onf" '(org-roam-node-find :which-key "find/create")
      "oni" '(org-roam-node-insert :which-key "insert/create")
      "ons" '(org-id-get-create :which-key "create subheading")))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-general"

#+end_src

*** Keybindings package

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/pg-bindings.el

  (provide 'pg-bindings)

#+end_src

* Emacs Profile

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el

  (push "~/.emacs.d/lisp" load-path)

  (setq pg/is-termux (string-suffix-p "Android" (string-trim (shell-command-to-string "uname -a")))
        pg/exwm-enabled (and (not pg/is-termux) (display-graphic-p))
        load-prefer-newer t
        use-short-answers t)

  ;; (byte-recompile-directory (expand-file-name "~/.emacs.d/lisp") 0)

  (require 'pg-startup)

  (dolist (package '(pg-ui
                     pg-org
                     pg-completion
                     pg-editing
                     pg-bindings
                     ;; pg-native-compilation
                     pg-guix
                     pg-passwords
                     pg-keylog
                     pg-buffer
                     pg-email
                     pg-editing
                     pg-help
                     pg-web
                     pg-file
                     pg-shell

                     pg-project
                     pg-programming
                     ;; pg-programming-alloy
                     pg-programming-cc
                     pg-programming-commonlisp
                     pg-programming-css
                     pg-programming-docker
                     pg-programming-git
                     pg-programming-groovy
                     pg-programming-haskell
                     pg-programming-java
                     pg-programming-lmc
                     pg-programming-markdown
                     pg-programming-mips
                     pg-programming-python
                     ;; pg-programming-smtlibv2
                     pg-programming-sql
                     pg-programming-tex
                     pg-programming-typescript
                     ;; pg-programming-vhdl
                     pg-programming-yaml

                     pg-notification
                     pg-viewers
                     pg-bible
                     pg-finance
                     pg-social
                     pg-weather
                     pg-music
                     pg-games))
    (require package))

  (when pg/exwm-enabled (require 'pg-desktop))

#+end_src

*Guix packages*

#+begin_src scheme :tangle ~/.config/guix/manifests/emacs.scm :noweb yes

  (specifications->manifest
   '("emacs"
     ;; "emacs-native-comp"

     ;; "emacs-exwm"
     ;; "emacs-desktop-environment"
     <<packages>>
     ))

#+end_src

* Runtime Performance

Here we lower back the garbage collector threshold to keep better control over memory usage.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el

  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
