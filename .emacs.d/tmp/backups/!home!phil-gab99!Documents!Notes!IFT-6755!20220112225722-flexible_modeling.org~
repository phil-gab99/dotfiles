:PROPERTIES:
:ID:       6d8d59f9-cc21-42b2-add8-19d861e23145
:END:
#+title: ift6755-flexible-modeling
#+STARTUP: latexpreview, inlineimages
#+date: [2022-01-12 Wed 22:57]

* Formal Methods (FM)

Are like the "math" things that nobody uses

- In order for a formal technique to be useful, we need to be selctive about the useful formal methods
  - Variying the degree of formality
  - Need not build complete formal models
  - Need not formally analyze every system property
  - Need not apply FM in every phase of development
  - Focus on choosing what level of abstraction makes sense to model

From this is derived the idea of *Lightweight Formal Methods*
- Popular way to do technology transfer
- Two flavours:
  1. Lightweight *use* of FMs - Selectively apply FMs for partial modelling
  2. Lightweight FMs (i.e. conceive FMs that are themselves lightweight) - New methods that allow unevaluated predicates

* Formal Modelling

Just like with Formal Methods, the same applies with Formal Modelling - Formal Modelling can be seen as a vehicle for introducing some formal techniques.
- Just as we were selctive about the useful formal methods, we can similarly be selective about the useful formal modelling techniques.
  - Use formal modelling selectively only on some aspects
- Just like we had lightweight formal methods, we can introduce lightweight formal modelling
  - Lightweight modelling is *flexible modelling*

Typical model-based software engineering:

[[/home/phil-gab99/Documents/Notes/IFT-6755/20220112225722-flexible_modeling.org_20220112_235228_BL2HVB.png]]

- A vendor at the highest level creates an infrastructure a sort of modelling framework (Eclipse, UML, ...)
  - Ex.: IBM, Jetbrains
    
- These infrastructures are then used by DSL engineers to define meta-models, domain specific languages, combined with different kind of editors/IDEs for creating all sorts of useful operators
  - Ex.: DSL engineer that has created a domain specific language for putting together contracts to be used by the user (in this case a lawyer for example)

- The user then interacts with the model or software artifact.
  - Ex.: The lawyer would create some sort of artifacts that is a contract through an editor provided by the dsl engineer. Several operators can be provided by the DSL engineer such as consistency check for the contract, export tools, etc...
  - Useful outcomes can arise from this interaction.

** Information Flow

[[/home/phil-gab99/Documents/Notes/IFT-6755/20220112225722-flexible_modeling.org_20220113_000054_ZL4rL7.png]]

- Design would flow from top to bottom leading to dsl engineers using the infrastructure provided by vendors to design software and users using the designed software
- Feedback from users can arise with regards to additional required functionnalities
  - Also possible that new functionnality requires change in the meta-meta layer, thus requesting from vendors to update the infrastructure API

* Flexible Modelling

The idea of *flexible modelling* is whether this general loop can be turned around as such:

[[/home/phil-gab99/Documents/Notes/IFT-6755/20220112225722-flexible_modeling.org_20220113_000518_tF3vXf.png]]

- The idea is to be able to put the users at the "driver" seat
- Pass design decisions taken by users to DSL engineers and perhaps even all the way up to vendors
- Feedback on the taken decisions can then also be given from the vendor to dsl engineers and from dsl engineers to users with respect to what would be a good idea or what is possible, etc...
- Led from the bottom-up as opposed to top-down

** Basic ideas

- Focus on early stages of requirements or design (work best at these stages)
- Modelling languages shoud not be biased or over-determined by constraints of existing frameworks
- Emphasis on *sketching, creativity, collaboration*, facilitates these ideas
- Sketches can be used for communication, negotiation, brainstorming,...
- Allow for people to do what they do best without getting in the way
- Attempt to recreate the whiteboard metaphor

** Common approaches

- No pre-defined metamodel, no rigid conceptual framework for the users to adapt to
- User-led design - The artifacts users need to express define what kind of infrastructure must be created
- Agility - Design and feedback are parts of frequent iterations
- Metamodels emerge (over time) from user-created example sketches
- Attempt to create smart *drawing* tools

** Challenges

- Language/Metamodel required to allow for infering the meta model
- Inconsistency and incompleteness (by definition)
  - In each iteration/across iterations
- Lack of formality, semantics (drawing tool)
- Other than communication, what can you really do with a sketch?
- Too much emphasis on sketching (very visual process)
  - What about other mediums - Text, symbosls, tables, maps, sound,...

* Flexible Modelling and Formal methods

- Flexible Modelling
  - Goal - *Brainstorming*
  - Emphasis on *sketching*
  - Good qualities
    - Creativity
    - Open-endedness
    - "Creative ambiguity"
  - Informal
    
- Formal Methods
  - Goal - *Analysis*
  - Emphasis on *specification*
  - Good qualities
    - Completeness
    - Consistency
    - Clarity
  - Formal

Can these two clashing ideas be put together? Maybe...

[[/home/phil-gab99/Documents/Notes/IFT-6755/20220112225722-flexible_modeling.org_20220113_003231_IakBxe.png]]

[[/home/phil-gab99/Documents/Notes/IFT-6755/20220112225722-flexible_modeling.org_20220113_003252_wfqpTc.png]]

- Live feedback

** Guerilla Formal Modelling

- We need a good understanding of the *context* of development
- Then we can identify precisely *opportunities* where we can intervene
- Careful *deployment* of formal techniques:
  - Minimal user effort
  - Seamless integration with the tool
  - Instant pay-off for the user

How to do this generically? For software development?    

