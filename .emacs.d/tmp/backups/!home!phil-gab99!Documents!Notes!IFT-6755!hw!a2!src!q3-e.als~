module KripkeModel

sig Prop {}

sig State {
    props: set Prop
}

sig StateMachine {
    states: set State,
    init: set states,
    next: states -> states,
    final: set states
} {
    // Non-empty set of initial states
    #init > 0

    // Final states have no next state
    all s: final | #(s.^next) = 0
}

pred Reachability(m: StateMachine, p: Prop) {
    some s: (m.init).*(m.next) | p in s.props
}

pred Liveness(m: StateMachine, p: Prop) {
    all s: (m.init).*(m.next) | (some t: s.*(m.next) | p in t.props)
}

assert Implies {
    all S: StateMachine, p: Prop | Liveness[S, p] => Reachability[S, p]
} run Implies for 10 but 1 StateMachine

/* Executing "Check Implies for 10 but 1 StateMachine" */
/*    Solver=sat4j Bitwidth=4 MaxSeq=7 SkolemDepth=1 Symmetry=20 Mode=batch */
/*    14219 vars. 362 primary vars. 44435 clauses. 91ms. */
/*    No counterexample found. Assertion may be valid. 166ms */
