abstract sig FSObject {
    parent: lone Dir
}

sig Dir extends FSObject {
    contents: set FSObject
}

sig File extends FSObject {}

fact {
    all d: Dir, o: d.contents | o.parent = d
}

/* // All FSObject are either Files or Dirs */
/* fact { */
/* 	File + Dir = FSObject */
/* } */

one sig Root extends Dir {} {
	 no parent
	 // all this: Root | no this.parent
}

fact {
	 FSObject in Root.*contents
}

// No cyclic file structure
assert acyclic {
	 no d: Dir | d in d.^contents
}

check acyclic for 5

// One root
assert oneRoot {
    one d: Dir | no d.parent
}

check oneRoot for 5

// Objects in at most one Dir
assert oneLocation {
    all o: FSObject | lone d: Dir | o in d.contents
}

check oneLocation for 5
