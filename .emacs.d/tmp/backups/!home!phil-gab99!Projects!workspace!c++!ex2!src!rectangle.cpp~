#include <iostream>

#include "rectangle.h"

using namespace std;

/**
 * Defines the set of operations of the rectangle class as well as tests the
 * implementation.
 *
 * 2021-12-09
 * Philippe Gabriel
 * Étienne Ameye 
 */


// rectangle definitions
rectangle::rectangle(double longueur, double largeur) :
    longueur(longueur), largeur(largeur) {}

void rectangle::setDimensions(double longueur, double largeur) {
    this->longueur = longueur;
    this->largeur = largeur;
}

double rectangle::getLong() const {
    return longueur;
}

double rectangle::getLarg() const {
    return largeur;
}

double rectangle::getSurface() const {
    return longueur * largeur;
}

double rectangle::getPerimetre() const {
    return 2 * (longueur + largeur);
}

rectangle rectangle::operator +(rectangle rect) const {
    return rectangle(longueur + rect.longueur, largeur + rect.largeur);
}

rectangle rectangle::operator *(rectangle rect) const {
    return rectangle(longueur * rect.longueur, largeur * rect.largeur);
}

bool rectangle::operator ==(rectangle rect) const {
    return (longueur == rect.longueur && largeur == rect.largeur);
}

bool rectangle::operator !=(rectangle rect) const {
    return !(*this == rect);
}

ostream& operator <<(ostream& os, const rectangle& rect) {
    os << "<" << rect.longueur << ";" << rect.largeur << ">";
    return os;
}

istream& operator >>(istream& is, rectangle& rect) {
    char c = '\0';
    double longueur, largeur;
    bool valid = true;

    cin >> c;
    if (c != '<') valid = false;
    else {
        is >> longueur >> c;
        if (c != ';') valid = false;
        else {
            is >> largeur >> c;
            if (c != '>') valid = false;
        }
    }

    if (valid) {
        rect.longueur = longueur;
        rect.largeur = largeur;
    } else is.clear(ios::badbit | is.rdstate());

    return is;
}

rectangle rectangle::operator ++() {
    longueur++;
    largeur++;
    return *this;
}

rectangle rectangle::operator ++(int) {
    rectangle rect = *this;
    longueur++;
    largeur++;
    return rect;
}

/**
 * Testing of rectangle implementation.
 */
int main() {
    cout << "Debut du programme" << endl;

    rectangle r1(2);
    rectangle r2(2, 5);
    rectangle r3, r4, r5, r6, r7, r8;

    cout << "Surface r1: " << r1.getSurface() << "\n";
    cout << "Perimetre r1: " << r1.getPerimetre() << "\n";
    cout << "\n";

    cout << "Longueur r2: " <<  r2.getLong() << "\n";
    cout << "Largeur r2: " << r2.getLarg() << "\n";
    cout << "Changement dimensions r2 \n";
    cout << "r2.setDimensions(3, 1)\n";
    r2.setDimensions(3, 1);
    cout << "Longueur r2: " <<  r2.getLong() << "\n";
    cout << "Largeur r2: " << r2.getLarg() << "\n";
    cout << "\n";

    cout << "r3 = r1+r2;\n";
    r3 = r1+r2;
    cout << "Longueur r3: " <<  r3.getLong() << "\n";
    cout << "Largeur r3: " << r3.getLarg() << "\n";
    cout << "\n";

    cout << "r4 = r1*r2;\n";
    r4 = r1*r2;
    cout << "Longueur r4: " <<  r4.getLong() << "\n";
    cout << "Largeur r4: " << r4.getLarg() << "\n";
    cout << "\n";

    cout << "r1 = r2? " << (r1 == r2) << "\n";
    r4.setDimensions(2, 2);
    cout << "r1 = r4? " << (r1 == r4) << "\n";
    cout << "\n";

    cout << "r1 != r2? " << (r1 != r2) << "\n";
    cout << "r1 != r4? " << (r1 != r4) << "\n";
    cout << "\n";

    cout << "r5 = ++r1;\n";
    r5 = ++r1;
    cout << "Surface r1: " << r1.getSurface() << "\n";
    cout << "Perimetre r1: " << r1.getPerimetre() << "\n";
    cout << "Surface r5: " << r5.getSurface() << "\n";
    cout << "Perimetre r5: " << r5.getPerimetre() << "\n";
    cout << "\n";

    cout << "r6 = r2++;\n";
    r6 = r2++;
    cout << "Surface r2: " << r2.getSurface() << "\n";
    cout << "Perimetre r2: " << r2.getPerimetre() << "\n";
    cout << "Surface r6: " << r6.getSurface() << "\n";
    cout << "Perimetre r6: " << r6.getPerimetre() << "\n";
    cout << "\n";

    cout << "Print\n";
    cout << "r1\t" << r1;
    cout << "r2\t" << r2;
    cout << "r3\t" << r3;
    cout << "r4\t" << r4;
    cout << "r5\t" << r5;
    cout << "r6\t" << r6;
    cout << "\n";

    cout << "Entrez un rectangle de format <longeur;largeur>: \n";
    cin >> r7;
    cout << "r7\t" << r7;
    cout << "\n";

    cout << "r6 == r7? ";
    cout << (r6 == r7) << "\n";
    cout << "r6 != r7? ";
    cout << (r6 != r7) << "\n";

    cout << "Fin du programme" << endl;

    return 0;
}

/**
 * Tests:
 *
 * Debut du programme
 * Surface r1: 0
 * Perimetre r1: 4
 * 
 * Longueur r2: 2
 * Largeur r2: 5
 * Changement dimensions r2 
 * r2.setDimensions(3, 1)
 * Longueur r2: 3
 * Largeur r2: 1
 * 
 * r3 = r1+r2;
 * Longueur r3: 5
 * Largeur r3: 1
 * 
 * r4 = r1*r2;
 * Longueur r4: 6
 * Largeur r4: 0
 * 
 * r1 = r2? 0
 * r1 = r4? 0
 * 
 * r1 != r2? 1
 * r1 != r4? 1
 * 
 * r5 = ++r1;
 * Surface r1: 3
 * Perimetre r1: 8
 * Surface r5: 3
 * Perimetre r5: 8
 * 
 * r6 = r2++;
 * Surface r2: 8
 * Perimetre r2: 12
 * Surface r6: 3
 * Perimetre r6: 8
 * 
 * Print
 * r1	<3;1>r2	<4;2>r3	<5;1>r4	<2;2>r5	<3;1>r6	<3;1>
 * Entrez un rectangle de format <longeur;largeur>: 
 * <3;1>
 * r7	<3;1>
 * r6 == r7? 1
 * r6 != r7? 0
 * Fin du programme
 */
