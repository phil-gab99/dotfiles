;; Sets buffer names to be app names
(defun pg/exwm-update-class ()
  (exwm-workspace-rename-buffer exwm-class-name))

(defun pg/set-wallpaper ()
  (interactive)
  (start-process-shell-command "feh" nil "feh --bg-scale /usr/share/backgrounds/System76-Fractal_Mountains-by_Kate_Hazen_of_System76.png"))

;; Some configurations to do per application
(defun pg/configure-window-by-class ()
  (interactive)
  (pcase exwm-class-name
    ("vlc" (exwm-layout-hide-mode-line))))

;; Runs a process in the background
(defun pg/run-in-background (command)
  (let ((command-parts (split-string command "[ ]+")))
    (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

;; For managing multiple displays
(defun pg/update-displays ()
  (pg/run-in-background "autorandr --change --force")
  (pg/set-wallpaper)
  (message "Display config: %s"
           (string-trim (shell-command-in-string "autorandr --current"))))

;; Some initializations
(defun pg/exwm-init-hook ()
  (pg/start-panel))

(use-package exwm
  :bind (("C-x B" . exwm-workspace-switch-to-buffer))
  :config
  ;; Set the default number of workspaces
  (setq exwm-workspace-number 5)

  ;; When window "class" updates, use it to set the buffer name
  (add-hook 'exwm-update-class-hook #'pg/exwm-update-class)

  ;; When exwm starts up
  (add-hook 'exwm-init-hook #'pg/exwm-init-hook)

  ;; Configure launching of some x windows
  (add-hook 'exwm-manage-finish-hook #'pg/configure-window-by-class)

  ;; Configure some keybindings
  (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")

  ;; Display all buffers across all workspaces when switching
  (setq exwm-workspace-show-all-buffers t)

  ;; Change this with respect to the different display names and how to configure
  ;; Check arandr for display name, and use the (system-name) function for the system name
  ;; (setq exwm-randr-workspace-monitor-plist
  ;;       (pcase (system-name)
  ;;         ("Monitor1" '(2 "HDMI1" 3 "HDMI1"))))

  ;; Smart display adaptation
  (add-hook 'exwm-randr-screen-change-hook #'pg/update-displays)
  (pg/update-displays)

  (pg/set-wallpaper)

  ;; These keys should always pass through to Emacs
  (setq exwm-input-prefix-keys
        '(?\C-x
          ?\C-z
          ?\C-u
          ?\C-g
          ?\C-h
          ?\M-x
          ?\M-`
          ?\M-&
          ?\M-:
          ?\C-\s ;; C-SPC
          M-tab))

  ;; C-q will enable the next key to be sent directly
  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  ;; Set up global key bindings.  These always work, no matter the input state!
  ;; Keep in mind that changing this list after EXWM initializes has no effect.
  (setq exwm-input-global-keys
        ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
        `(([?\s-r] . exwm-reset)

          ;; Launch applications via shell command
          ([?\s-t] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command command nil command)))

          ;; Switch workspace
          ([?\s-w] . exwm-workspace-switch)

          ;; Bind the tilde key to workspace 0 when switching/creating
          ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

          ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))
  (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)
  (exwm-enable))

(use-package desktop-environment
  :after exwm
  :config (desktop-environment-mode)
  :custom
  (desktop-environment-volume-toggle-command "amixer -D pulse set Master 1+ toggle")
  (desktop-environment-brightness-normal-increment "5%+")
  (desktop-environment-brightness-normal-decrement "5%-"))

(defvar pg/polybar-process nil
  "Holds the process of the running Polybar instance, if any")

(defun pg/kill-panel ()
  (interactive)
  (when pg/polybar-process
    (ignore-errors
      (kill-process pg/polybar-process)))
  (setq pg/polybar-process nil))

(defun pg/start-panel ()
  (interactive)
  (pg/kill-panel)
  (setq pg/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))
