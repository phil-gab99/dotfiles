:PROPERTIES:
:ID:       4420e339-29b1-4b74-8278-e4e54c804e52
:END:
#+title: phi2005-lpc
#+STARTUP: latexpreview, inlineimages
#+date: [2022-01-16 Sun 02:27]

* Syntaxe de LPC (Logical propositional calculus)

** Vocabulaire de LPC

*Symboles* de LPC
  - Un ensemble infini $L$ de propositions élémentaires $p, q, r, p_1, p_2, \dots, p', \dots$
  - Opérateurs ou connecteurs logiques: $\to$ (implication), $\bot$ (symbole de l'absurde)
    
*Grammaire* de LPC, règles de formation syntaxique
  1) Toute lettre propositionnelle est une proposition, et $\bot$ est une proposition
  2) Si $A$ et $B$ sont des propositions, alors $A \to B$ est une proposition
     - $A$ et $B$ sont exprimées en majuscules car ce ne sont pas des *propositions particulières* de LPC, mais plutôt des *variables métalogiques* désignant des propositions arbitraires
  3) Il n'y a pas d'autres propositions

Exemples de propositions de LPC:
- $p \to \bot$
- $\bot \to \bot$
- $\bot \to (p \to ((q \to \bot) \to (\bot \to r)))$

Ne sont pas des propositions:
- $p \bot \to q$
- $\to \bot$

** Définition syntaxique des autres connecteurs

Raccourcis, abbréviations syntaxiques:

\begin{align}
%
\lnot A &=_\mathrm{def} A \to \bot \\
A \land B &=_\mathrm{def} \lnot(A \to \lnot B) \\
A \lor B &=_\mathrm{def} \lnot A \to B \\
A \leftrightarrow B &=_\mathrm{def} (A \to B) \land (B \to A)
%
\end{align}

** Notation primitive

Toute formule peut être écrite de manière à ne contenir que les symboles $\to$ et $\bot$

Exemple - $(p \land q) \lor r$:
 - $(p \land q) \lor r$
 - ${\lnot(p \to \lnot q) \lor r$ - Par $(2)$
 - $\lnot(p \to (q \to \bot)) \lor r$ - Par $(1)$
 - $((p \to (q \to \bot)) \to \bot) \lor r$ - Par $(1)$
 - $\lnot((p \to (q \to \bot)) \to \bot) \to r$ - Par $(3)$
 - $(((p \to (q \to \bot)) \to \bot) \to \bot) \to r$ - Par $(1)$
  
** Propositions élémentaires et complexes

Une *proposition* peut être soit:
- *Élémentaire*
- *Complexe*, c'est-à-dire composée de connecteurs logiques (négation, implication, conjonction, etc...)

Dans une proposition qui n'est pas élémentaire, le connecteur qui apparaît à la fin de la construction de la proposition est son *connecteur principal*

* Sémantique de LPC

** Postulats à la base de la sémantique de LPC

- Postulat de *bivalence* - Proposition ne peut avoir qu'une seule valeur de vérité, soit le vrai ou le faux
- Postulat de *vérifonctionnalité* - Valeur de vérité d'une proposition complexe est entièrement fonction des valeurs de vérité des énoncés élémentaires qui la composent

Sémantique de LPC:

\begin{tabular}{|c|c||c|c|c|c|c|} 
 \hline
 $p$ & $q$ & $\lnot p$ & $p \to q$ & $p \lor q$ & $p \land q$ & $p \leftrightarrow q$ \\ [0.5ex] 
 \hline\hline
 \top & \top & \bot & \top & \top & \top & \top \\ 
 \hline
 \top & \bot & \bot & \bot & \top & \bot & \bot \\
 \hline
 \bot & \top & \top & \top & \top & \bot & \bot \\
 \hline
 \bot & \bot & \top & \top & \bot & \bot & \top \\
 \hline
\end{tabular}

Symbole $\bot$ est overloaded, deux contextes d'utilisation

Notion d'assignation - Assignation $\alpha$ est l'attribution à toute lettre propositionnelle d'un langage $L$ d'une et d'une seule valeur de vérité
Une ligne de la table de vérité s'agit d'une assignation, assignation des propositions élémentaires - Map une valeur de vérité à une proposition

Un contre exemple est donc une assignations des prémisses la valeur de vraie et la conclusion fausse
Un argument est valide s'il n'a pas de contre-exemple

Table de vérité - Méthode sémantique pour tester la validité d'un argument
- Traduire l'argument dans le langage LPC
- Construire la table contenant toutes les prémisses et la conclusion de l'argument
- Vérifier s'il existe un contre exemple,
- Si oui invalide, sinon valide
