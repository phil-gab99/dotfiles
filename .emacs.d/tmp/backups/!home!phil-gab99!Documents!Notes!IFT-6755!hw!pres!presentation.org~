#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline \n:t
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+startup: latexpreview inlineimages
#+title: IFT-6755 - "No shit" or "Oh, shit!": responses to observations on the use of UML in professional practice
#+date: <2022-03-22 Tue>
#+author: Philippe Gabriel
#+email: philippe.gabriel.1@umontreal.ca
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.0.91 (Org mode 9.5.2)
#+cite_export:

* "No shit" or "Oh, shit!" : responses to observations on the use of UML in professional practice

Written by [[https://en.wikipedia.org/wiki/Marian_Petre][Marian Petre]]

[[/home/phil-gab99/Documents/Notes/IFT-6755/hw/pres/presentation.org_20220318_004354_mW4lvZ.png]]

- Born in 1959
- British computer scientist
- Professor of Computing at the Open University (OU)
- Director of OU's Centre of Research in Computing
- Work on Visual Programming Environments

* Goal of the paper

- Follows [[file:~/Documents/Notes/IFT-6755/articles/icse.2013.6606618.pdf][UML in practice]]
- Summarizes and reflects on discussion points of that paper - "Condensed recap"
- Additional investigation - Analyzing previously and newly collected data
- Responses from industry practitioners, software engineer teachers, UML community
- Conclusion on practical use of UML

** 2 main perspectives

1) The observations made are familiar and unsurprizing, match personal experience - "No shit"

2) The observations threaten long-held beliefs about UML use, particularly about the intended way and standards of UML use implying a need to change personal practice - "Oh shit"

* UML intentions

- Created by Grady Booch, Ivar Jacobson, and James Rumbaugh
- Universal notation - Set of rules for drawing diagrams
- Booch Method - Rational Unified Process

[[/home/phil-gab99/Documents/Notes/IFT-6755/hw/pres/presentation.org_20220318_131200_eeWFZk.png]]

* Recap of "UML in Practice"

** Method

*** Sample

- 50 practicing professional software developpers from 50 large-scale companies
  * Variety of application areas
  * Roles ranging from:
    + Requirements engineering
    + Software architecture
    + Software development
    + Quality assurance
    + Combination of roles
- Secondary reports

Sample proclaimed to be "arguably broadly representative of professional software engineering"

*** Strategy

- Series of interviews held over phone, Skype, or face-to-face over the course of 2 years
- Basic questions regarding background - experience, role, organizational context,...
- Key questions:
  1. "Do you use UML?"
  2. "Can you tell me about how you use it?" or "Why not?"
- More questions follow up with respect to the responses given

Collected data made a distinction between variations of "declared current use"

** Results

| Categories                | Uses |
|---------------------------+------|
| No UML                    |   35 |
| Retrofit                  |    1 |
| Automated Code Generation |    3 |
| Selective                 |   11 |
| Wholehearted              |   0* |

\* But described in secondary reports
** Categories

Each category with some of the retrieved answers is described below.

*** No UML

/My global corporation doesn't use UML/

Pattern:
- Considered UML for some projects
- Did not offer benefits over current practices

Specific criticisms
- Lack of context
- Overheads of understanding the notation
- Issues of synchronization/consistency

*** Retrofit

/Using only UML because it is demanded by the bill-payer/
- Document after-the-fact
  - Use own practices during design
  - Retro-fitting UML when design has stabilized

*** Automated Code Generation

[[/home/phil-gab99/Documents/Notes/IFT-6755/hw/pres/presentation.org_20220318_151317_DPiPjL.png]]

- Not used in software design (i.e. RUP inception, elaboration)
- Used to capture the design when it stabilizes in order to generate code automatically

*** Selective Use

- Personal, selective and *informal* way - "/Soft use/"
- Used for as long as it is useful - Set aside or discarded afterwards
- Early design
- Thought tool
- Prototype ideas
- Design discussions

**** Adaptation

- Notation "not by the book"
- Adapt UML to the task at hand

**** Keeping it small

/80/20 rule: express that key part of the system that gives context for everything else/
- Keep artifacts manageable in size, fit for purpose

[[/home/phil-gab99/Documents/Notes/IFT-6755/hw/pres/presentation.org_20220318_152705_ezfYQU.png]]  

**** Selective traction

Use UML as long as it was useful - and only that long
- Avoid issues of synchronization and consistency
- Cost-benefit balance
- /A means to get a start point in the code/

**** Parts of UML selected

The selected diagrams used by the 11 respondants:

| UML Diagrams           | Users |
|------------------------+-------|
| Class diagrams         |     7 |
| Sequence diagrams      |     6 |
| Activity diagrams      |     6 |
| State machine diagrams |     3 |
| Use case diagrams      |     1 |

Integration of UML with other informal representations

*** Wholehearted use

Only secondary reports

Notable features:
- Investment in Examples, Tools and Education
  - Organizational commitment to a change of culture and practice
- Not "Strict" but Adaptive Use
  - Adapting elements of the notations and developing tools or tool extensions
- Not necessarily lead to success
  - Projects that did not reach the market or did not satisfy clients despite the investment

*** General observations

Tendency of use in early design or late implementation
Conflict between expectations of modeling notation and implementation needs
Early design use of UML $\to$ Selective and informal - Stops when thinking more concretely and specifically about implementations

* Additional Data

Additional evidence was collected after the presentations of the first paper
- Collected in the context of the original paper - Responding to the first paper in some way
- Similar interview approach was used, as well as viewing online discussions on various social media platforms
- Themes emerge from response data

General response $\to$ "No shit"

- Dekel, U., Herbsleb, J.D.: Notation and representation in collaborative object-oriented design: an observational study. In: OOPSLA’07, pp. 261–280. ACM (2007)
- Dobing, B., Parsons, J.: How UML is used. CACM 49, 109–113 (2006)
- ...

** Interviews

10 additional interviews
- 5 nonusers
  - Complexity, overheads of use
  - Other notations for reasoning
- 5 *selective* users
  - Avoid extensive use - Large complex software with continuous delivery slowed down by UML
  - "Thought tools" - Informal

Emphasis on selective modeling when presenting and communicating to others
Augment models with descriptive text

** Value vs use

"/UML is to the modeling we do every day
as Latin is to the language we use every day/" - Martin Naedele

- Latin:
  - Large set of grammar features
  - Almost all European languages are subsets of Latin
  - Not practical
- UML:
  - Large set of diagrams and symbols
  - Not all should be used in a practical solution

** Selective use

Many do not use UML
Those who do, do so selectively and informally
- Informal diagramming $\to$ Vital at explaining complex concepts
- Details belong in code, not the overview
- "Thought tools"

** Overheads vs benefits

Cost/benefit tradeoff
- Overhead outweighs benefits
- Complete modeling of an application in UML is awkward

#+begin_src plantuml :file ./umltest.png

  ' Plantuml demo

  class class1 {
      -field1: Integer
      +method1(p1: String): Double
  }

  class class2 {
      #field2: Float
      ~method2(): void
  }

  class1 --|> class2

#+end_src

#+RESULTS:
[[file:./umltest.png]]

- /Code generation rarely produces usable output, code and diagrams get out of sync/
  - Some manage it through selective use
  - Others find it difficult and costly to manage

** Complexity

[[/home/phil-gab99/Documents/Notes/IFT-6755/hw/pres/presentation.org_20220319_081108_hXg3Tj.png]]

UML complexity is a recurrent theme
- Notation
- Coordination of perspectives
- Varying interpretations of same model

Can be managed through selective use

** Context of use

Use of UML diagrams and tools depends on area of software engineering in which participants are drawn

Also characterized by being a limited localized view of bigger software
- Writing software $\to$ Quick reward cycle, effortless, ...
- Designing in UML $\to$ Slow delivery, ...

* Academic community

Divided responses

** The "Oh, shit!" side

Doubtful
Challenged sample and methodology - "/I question your methodology .../"

** The "No shit" side

Embraced the results
Incorporated evidence into teachings

** Students

Guarded but inquisitive responses
- "/Why are we learning this/"

Personal experience of utility of modeling
- Important role in software engineering education
- Representation for reasoning and writing models

UML can serve as a language bridge between collaborators
Supports educational dialogues, directs attention

* UML contributors

Welcomed empirical study of UML use
Engaged with discussion

Some expressed concern about misconceptions among previous responses

"/... UML was designed to be used selectively/" - Selic

"/... UML is not intended to model every single line of an organization's software to pristine detail./
/It was not intended to be a front-end syntax to define the context for comprehensive simulations./
/It was not intended for drawing diagrams that have no value or do not tie back to a software development process./
/It was not intended to supplant the software development itself./" - Booch

* Conclusion

** Methodology

Critiques
Appreciations

"/This 'UML in Practice' ICSE'13 paper lacks in my opinion any scientific basis. Its selection of respondents is not statistically significant, and it moves from wrong and arbitrary assumptions./"

Two main views:
- Indictment
  - After 20 years, UML remains mostly unused
- Step toward improving it
  - Selective use, when done right, can help building something better

** Selective use

- UML is less universal than some would have us believe
- Selective (often informal) use is the majority use and consistent with the intentions of the UML developers
- Complexity, coordination, and cost are ongoing issues

UML's intended strengths intimately associated with observed weaknesses
Message $\to$ Power of UML best realized through selective use
Exhaustive and comprehensive use $\to$ Can become incomprehensible and rejected by stakeholders

Informal design $\to$ Descriptive annotations and other such methods which overcome perceived limitations or addresses particular needs of the moment

Standard usage is difficult to achieve
Strategic selective use leads to clearer expressive representations

[Thank you Arnaud for pointing this out] The need to address issues of complexity has received attention in the UML community; OMG recently released a draft proposal about simplifying UML
- Seidewitz, E.: UML 2.5: specification simplification. In: Presented at the Third Biannual Workshop on Eclipse Open Source Software and OMG Open Specifications 

** Educational Value

Important role in software engineering education
Common representation which drives discussion
Medium for "model-based thinking"
Educational value lies in that intellectual development rather than mirroring industry practice

** "Professional practice"

Criticisms supporting whole-hearted usage
/Boxes and lines are actually UML/

The identity of the representation is in the mind of the creator

Avoid adopting tools and ideologies at odds with considered practice
