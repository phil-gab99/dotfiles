module ColoredGraphs

sig Color {}

sig Element {
    color: Color
}

sig AboutColoredGraphs {
    nodes: set Element,
    edges: nodes -> nodes
} {
    // Symmetric edges relation
    edges = ~edges

    // No adjacent nodes with same color
    all x, y : nodes | x in y.edges => x.color != y.color
}

fun TwoColorable(): AboutColoredGraphs {
    {
        G: AboutColoredGraphs |
            #(G.nodes.color) = 2 &&
            (all x: Element | x in G.nodes) &&
            (all x: G.nodes | some x.(G.edges)) &&
            (some x: G.nodes | x.*(G.edges) = G.nodes)
    }
}

fun ThreeColorable(): AboutColoredGraphs {
    {
        G: AboutColoredGraphs |
            #(G.nodes.color) = 3 &&
            (all x: Element | x in G.nodes) &&
            (all x: G.nodes | some x.(G.edges)) &&
            (some x: G.nodes | x.*(G.edges) = G.nodes)
    }
}

fun FourColorable(): AboutColoredGraphs {
    {
        G: AboutColoredGraphs |
            #(G.nodes.color) = 4 &&
            (all x: Element | x in G.nodes) &&
            (all x: G.nodes | some x.(G.edges)) &&
            (some x: G.nodes | x.*(G.edges) = G.nodes)
    }
}

run TwoColorable for 7 but 1 AboutColoredGraphs
run ThreeColorable for 7 but 1 AboutColoredGraphs
run FourColorable for 7 but 1 AboutColoredGraphs
