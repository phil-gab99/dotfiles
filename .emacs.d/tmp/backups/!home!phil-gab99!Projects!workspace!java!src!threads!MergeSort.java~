package threads;

public class MergeSort {
    
    public void parallelMergeSort(int debut, int fin, int numOfThreads) {
        
        if (numOfThreads <= 1) {
            mergeSort(debut, fin);
            return;
        }
        
        if (debut<=fin) return;
        int milieu = (debut+fin) / 2;
        
        int[] leftSubarray = Arrays.copyOfRange(donnee, 0, milieu);
        int[] rightSubarray = Arrays.copyOfRange(donnee, milieu, fin+1);
        
        Thread leftSorter = mergeSortThread(leftSubarray, numOfThreads);
        Thread rightSorter = mergeSortThread(rightSubarray, numOfThreads);
        
        leftSorter.start();
        rightSorter.start();
        
        try {
            leftSorter.join();
            rightSorter.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        merge(leftSubarray, rightSubarray, donnee);
    }
    
    private Thread mergeSortThread(int[] donnee, int numOfThreads) {
        
        return new Thread() {
            
            public void run() {
                parallelMergeSort(0, donnee.length - 1, numOfThreads / 2);
            }
        };
    }
    
    public static void main(String[] args) {
        int numOfThreads = Runtime.getRuntime().availableProcessors();
        parallelMergeSort(0, donnee.length-1, numOfThreads);
    }
}
