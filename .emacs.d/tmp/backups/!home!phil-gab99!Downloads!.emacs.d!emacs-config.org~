#+title: Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Startup

** Performance measurements

Here we check reduce threshold for garbage collector to improve performanceand check for the startup time.

#+begin_src emacs-lisp

  (setq gc-cons-threshold (* 50 1000 1000)) ; Sets garbage collection threshold high enough

  (defun pg/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'pg/display-startup-time)

#+end_src

Below is a sectioned configuration of emacs. Each code blocks gets written out to the ~~/.emacs~ config file.

** Server initialization

Starting a server for displaying polybar info

#+begin_src emacs-lisp

  (server-start)

#+end_src

* Password utilities

#+begin_src emacs-lisp

  (defun pg/lookup-password (&rest keys)
    (let ((result (apply #'auth-source-search keys)))
      (if result
          (funcall (plist-get (car result) :secret))
        nil)))

#+end_src

* Basic UI Configuration

** UI settings

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)                             ; Disable startup message
  (scroll-bar-mode -1)                                         ; Disable visible scrollbar
  (tool-bar-mode -1)                                           ; Disable toolbar
  (tooltip-mode -1)                                            ; Disable tooltips
  (set-fringe-mode 10)                                         ; Give breathing room
  (menu-bar-mode -1)                                           ; Disable menu bar
  (setq split-width-threshold 185)                             ; Width for splitting
  (global-set-key (kbd "M-<tab>") 'other-window)               ; Bind M-<tab> for buffer switching

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha '(80 . 80))
  (add-to-list 'default-frame-alist '(alpha . (80 . 80)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

** Editing experience

#+begin_src emacs-lisp

  (setq indent-tabs-mode nil)          ; Disable tab char
  (setq tab-width 4)                   ; Set tab length
  (show-paren-mode 1)                  ; Enable delimiters matching
  (column-number-mode)                 ; Show column numbers
  (global-display-line-numbers-mode t) ; Show line numbers

  (dolist (mode '(org-mode-hook        ; Disable line numbers for some modes
                  term-mode-hook
                  eshell-mode-hook
                  treemacs-mode-hook
                  shell-mode-hook))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))

#+end_src

** Fonts
#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Fira Code Retina" :height 120)
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina")
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :weight 'regular)

#+end_src

** Window placement management

#+begin_src emacs-lisp

  (setq display-buffer-base-action
        '((display-buffer-in-side-window
           display-buffer-reuse-window
           display-buffer-reuse-mode-window
           display-buffer-same-window
           display-buffer-in-previous-window) . ((side . bottom)
                                                 (window-height . 20)
                                                 (mode . (helpful-mode help-mode)))))

#+end_src

* Temporary Files Management

Some settings to manage where emacs stores backup files (such as the ~~~ backup files).

#+begin_src emacs-lisp

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

#+end_src

* Packages

Some initializations are first set up.

#+begin_src emacs-lisp

  ;; (require 'package) ; Initialize package sources

  ;; (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  ;;                          ("org" . "https://orgmode.org/elpa/")
  ;;                          ("elpa" . "https://elpa.gnu.org/packages/")))
  ;; (package-initialize)
  ;; (setq package-enable-at-startup nil)
  ;; (unless package-archive-contents
  ;;   (package-refresh-contents))

  ;; (unless (package-installed-p 'use-package) 
  ;;   (package-install 'use-package))

  ;; (require 'use-package)
  ;; (setq use-package-always-ensure t)

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)
  ;;(setq use-package-verbose t) For optimizing performance

#+end_src

** Auto updating packages

*** HOLD Pacage | auto-package-update

#+begin_src emacs-lisp

  ;; (use-package auto-package-update
  ;;   :custom
  ;;   (auto-package-update-interval 7)
  ;;   (auto-package-update-prompt-before-update t)
  ;;   (auto-package-update-hide-results t)
  ;;   :config
  ;;   (auto-package-update-maybe)
  ;;   (auto-package-update-at-time "09:00"))

#+end_src

** Keybinding Log

*** Package | command-log-mode

Useful when starting out with the various keybindings and when presenting to an audience.

#+begin_src emacs-lisp

  (use-package command-log-mode   ; Shows keybindings used
    :commands command-log-mode)
  ;; (clm/open-command-log-buffer)   ; Opens command log window
  ;; (global-command-log-mode)       ; Toggles command log mode across all buffers

#+end_src

** Command Completion Mechanism

*** Package | ivy

For interactive command completions in Emacs.
Here are some keybindings to keep in mind that now use ivy completions. These were configured from the counsel package.
- ~M-x~ - Calls the minibuffer
- ~C-x b~ - Calls the buffer switching
- ~M-x C-r~ - Calls the command history
- ~C-M-j~ - Exits minibuffer with current input instead of current candidate
Also note that ivy allows the extraction of the results from the minibuffer into another buffer.

#+begin_src emacs-lisp

  ; Base Completion package
  (use-package ivy
    :diminish ; Does not display the minor-mode in the mode line
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map       ; Keymap for minibuffer
           ("TAB" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map    ; Keymap for buffer switching
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map ; Keymap for command history
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :init (ivy-mode 1))

#+end_src

*** Package | ivy-prescient

Allows for remembering command history.

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (ivy-prescient-mode 1))

#+end_src

*** Package | ivy-rich

Allows for description of commands displayed by ivy.

#+begin_src emacs-lisp

  (straight-use-package 'counsel)
  (use-package ivy-rich
    :after ivy
    :init (ivy-rich-mode 1))

#+end_src

*** Package | ivy-yasnippet

Allows for previewing code snippets with ivy.

#+begin_src emacs-lisp

  (use-package ivy-yasnippet
    :after (ivy yasnippet))

#+end_src

*** Package | counsel

Various completion functions using ivy.

#+begin_src emacs-lisp

  ; Completes functions using ivy
  (use-package counsel
    :after perspective
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . persp-counsel-switch-buffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only))

#+end_src

*** Package | which-key

Displays additional keybindings subsequent to prefix keybindings

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1)) ; Delay before popup in seconds

#+end_src

*** Package | prescient

#+begin_src emacs-lisp

  (use-package prescient
    :straight nil
    :custom
    (prescient-sort-length-enable nil)
    :config
    (prescient-persist-mode 1))

#+end_src

** UI Enhancement

*** Package | all-the-icons

#+begin_src emacs-lisp

  (use-package all-the-icons)

#+end_src

*** Package | doom-modeline

Customizes the look of the modeline for better aesthetic.

#+begin_src emacs-lisp

  (use-package doom-modeline
    :straight t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

*** Package | atom-one-dark-theme

Applies the one-dark theme from atom.

#+begin_src emacs-lisp

  (use-package atom-one-dark-theme)

#+end_src

*** TODO Package | autothemer

Define custom theme (in a separate elisp file, so tangle block specific theme block into ~~/.emacs.d/themes/my-theme.el~). Important to disable current theme ~M-x disable-theme~ in order to experiment.

#+begin_src emacs-lisp

  ;; (use-package autothemer
  ;;   :straight t)

#+end_src

** Window Management

*** Package | windswap

Allows for window swapping in emacs.

#+begin_src emacs-lisp

  (use-package windswap)

#+end_src

*** Package | winner-mode

For window configurations

#+begin_src emacs-lisp

  (use-package winner
    :straight nil
    :config
    (winner-mode))

#+end_src

*** Package | eyebrowse

Allows for workspace management.

#+begin_src emacs-lisp

  (use-package eyebrowse
    :config
    (eyebrowse-mode)
    :custom
    (eyebrowse-wrap-around t)
    (eyebrowse-mode-line-separator " | "))

#+end_src

*** Package | perspective

For organizing the buffer list

#+begin_src emacs-lisp

  (defun pg/persp-setup ()
    (persp-state-load "~/.emacs.d/persps/ws-setup"))

  (use-package perspective
    :straight t
    :hook (persp-mode . pg/persp-setup)
    :bind (("C-x k" . persp-kill-buffer*))
    :init
    (persp-mode))

#+end_src

** Email Management

*** Email configuration file

After having setup the file, make sure to run the following commands:
- ~mu init --maildir=~/Mail --my-address=address1@domain1.com --my-address=address2@domain2.com ...~ - For all different addresses
- ~mu index~ - To index the given addresses

#+begin_src conf :tangle ~/.mbsyncrc

  # Main hotmail account
  IMAPAccount hotmail
  Host outlook.office365.com
  User pgabriel999@hotmail.com
  Port 993
  PassCmd "emacsclient -e \"(pg/lookup-password :host \\\"hotmail.com\\\" :user \\\"pgabriel999\\\")\" | cut -d '\"' -f2"
  SSLType IMAPS
  CertificateFile /etc/ssl/certs/ca-certificates.crt

  IMAPStore hotmail-remote
  Account hotmail

  MaildirStore hotmail-local
  Subfolders Verbatim
  Path ~/Mail/Main/
  Inbox ~/Mail/Main/Inbox
  Trash ~/Mail/Main/Deleted

  Channel hotmail
  Master :hotmail-remote:
  Slave :hotmail-local:
  Patterns *
  CopyArrivalDate yes
  Create Both
  Expunge Both
  SyncState *

  # University account
  IMAPAccount umontreal
  Host outlook.office365.com
  User philippe.gabriel.1@umontreal.ca
  Port 993
  PassCmd "emacsclient -e \"(pg/lookup-password :host \\\"umontreal.ca\\\" :user \\\"philippe.gabriel.1\\\")\" | cut -d '\"' -f2"
  SSLType IMAPS
  CertificateFile /etc/ssl/certs/ca-certificates.crt

  IMAPStore umontreal-remote
  Account umontreal

  MaildirStore umontreal-local
  SubFolders Verbatim
  Path ~/Mail/University/
  Inbox ~/Mail/University/Inbox
  Trash ~/Mail/University/Deleted\ Items

  Channel umontreal
  Master :umontreal-remote:
  Slave :umontreal-local:
  Patterns *
  CopyArrivalDate yes
  Create Both
  Expunge Both
  SyncState *

#+end_src

*** Package | mu4e

#+begin_src emacs-lisp

  (use-package mu4e
    :commands mu4e
    :config
    (require 'mu4e-org)
    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/Mail")
    (setq message-send-mail-function 'smtpmail-send-it)
    (setq mu4e-compose-format-flowed t)
    (setq mu4e-compose-signature
          "Philippe Gabriel - \n[[mailto:philippe.gabriel.1@umontreal.ca][philippe.gabriel.1@umontreal.ca]] | [[mailto:pgabriel999@hotmail.com][pgabriel999@hotmail.com]]")
    (setq mu4e-compose-signature-auto-include nil)

    (setq mu4e-contexts
          (list
           ;; Main account
           (make-mu4e-context
            :name "Main"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/Main" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "pgabriel999@hotmail.com")
                    (user-full-name . "Philippe Gabriel")
                    (smtpmail-smtp-server . "smtp.office365.com")
                    (smtpmail-smtp-user . "pgabriel999@hotmail.com")
                    (smtpmail-smtp-service . 587)
                    (smtpmail-stream-type . starttls)
                    (mu4e-drafts-folder . "/Main/Drafts")
                    (mu4e-sent-folder . "/Main/Sent")
                    (mu4e-refile-folder . "/Main/Archive")
                    (mu4e-trash-folder . "/Main/Deleted")))

           ;; University account
           (make-mu4e-context
            :name "University"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/University" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "philippe.gabriel.1@umontreal.ca")
                    (user-full-name . "Philippe Gabriel")
                    (smtpmail-smtp-server . "smtp.office365.com")
                    (smtpmail-smtp-user . "philippe.gabriel.1@umontreal.ca")
                    (smtpmail-smtp-service . 587)
                    (smtpmail-stream-type . starttls)
                    (mu4e-drafts-folder . "/University/Drafts")
                    (mu4e-sent-folder . "/University/Sent Items")
                    (mu4e-refile-folder . "/University/Archive")
                    (mu4e-trash-folder . "/University/Deleted Items")))))

    (setq mu4e-maildir-shortcuts
          '(("/University/Inbox" . ?i)
            ("/University/Drafts" . ?d)
            ("/University/Sent" . ?s)
            ("/Main/Jobs" . ?j)
            ("/Main/University" . ?u)))
    :custom
    (mu4e-context-policy 'pick-first)
    ;; (setq mu4e-bookmars
    ;;       '((:name "Display Name" :query "Query" :key "Key" ...)))
    )

#+end_src

*** Package | mu4e-alert

Allows for notification pop-up and mode line count when receiving emails

#+begin_src emacs-lisp

  ;; (defun pg/email-notification ()
  ;;   (notifications-notify
  ;;    :title "Mail"
  ;;    :body "Incoming mail"
  ;;    :app-name "mu4e"))

  (use-package mu4e-alert
    :straight t
    :after mu4e
    :custom
    (mu4e-alert-email-notification-types nil)
    :config
    (mu4e t)
    ;; (add-hook 'mu4e-index-updated-hook 'pg/email-notification)
    (mu4e-alert-set-default-style 'notifications)
    (mu4e-alert-enable-notifications)
    (mu4e-alert-enable-mode-line-display))

#+end_src

** Editing Experience

*** Package | rainbow-delimiters

Colors matching delimiters with different colours for distinguishability.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

*** Package | undo-fu

Undo-redo tree to use for the evil package.

#+begin_src emacs-lisp

  (use-package undo-fu) 

#+end_src

*** HOLD Package | fill-column-indicator

Displays a visual line at 80 columns length.

#+begin_src emacs-lisp

  ;; (use-package fill-column-indicator
  ;;   :hook (prog-mode . fci-mode)
  ;;   :custom
  ;;   (fci-rule-column 80))

#+end_src

** Help Documentation

*** Package | helpful

Displays full documentations of the default help function.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** File management

*** Package | dired

The built-in directory editor. Some basic useful keybindings to keep in mind:
- ~j~ / ~k~ - Next / Previous line
- ~J~ - Jump to file in buffer
- ~RET~ - Select file or directory
- ~^~ - Go to parent directory
- ~g O~ - Open file in other window
- ~g o~ - Open file in other window in preview mode, which can be closed with ~q~
- ~M-RET~ - Show file in other window without focusing (previewing)

Keybindings relative to marking (selecting) in dired:
- ~m~ - Marks a file
- ~u~ - Unmarks a file
- ~U~ - Unmarks all files in buffer
- ~t~ - Inverts marked files in buffer
- ~% m~ - Mark files in buffer using regular expression
- ~*~ - Lots of other auto-marking functions
- ~K~ - "Kill" marked items, removed from the view only (refresh buffer with ~g r~ to get them back)
Many operations can be done on a single file if there are no active marks.

Keybindings relative to copying and renaming files:
- ~C~ - Copy marked files (or if no files are marked, the current file)
- ~R~ - Rename marked files
- ~% R~ - Rename based on regular expression

Keybindings relative to deleting files:
- ~D~ - Delete marked file
- ~d~ - Mark file for deletion
- ~x~ - Execute deletion for marks
- ~delete-by-moving-to-trash~ - Move to trash instead of deleting permanently if set to true

Keybindings relative to archives and compressing:
- ~Z~ - Compress or uncompress a file or folder to (.tar.gz)
- ~c~ - Compress selection to a specific file
- ~dired-compress-files-alist~ - Bind compression commands to file extension by adding additional extensions to the list

Keybindings for other useful operations:
- ~T~ - Touch (change timestamp)
- ~M~ - Change file mode
- ~O~ - Change file owner
- ~G~ - Change file group
- ~S~ - Create a symbolic link to this file
- ~L~ - Load an Emacs Lisp file into Emacs
  
 #+begin_src emacs-lisp

   (use-package dired
     :after evil-collection
     :straight nil
     :commands (dired dired-jump)
     :bind (("C-x C-j" . dired-jump)) ; Open dired at current directory
     :custom ((dired-listing-switches "-agho --group-directories-first"))
     :config
     (evil-collection-define-key 'normal 'dired-mode-map
       "h" 'dired-single-up-directory
       "l" 'dired-single-buffer))

#+end_src

*** Package | dired-single

Keeps a single dired buffer open at a time (to not have multiple buried buffers).

#+begin_src emacs-lisp

  (use-package dired-single
    :after dired)

#+end_src

*** Package | all-the-icons-dired

Displays icons in dired-mode.

#+begin_src emacs-lisp

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

*** Package | dired-hide-dotfiles

Togglable option for hiding dot files.

#+begin_src emacs-lisp

  (use-package dired-hide-dotfiles
    :after evil-collection
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

** Shell customization

*** Package | eshell-git-prompt

Adds more detail to the prompt in eshell with custome themes.

#+begin_src emacs-lisp

  (use-package eshell-git-prompt
    :after eshell)

#+end_src

*** Package | eshell

Some configurations to the built-in eshell.

#+begin_src emacs-lisp

  (defun pg/eshell () ; Open eshell in bottom window
    (interactive)
    (let ((w (split-window-below 2)))
      (select-window w)
      (eshell)
      (balance-windows)))

  (defun pg/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (local-unset-key (kbd "M-<tab>"))

    (setq eshell-history-size 10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell
    :hook (eshell-first-time-mode . pg/configure-eshell)
    :config
    (eshell-git-prompt-use-theme 'multiline))

#+end_src

** Project Management and Version Control

*** Package | projectile

Allows for git projects management. Accessed using the ~C-c p~ prefix. Some important notes:
- ~C-c p E~ - Allows creation of a local dirs dot file for pre-defining the values for some important other projectile variables.
  - If variables have not been set after this change then evaluate (~M-:~) the following function ~(hack-dir-local-variables)~.
- ~C-c p s r~ - Allows for use of the ~ripgrep~ command across the current reopository. Useful along with ~C-c C-o~ to pop out the results from the minibuffer into another buffer.
Note that the emacs built-in local dir creation can also be used and is more flexible.

  #+begin_src emacs-lisp

    (use-package projectile
      :diminish projectile-mode
      :after lsp
      :config (projectile-mode)
      :custom ((projectile-completion-system 'ivy))
      :bind-keymap
      ("C-c p" . projectile-command-map)
      :init
      (when (file-directory-p "~/Projects")
        (setq projectile-project-search-path '("~/Projects")))
      (setq projectile-switch-project-action #'projectile-dired))

  #+end_src

*** Package | counsel-projectile

Adds counsel functionalities for projectile.

#+begin_src emacs-lisp

    (use-package counsel-projectile
      :after projectile
      :config (counsel-projectile-mode))

#+end_src

*** Package | magit

Allows for git commands to be applied to the current repository using the command ~C-x g~ which invokes a ~git status~ command with some additional information. Typing ~?~ invokes a list of possible commands, typing ~?~ again invokes the help function for the different commands and typing ~?~ a third time invokes the manual for the package.

#+begin_src emacs-lisp

  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

*** Package | forge

Adds git forges to magit.

#+begin_src emacs-lisp

  (use-package forge
    :after magit)
    ;;:custom (auth-sources '("~/.authinfo"))

#+end_src

** IDE Functionalities 

*** Package | lsp-mode

Language Server Protocol for basic IDE functionalities. See [[https://emacs-lsp.github.io/lsp-mode/page/languages/][here]] for how to setup for different languages.
The ~lsp=ui-doc-focus-frame~ command allows to access the documentation frame of the pop-up.

#+begin_src emacs-lisp

  (defun pg/lsp-mode-setup () ; Displays structure of cursor position for all buffers
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))
    ;(lsp-treemacs-symbols)
    ;(treemacs)
    ;;(lsp-treemacs-errors-list))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . pg/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))

#+end_src

*** Package | lsp-ui

Displays useful doc on hover.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show-with-cursor t))

#+end_src

*** Package | lsp-treemacs

Tree views in emacs.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

*** Package | lsp-ivy

Quickly navigate to elements in project.

#+begin_src emacs-lisp

  (use-package lsp-ivy ; Quickly navigate to elements in project, lsp-ivy-workspace-symbol
    :after lsp)

#+end_src

*** Package | company

For auto-completions while coding.

#+begin_src emacs-lisp

  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (use-package company
    :after lsp-mode
    :hook (prog-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :config
    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends)))

#+end_src

*** Package | company-box

Includes icons for company mode suggestions.

#+begin_src emacs-lisp

  (use-package company-box
    :straight t
    :hook (company-mode . company-box-mode)
    :after company)

#+end_src

*** Package | company-prescient

Remembers autocomplete selections.

#+begin_src emacs-lisp

  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode 1))

#+end_src

*** Package | company-posframe

For positioning the company mode frame.

#+begin_src emacs-lisp

  ;; (use-package company-posframe
  ;;   :after company
  ;;   :hook (company-mode . company-posframe-mode))

#+end_src

*** Package | flycheck

Syntax checking.

#+begin_src emacs-lisp

  (use-package flycheck
    :hook (lsp-mode . flycheck-mode))

#+end_src

*** Package | dap-mode

Debugger Adaptor Protocole for IDE debugging commands. See [[https://emacs-lsp.github.io/dap-mode/page/configuration/][here]] for how to setup for different languages.

#+begin_src emacs-lisp

  (use-package dap-mode
    ;;:after general
    :commands dap-debug)
    ;;:config
    ;;(general-define-key
    ;;  :keymaps 'lsp-mode-map
    ;;  :prefix lsp-keymap-prefix
    ;;  "d" '(dap-hydra t :wk "debugger")))

#+end_src

*** Languages

**** C/C++/Objective-C

#+begin_src emacs-lisp

  (use-package ccls
    :init (setq ccls-executable "/usr/bin/ccls")
    :hook ((c-mode c++-mode objc-mode) . lsp-deferred))

#+end_src

**** Haskell

#+begin_src emacs-lisp

  (use-package haskell-mode
    :hook ((haskell-mode haskell-literate-mode) . lsp-deferred))

  (use-package lsp-haskell
    :custom
    (lsp-haskell-server-path "~/.ghcup/bin/haskell-language-server-8.10.6"))

#+end_src

**** Java

#+begin_src emacs-lisp

  (use-package lsp-java)
  
  (add-hook 'java-mode-hook 'lsp-deferred)

#+end_src

**** LMC

Custom syntax highlighting for LMC assembly language.

#+begin_src emacs-lisp

  (defvar lmc-mode-hook nil)

  (add-to-list 'auto-mode-alist '("\\.lmc\\'" . lmc-mode))

  (defconst lmc-font-lock-keywords
    (list
     '("#.*" . font-lock-comment-face)
     '("\\<\\(ADD\\|BR[PZ]?\\|DAT\\|HLT\\|IN\\|LDA\\|OUT\\|S\\(?:TO\\|UB\\)\\)\\>" . font-lock-keyword-face)
     '("[0-9A-Za-z]+" . font-lock-variable-name-face))
    "Minimal highlighting expressions for lmc mode")

  (defvar lmc-mode-syntax-table
    (let ((st (make-syntax-table)))
      (modify-syntax-entry ?# ". 1b" st)
      (modify-syntax-entry ?\n "> b" st)
      st)
    "Syntax table for lmc-mode")

  (defun lmc-mode ()
    "Major mode for editing lmc files"
    (interactive)
    (kill-all-local-variables)
    (set-syntax-table lmc-mode-syntax-table)
    (set (make-local-variable 'font-lock-defaults) '(lmc-font-lock-keywords))
    (setq major-mode 'lmc-mode)
    (setq mode-name "LMC")
    (run-hooks 'lmc-mode-hook))

#+end_src

**** MIPS

#+begin_src emacs-lisp

  (use-package mips-mode
    :mode "\\.asm\\'"
    :custom
    (mips-tab-width 4))

#+end_src

**** TODO SQL

Continue with tutorial from here https://emacs-lsp.github.io/lsp-mssql/

#+begin_src emacs-lisp

  (use-package lsp-mssql
    :hook (sql-mode . lsp-deferred))
    ;; :config
    ;; (setq lsp-mssql-connections
    ;;       [(:server "localhost"
    ;;                 :database ""
    ;;                 :user "SA"
    ;;                 :password "")]))

#+end_src

**** Python

#+begin_src emacs-lisp

  (use-package python-mode
    :straight t
    :hook (python-mode . lsp-deferred)
    :custom
    ;;(python-shell-interpreter "python3")
    ;;(dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))

  (use-package lsp-python-ms
    :straight t
    :init (setq lsp-python-ms-auto-install-server t)
    :custom
    (lsp-python-ms-executable "~/Documents/python-language-server/output/bin/Release/linux-x64/publish/Microsoft.Python.LanguageServer")
    :hook (python-mode . (lambda () (require 'lsp-python-ms) (lsp-deferred))))

#+end_src

**** TypeScript

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (require 'dap-node)
    (dap-node-setup))

#+end_src

**** VHDL

#+begin_src emacs-lisp

  ;; (flycheck-define-checker vhdl-tool
  ;;   "A VHDL syntax checker, type checker and linter using VHDL-Tool."
  ;;   :command ("vhdl-tool" "client" "lint" "--compact" "--stdin" "-f" source)
  ;;   :standard-input t
  ;;   :modes (vhdl-mode)
  ;;   :error-patterns
  ;;   ((warning line-start (file-name) ":" line ":" column ":w:" (message) line-end)
  ;;    (error line-start (file-name) ":" line ":" column ":e:" (message) line-end)))

  (use-package vhdl-tools
    :hook (vhdl-mode . lsp-deferred)
    :custom
    (lsp-vhdl-server-path "~/.emacs.d/lsp-servers/vhdl-tool"))
    ;; :config
    ;; (add-to-list 'flycheck-checkers 'vhdl-tool))

#+end_src

*** Package | evil-nerd-commenter

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("C-/" . evilnc-comment-or-uncomment-lines))

#+end_src

*** Package | yasnippet

Allows for code snippets for different languages.

#+begin_src emacs-lisp

  (use-package yasnippet
    :straight t
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-global-mode 1)
    (add-hook 'yas-minor-mode-hook (lambda ()
                                     (yas-activate-extra-mode 'fundamental-mode))))

#+end_src

*** Package | yasnippet-snippets

Collection of code snippets for yasnippet.

#+begin_src emacs-lisp

  (use-package yasnippet-snippets
    :after yasnippet
    :straight t)

#+end_src

** Org Mode

*** Package | org

Org mode package for writing structured documents and more. Here are some useful things to know about org files.
- ~#+title: Title~ - Sets the title of a document.
- ~M-left~ / ~M-right~ - Promotes/Demotes position of headers and bullet points.
- ~M-up~ / ~M-down~ - Moves the line above or below its current position, respecting the rank.
- ~S-right~ / ~S-left~ - Cycles through different states of headers and bullet points.
- ~M-RET~ - Adds another entry below the current header/bullet point of the same rank. 
- ~C-RET~ - Adds another entry after the current section occupied by the current header of the same rank.
  
Version issues with download can be fixed by manually getting the package from the package list.

#+begin_src emacs-lisp

  ;; Function for defining some behaviours for the major org-mode
  (defun pg/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))

  (use-package org
    ;;:pin org
    ;;:straight org-plus-contrib
    :commands (org-capture org-agenda)
    :hook (org-mode . pg/org-mode-setup)
    :config
    (set-face-background 'org-block "gray11")
    (set-face-foreground 'org-code "orange")
    (set-face-attribute 'org-ellipsis nil :underline nil)
    (setq org-ellipsis " ▾")
    (setq org-agenda-files ; Files considered by org-agenda
          '("~/Documents/Org/Agenda/"
            "~/Documents/Org/Recurrent/"))
    (setq org-hide-emphasis-markers t)
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-deadline-warning-days 7)
    (setq org-todo-keywords ; Defines a new sequence for TODOs, can add more sequences
          '((sequence "TODO(t)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w)" "HOLD(h)" "|"
                      "COMPLETED(c)" "CANC(k)")))

    (setq org-agenda-custom-commands ; Custom org-agenda commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "TODO"
                    ((org-agenda-overriding-header "Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Tasks")))))

            ("t" "TODOs"
             ((todo "TODO"
                    ((org-agenda-overriding-header "Todos")))))

            ("m" "Misc" tags-todo "other")

            ("s" "Schedule" agenda ""
             ((org-agenda-files '("~/Documents/Org/Agenda/Schedule-S5.org")))
             ("~/Documents/Schedule-S5.pdf"))

            ("w" "Work Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "HOLD"
                    ((org-agenda-overriding-header "On Hold")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/Documents/Org/Agenda/Tasks.org" "Idea")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jm" "Meeting" entry (file+olp+datetree
                                   "~/Documents/Org/Agenda/Appointments.org" "Notice")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree
                                          "~/Documents/Org/Agenda/Tasks.org" "Idea")
             "* Checking Email :email:\n\n%?"
             :clock-in :clock-resume :empty-lines 1)

            ("m" "Email Workflow")
            ("mf" "Follow Up" entry (file+olp "~/Documents/Org/Mail.org" "Follow up") "* TODO %a\nSCHEDULED:%t\n\n  %i")
            ("mr" "Read Later" entry (file+olp "~/Documents/Org/Mail.org" "Read Later") "* TODO %a\nSCHEDULED:%t\n\n %i")))

    (setq org-agenda-exporter-settings
          '((ps-left-header (list 'org-agenda-write-buffer-name))
            (ps-right-header
             (list "/pagenumberstring load"
                   (lambda () (format-time-string "%d/%m/%Y"))))
            (ps-font-size '(12 . 11))       ; Lanscape . Portrait
            (ps-top-margin 55)
            (ps-left-margin 35)
            (ps-right-margin 30))))

#+end_src

*** Package | org-appear

Toggles visibility of emphasis markers.

#+begin_src emacs-lisp

  (use-package org-appear
    :hook (org-mode . org-appear-mode))

#+end_src

*** Package | org-bullets

Customizes the heading bullets.

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Package | org-tree-slide

Allows for creation of slideshow presentations in emacs with org mode. The ~org-beamer-export-to-pdf~ command can be used to export the presentation as a pdf file - it requires ~pdflatex~. More detail [[https://orgmode.org/worg/exporters/beamer/tutorial.html][here]].

#+begin_src emacs-lisp

  (use-package hide-mode-line)

  (defun pg/presentation-setup ()
    (setq text-scale-mode-amount 3)
    (org-display-inline-images)
    (hide-mode-line-mode 1)
    (text-scale-mode 1)
    (local-set-key ">" org-tree-slide-move-next-tree)
    (local-set-key "<" org-tree-slide-move-previous-tree))
    ;; (setq face-remapping-alist '((default (:height 3) default)
    ;;                              (org-block (:height 2.5) italic))))

  (defun pg/presentation-end ()
    (hide-mode-line-mode 0)
    (text-scale-mode 0)
    (local-unset-key ">")
    (local-unset-key "<"))
    ;; (setq face-remapping-alist '((default variable-pitch default))))

  (use-package org-tree-slide
    :hook ((org-tree-slide-play . pg/presentation-setup)
           (org-tree-slide-stop . pg/presentation-end))
    :custom
    (org-tree-slide-activate-message "Presentation started")
    (org-tree-slide-deactivate-message "Presentation ended")
    (org-image-actual-width nil))

#+end_src

*** Package | org-notify

Handles notifications of scheduled tasks.

#+begin_src emacs-lisp

  (straight-use-package 'org-notify)
  (use-package org-notify
    :straight nil
    :after org
    :config
    (org-notify-start)
    (setq org-notify-map nil)
    (org-notify-add 'default '(:time "1w" :actions -notify/window :period "1h" :duration 10)))

#+end_src

*** Package | org-mime

Allows for editing an email in org mode

#+begin_src emacs-lisp

  (use-package org-mime
    :straight t
    :after (org-msg))

#+end_src

*** Package | org-msg

Allows for markup language when composing email

#+begin_src emacs-lisp

  (setq mail-user-agent 'mu4e-user-agent)
  (use-package org-msg
    :straight t
    :after mu4e
    :custom
    (org-msg-options "html-postamble:nil toc:nil author:nil num:nil \\n:t")
    (org-msg-startup "indent inlineimages hidestars")
    (org-msg-greeting-fmt "\nBonjour/Hi%s,\n\n")
    ;; (org-msg-recipient-names '(("user@domain.com" . "Name")))
    (org-msg-greeting-name-limit 3)
    (org-msg-default-alternatives '((new . (text utf-8 html org))
                                    (reply-to-html . (text org html))
                                    (reply-to-text . (text org))))
    (org-message-convert-citation t)
    (org-msg-signature (concat "\n\nCordialement/Regards,\n\n*--*\n" mu4e-compose-signature))
    :config
    (org-msg-mode))

#+end_src

*** Package | org-roam

Helps with note-taking strategies.

#+begin_src emacs-lisp

  (use-package org-roam
    :straight t
    :custom
    (org-roam-directory "~/Documents/Notes")
    (org-roam-capture-templates
     '(("0" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
        :unnarrowed t)
       ("d" "databases" plain
        "%?"
        :if-new (file+head "Semester 5/IFT-2935/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
        :unnarrowed t)
       ("o" "operating system" plain
        "%?"
        :if-new (file+head "Semester 5/IFT-2245/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
        :unnarrowed t)
       ("s" "software analysis" plain
        "%?"
        :if-new (file+head "Semester 5/IFT-6755/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
        :unnarrowed t)
       ("l" "logic 2" plain
        "%?"
        :if-new (file+head "Semester 5/PHI-2005/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
        :unnarrowed t)))
    :config
    (org-roam-setup))

#+end_src

*** Package | visual-fill-column

Allows line soft-wrap in org files.

#+begin_src emacs-lisp

  ;; Turns soft wrap on
  (defun pg/org-mode-visual-fill ()
    (setq visual-fill-column-width 150
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . pg/org-mode-visual-fill))

#+end_src

*** UI customization

Various improvements to the UI look in org files.

#+begin_src emacs-lisp

  (font-lock-add-keywords 'org-mode ; Replace '-' with bullets
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region
                                           (match-beginning 1) (match-end 1) "•"))))))

  (require 'org-indent) ; Changes some org structures to fixed pitch
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  (set-face-foreground 'org-level-4 "yellow")

  (dolist (face '((org-level-1 . 1.2) ; Sets font for variable-fitch text
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

#+end_src

*** Code blocks

Customizes behaviour of code blocks. Some useful constructs to know:
- ~#+PROPERTY: header-args: emacs-lisp~ - Sets a property to code blocks to have their header args be defined as indicated.
- ~#+NAME: code-block-name~ - Gives a name to a code block.
- ~:noweb yes/no~ - Used for source blocks to allow them to use values outputted by other source blocks.
- ~:mkdir p yes/no~ - Allows code blocks to create directories.

#+begin_src emacs-lisp

  (with-eval-after-load 'org ; Defer the body code until org is loaded
    (org-babel-do-load-languages ; Loads languages to be executed by org-babel
     'org-babel-load-languages '((emacs-lisp . t)
                                 (python . t)))

    (setq org-confirm-babel-evaluate nil)

    (require 'org-tempo) ; Allows defined snippets to expand into appropriate code blocks
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

*** Auto-tangling configuration files

Allows automatic tangling on save of these configuration files.

#+begin_src emacs-lisp

  (defun pg/org-babel-tangle-config () ; Automatic tangle of emacs config file
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name "~/.emacs.d/"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda ()
                             (add-hook 'after-save-hook #'pg/org-babel-tangle-config)))

#+end_src
 
** Customized Viewers

*** Package | pdf-tools

Allows for viewing of pdfs.

#+begin_src emacs-lisp

  (use-package pdf-tools
    :hook (doc-view-mode . pdf-tools-install)
    :straight t)

#+end_src

** Keybindings

*** Package | evil

Allows usage of vim-like keybindings for some modes in emacs.

#+begin_src emacs-lisp

  ;; Function for modes that should start in emacs mode
  (defun pg/evil-hook()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (evil-mode 1)
    :hook (evil-mode . pg/evil-hook)
    :custom
    (evil-undo-system 'undo-fu)
    :config
    ;; (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    ;; (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Visual line motions outside visual-line mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  ;; Evil keybindings for areas in emacs not covered by evil
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

*** Package | hydra

Allows the creation of keymaps for related commands and the ability to repeat terminal commands. Works in conjunction with the ~general~ package.

#+begin_src emacs-lisp

  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 5)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out"))

  (defhydra hydra-window-scale (:timeout 5)
    "scale window"
    ("<" evil-window-decrease-width "width dec")
    (">" evil-window-increase-width "width inc")
    ("-" evil-window-decrease-height "height dec")
    ("+" evil-window-increase-height "height inc")
    ("=" balance-windows "balance"))

  (defhydra hydra-x-window-scale (:timeout 5)
    "scale x window"
    ("<" (exwm-layout-shrink-window-horizontally 50) "width dec")
    (">" (exwm-layout-enlarge-window-horizontally 50) "width inc")
    ("-" (exwm-layout-shrink-window 50) "height dec")
    ("+" (exwm-layout-enlarge-window 50) "height inc")
    ("w" exwm-floating-toggle-floating "float toggle")
    ("f" exwm-layout-set-fullscreen "fullscreen"))

  (defhydra hydra-window-move (:timeout 5)
    "move window"
    ("h" windmove-left "left")
    ("l" windmove-right "right")
    ("j" windmove-down "down")
    ("k" windmove-up "up"))

  (defhydra hydra-window-swap (:timeout 5)
    "swap window"
    ("h" windswap-left "left")
    ("l" windswap-right "right")
    ("j" windswap-down "down")
    ("k" windswap-up "up"))

  (defhydra hydra-window-change (:timeout 5)
    "change window"
    ("l" next-buffer "right")
    ("h" previous-buffer "left"))

  (defhydra hydra-eyebrowse-switch (:timeout 5)
    "switch workspace"
    ("l" eyebrowse-next-window-config "next")
    ("h" eyebrowse-prev-window-config "prev"))

  (defhydra hydra-perspective-switch (:timeout 5)
    "switch perspective"
    ("l" persp-next "next")
    ("h" persp-prev "prev"))

#+end_src

*** Package | general

Allows for general keybindings definition to create own set of various keybindings.

#+begin_src emacs-lisp

  (use-package general
    :after evil
    :config
    (general-create-definer pg/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"            ; Prefix in normal mode
      :global-prefix "C-SPC")  ; Prefix in any mode
    (pg/leader-keys

      ;; Mail
      "m" '(:ignore t :which-key "email")
      "md" '(mu4e :which-key "dashboard")
      "mo" '(org-mime-edit-mail-in-org-mode :which-key "org edit")
      "mc" '(mu4e-compose-new :which-key "compose")


      ;; Scaling
      "s" '(:ignore t :which-key "scaling")
      "st" '(hydra-text-scale/body :which-key "scale text")
      "sw" '(hydra-window-scale/body :which-key "scale window")
      "sx" '(hydra-x-window-scale/body :which-key "scale x window")


      ;; Window navigations
      "w" '(:ignore t :which-key "window")
      "wm" '(hydra-window-move/body :which-key "move")
      "ws" '(hydra-window-swap/body :which-key "swap")
      "wc" '(hydra-window-change/body :which-key "change")

      "wu" '(winner-undo :which-key "undo config")
      "wr" '(winner-redo :which-key "redo config")

      "we" '(:ignore t :which-key "eyebrowse")
      "wec" '(eyebrowse-create-named-window-config :which-key "create")
      "wed" '(eyebrowse-close-window-config :which-key "delete")
      "wer" '(eyebrowse-rename-window-config :which-key "rename")
      "wes" '(hydra-eyebrowse-switch/body :which-key "switch")

      "wp" '(:ignore t :which-key "persp")
      "wpc" '(persp-switch :which-key "create")
      "wps" '(hydra-perspective-switch/body :which-key "switch")
      "wpa" '(persp-add-buffer :which-key "add buf")
      "wpu" '(persp-set-buffer :which-key "set buf")
      "wpk" '(persp-kill :which-key "remove")


      ;; Project management
      "p" '(:ignore t :which-key "project")
      "ps" '(pg/eshell :which-key "eshell")
      "pg" '(:ignore t :which-key "git")
      "pgs" '(magit-status :which-key "status")
      "pgc" '(magit-clone :which-key "clone")


      ;; Lsp mode
      "l" '(:ignore t :which-key "lsp")

      "ld" '(:ignore t :which-key "doc")
      "ldf" '(lsp-ui-doc-focus-frame :which-key "focus frame")
      "ldu" '(lsp-ui-doc-unfocus-frame :which-key "unfocus frame")

      "li" '(:ignore t :which-key "info")
      "lit" '(treemacs :which-key "tree")
      "lio" '(lsp-treemacs-symbols :which-key "outline")
      "lie" '(lsp-treemacs-errors-list :which-key "errors")


      "o" '(:ignore t :which-key "org")
      "oc" '(org-capture :which-key "capture")
      "op" '(org-tree-slide-mode :which-key "slide")
      "on" '(:ignore t :which-key "notes")
      "onl" '(org-roam-buffer-toggle :which-key "links")
      "onf" '(org-roam-node-find :which-key "find/create")
      "oni" '(org-roam-node-insert :which-key "insert/create")
      "ons" '(org-id-get-create :which-key "create subheading")))

#+end_src

* Runtime Performance

Here we lower back the garbage collector threshold to keep better control over memory usage.

#+begin_src emacs-lisp

  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
