module AboutProductLines

abstract sig BallPorts {} {
    some c: Component | this in c.ballPorts
}

abstract sig Socket {} {
    some c: Component | this in c.sockets
}

abstract sig Component {
    sockets: set Socket,
    ballPorts: set BallPorts
} {
    all c: Component |
        this != c => (no c.@sockets & sockets) && (no c.@ballPorts & ballPorts)
}

abstract sig ComponentDiagram {
    components: set Component,
    delegLinks: Socket lone->lone BallPorts
} {
    all c1, c2: components |
        some (c1.sockets.delegLinks & c2.ballPorts) => c1 != c2
} 

one sig dpi extends BallPorts {} {
    this in Heater.ballPorts
}

one sig dri extends Socket {} {
    this in MainController.sockets
}

one sig MainController, Heater extends Component {} {
    this in WashingMachine1.components
}

one sig WashingMachine1 extends ComponentDiagram {
    cd: delegLinks
} {
    {dri -> dpi} = cd
}

run {} for 1
