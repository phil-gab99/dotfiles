def estAlphaNum(texte):
    for c in texte:
        if not ((c >= 'a' and c <= 'z') or
                (c >= 'A' and c <= 'Z') or
                (c >= '0' and c <= '9')):
            return False
    return True


def estAdresseLocale(adresse):
    return adresse and estAlphaNum(adresse)


def estDomaine(domaine):
    sections = domaine.split('.')
    if len(sections) <= 1: return False
    for section in sections:
        if not (section and estAlphaNum(section)): return False
    return True


def courrielValide(courriel):
    sections = courriel.split('@')
    return (len(sections) == 2 and
            estAdresseLocale(sections[0]) and
            estDomaine(sections[1]))


def testCourrielValide():
    assert courrielValide("Test123@umontreal.ca")
    assert not courrielValide("T.est123@umontreal.ca")

    assert courrielValide("Test123@iro.umontreal.ca")
    assert not courrielValide("Test123@iro$.umontreal.ca")

    assert courrielValide("t1ES3t@gmail.com")
    assert not courrielValide("t1ES3t@gmailcom")

    assert courrielValide("091TesT@yahoo.ca")
    assert not courrielValide("091TesT@yahoo..ca")

    assert courrielValide("a@i.2")
    assert not courrielValide("@i.2")
    assert not courrielValide("a@")
    assert not courrielValide("@")

    assert courrielValide("abc321@protonmail.com")
    assert not courrielValide("abc321protonmail.com")

testCourrielValide();

# 1) L'adresse locale ne doit être composé que de lettres (a-z, A-Z) et de chiffres (0-9)
# 2) Le domaine ne doit être composé que de lettres (a-z, A-Z), de chiffres (0-9) et de points (.)
# 3) Le domaine doit être composé d'au moins deux parties séparées par un point
# 4) Les sections du domaine ne peuvent pas être vides
# 5) L'adresse locale et le domaine doivent chacun être composés d'au moins un caractère
# 6) L'adresse locale et le domaine sont séparées d'un @

# /35 - Conformité à la spécification
#       - résultat exact de la fonction courrielValide

# /35 - Maintenabilité
#       - nom et date dans un commentaire au début du code
#       - découpage du code en sections (e.g. lignes blanches)
#       - lignes de moins de 80 caractères
#       - utilisation de noms de variables représentatifs en camelCase
#       - pertinence des commentaires
#       - spécification du programme et des fonctions dans des commentaires
#       - utilisation d'abstraction pour éviter les calculs redondants

# /30 - Tests unitaires bien choisis
#       - le programme contient au moins un test unitaire par élément énuméré dans la spécification
#       - les tests unitaires sont implémentés correctement (tel que montré en classe)

