#+title: Emacs Desktop Environment
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/lisp/pg-desktop.el

* Fonts

The ~xsettingsd~ configuration file. Below is the table for each property:

| Name                          | Type    | Description                    | Values                                     |
|-------------------------------+---------+--------------------------------+--------------------------------------------|
| Gtk/CursorThemeName           | string  | Cursor theme                   | Subdirs of =/usr/share/icons=                |
| Net/EnableEventSounds         | integer | Play event sounds              | 0 (no), 1 (yes)                            |
| Net/EnableInputFeedbackSounds | integer | Event sounds response to input | 0 (no), 1 (yes)                            |
| Net/IconThemeName             | string  | Icon theme                     | Subdirs of =/usr/share/icons=                |
| Net/SoundThemeName            | string  | Sound theme                    |                                            |
| Net/ThemeName                 | string  | Widget theme                   | Subdirs of =/usr/share/themes=               |
| Xft/Antialias                 | integer | Text antialiasing              | 0 (no), 1 (yes), -1 (default)              |
| Xft/DPI                       | integer | Display DPI                    | 1024*dots/inch, -1 (default)               |
| Xft/HintStyle                 | string  | Text hinting style             | hintnone, hintslight, hintmedium, hintfull |
| Xft/Hinting                   | integer | Text hinting                   | 0 (no), 1 (yes), -1 (default)              |
| Xft/RGBA                      | string  | Text subpixel rendering        | none, rgb, bgr, vrgb, vbgr                 |

#+begin_src conf :tangle ~/.config/xsettingsd/xsettingsd.conf

  Gtk/DecorationLayout "menu:minimize,maximize,close"
  Gtk/FontName "Cantarell 12"
  Gtk/MonospaceFontName "Fira Mono 12"
  Gtk/CursorThemeName "Adwaita"
  Net/IconThemeName "Papirus-Dark"
  Net/ThemeName "Matcha-dark-azul"
  Xft/Antialias 1
  Xft/Hinting 0
  Xft/HintStyle "hintnone"
        
#+end_src

Make sure Emacs can find the font path from the ~desktop~ profile:

#+begin_src xml :tangle ~/.config/fontconfig/fonts.conf

  <?xml version="1.0"?>
  <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
  <fontconfig>
    <dir>~/.guix-extra-profiles/desktop/desktop/share/fonts</dir>
    <alias>
      <family>Apple Color Emoji</family>
      <prefer>
        <family>Noto Color Emoji</family>
      </prefer>
    </alias>
  </fontconfig>

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; Settin gs Manager
  "xsettingsd"

  ;; GTK Themes
  "arc-icon-theme"
  "matcha-theme"
  "hicolor-icon-theme"
  "gnome-icon-theme"
  "gnome-backgrounds"
  "papirus-icon-theme"
  "breeze-icons"

  ;; Fonts
  "font-fira-code"
  "font-jetbrains-mono"
  "font-iosevka"
  "font-iosevka-aile"
  "font-abattis-cantarell"
  "font-dejavu"
  "font-google-noto"
  "font-gnu-freefont"
  "font-liberation"
  "font-awesome"
  "font-google-material-design-icons"
  "gs-fonts"

#+end_src

* Window Management

Various settings and packages to alllow emacs to act as the operating system.

** Package | exwm

Many useful keybindings to know:

Managing windows:
- ~M-&~ - Launch a process asy/nchronously
- ~s-t~ - Binding from EXWM to launch without popup
- ~exwm-floating-toggle-floating~ - Floating windows
- ~exwm-layout-toggle-fullscreen~ - Fullscreen
- ~s-SPC~ - Select an app to open

Workspaces:
- ~s-(0-9)~ - Switch to numbered workspace (~~~ can also be used instead of ~0~)
- ~s-w~ - Workspace selector
- ~C-c RET~ - Move window to numbered workspace (EXWM windows are attached to a single workspace)
- ~C-x B~ - Move to any buffer across all workspaces

#+begin_src emacs-lisp

  ;; Sets buffer names to be app names
  (defun pg/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (defun pg/set-wallpaper ()
    (interactive)
    (start-process-shell-command "feh" nil "feh --bg-scale ~/Pictures/ferdinand-stohr-NFs6dRTBgaM-unsplash.jpg"))
    ;; (start-process-shell-command "feh" nil "feh --bg-scale /usr/share/backgrounds/System76-Fractal_Mountains-by_Kate_Hazen_of_System76.png"))

  ;; Some configurations to do per application
  (defun pg/configure-window-by-class ()
    (pcase exwm-class-name
      ("qutebrowser" (exwm-layout-hide-mode-line))
      ("mpv" (exwm-layout-hide-mode-line))
      ("PPSSPPSDL" (exwm-layout-hide-mode-line))
      ("edu-mit-csail-sdg-alloy4whole-Alloy" (exwm-layout-hide-mode-line))))

  ;; Runs a process in the background
  (defun pg/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  ;; For managing multiple displays
  (defun pg/update-displays ()
    (interactive)
    (pg/run-in-background "autorandr --change --force")
    ;; Change this with respect to the different screen configuration
    ;; Check arandr for display names
    (setq exwm-randr-workspace-monitor-plist
          (pcase (shell-command-to-string "autorandr --detected")
            ("work\n" '(5 "HDMI-1"))
            ("work+\n" '(5 "HDMI-1"))
            ("jclab\n" '(5 "HDMI-1"))
            ("aa-1140\n" '(5 "HDMI-1"))
            ("rg-e310\n" '(5 "HDMI-1"))
            ("jc-s139\n" '(5 "HDMI-1"))
            ("jc-s1139\n" '(5 "DP-1"))
            ("entertainment\n" '(5 "HDMI-1"))))
    (pg/set-wallpaper)
    (message "Display config: %s"
             (string-trim (shell-command-to-string "autorandr --current"))))

  ;; Some initializations
  (defun pg/exwm-startup ()
    (pg/start-panel)
    (pg/run-in-background "dunst")
    (pg/run-in-background "nm-applet")
    (pg/run-in-background "pasystray")
    (pg/run-in-background "udiskie -t"))

  (require 'exwm-config)
  (require 'exwm-randr)
  (use-package exwm
    :straight nil
    :custom
    (exwm-manage-configurations
     '(((string-equal exwm-class-name "Nyxt")
        char-mode t)))
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 6)

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'pg/exwm-update-class)

    ;; When exwm starts up
    (add-hook 'exwm-init-hook #'pg/exwm-startup)

    ;; Configure launching of some x windows
    (add-hook 'exwm-manage-finish-hook #'pg/configure-window-by-class)

    ;; Configure some keybindings
    (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")

    ;; Display all buffers across all workspaces when switching
    (setq exwm-workspace-show-all-buffers t)


    ;; Smart display adaptation
    (add-hook 'exwm-randr-screen-change-hook #'pg/update-displays)
    (pg/update-displays)

    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
          '(?\C-x
            ?\C-g
            ?\C-h
            ?\M-x
            ?\M-`
            ?\M-&
            ?\M-:
            ?\C-\s ;; C-SPC
            M-tab))

    ;; C-q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
          `(([?\s-r] . exwm-reset)

            ;; Switch between char and line mode
            ([?\s-s] . exwm-input-toggle-keyboard)

            ;; Launch applications via shell command
            ([?\s-t] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))

            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)

            ;; Bind the tilde key to workspace 0 when switching/creating
            ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

            ;; 's-N': Switch to certain workspace with Super plus a number key (0 - 9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))))

    (exwm-input-set-key (kbd "s-SPC") 'app-launcher-run-app)
    (exwm-randr-enable)
    (exwm-enable)
    :bind (("C-x B" . exwm-workspace-switch-to-buffer)))


#+end_src

** Package | desktop-environment

Allows for some of the keybindings to use while in exwm.

#+begin_src emacs-lisp

  (use-package desktop-environment
    :straight nil
    :after exwm
    :diminish desktop-environment-mode
    :config
    (desktop-environment-mode)
    (unbind-key "<XF86AudioPlay>" 'desktop-environment-mode-map)
    :custom
    (desktop-environment-brightness-normal-increment "5%+")
    (desktop-environment-brightness-normal-decrement "5%-"))

#+end_src

** Desktop environment

It is necessary to run the following command for creating a sym link for the below file:
~sudo ln -f ~~/.emacs.d/exwm/EXWM.desktop /usr/share/xsessions/EXWM.desktop~

#+begin_src conf :tangle ~/.emacs.d/exwm/EXWM.desktop :mkdirp yes

  [Desktop Entry]
  Name=EXWM
  Comment=Emacs Window Manager
  Exec=sh /home/phil-gab99/.emacs.d/exwm/start-exwm.sh
  TryExec=sh
  Type=Application
  X-LightDM-DesktopName=exwm
  DesktopNames=exwm

#+end_src

** Xsession

How the launcher script will be called. Do not forget to make the symlink to the file if there is no need to pass by the gnome WM:

=ln -sf ~/.dotfiles/.xsession ~/.xsession=

#+begin_src sh  :tangle ~/.dotfiles/.xsession :shebang #!/bin/sh

  ~/.emacs.d/exwm/start-exwm.sh

#+end_src

** Launcher script

Script invoked by ~EXWM.desktop~ to start emacs and load the desktop environment configuration.

#+begin_src sh :tangle ~/.emacs.d/exwm/start-exwm.sh :mkdirp yes :shebang #!/bin/sh

  . ~/.profile

  xset dpms 0 0 0 && xset -dpms && xset s off && xset s noblank # Prevent screen blank

  xinput set-prop "PNP0C50:00 04F3:311D Touchpad" "libinput Tapping Enabled" 1
  xinput set-prop "ETPS/2 Elantech Touchpad" "libinput Tapping Enabled" 1
  xinput set-prop "PNP0C50:00 04F3:311D Touchpad" "libinput Natural Scrolling Enabled" 1
  xinput set-prop "ETPS/2 Elantech Touchpad" "libinput Natural Scrolling Enabled" 1

  start_daemons () {
      if [ -z "$(pgrep -u phil-gab99 shepherd)" ]; then
          shepherd
      fi
      compton &
      xsettingsd &
      gnome-keyring-daemon --start --components=pkcs11 &
      gnome-keyring-daemon --start --components=secrets &
      # /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 &
      export SSH_AUTH_SOCK
  }

  exwm () {
      export EXWM=1
      # Disable access control for the current user.
      xhost "+SI:localuser:$USER"

      # Make Java applications aware this is a non-reparenting window manager.
      export _JAVA_AWT_WM_NONREPARENTING=1

      # Set default cursor.
      xsetroot -cursor_name left_ptr

      # Set keyboard repeat rate.
      # xset r rate 200 60

      # For debugging
      # xterm

      # Finally start Emacs
      # exec dbus-launch emacs --eval "(lerax-exwm-start nil t)"
      # exec dbus-launch --exit-with-session emacs -mm -debug-init -l ~/.emacs.d/pg-desktop.el
      exec dbus-launch --exit-with-session emacs -mm -debug-init --use-exwm
  }

  start_daemons
  exwm

#+end_src

** Keyboard configuration

Remapping some keys to work inside of the desktop environment

#+begin_src sh :tangle ~/.emacs.d/exwm/Xmodmap :mkdirp yes

  clear lock
  clear control
  keycode 66 = Control_L
  add control = Control_L
  keycode 105 = Multi_key

#+end_src

** Multiple monitors

In order to setup exwm for multiple monitors, the ~arandr~ and ~autorandr~ applications can come in handy. Some useful commands to know:
- ~autorandr --save profile~ - Saves the current display setup under the name profile
- ~autorandr --change~ - Changes to the appopriate profile with respect to the current display setup; the profile name can be explicitly given to change to it
- ~autorandr~ - Displays the created profiles

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "autorandr"

#+end_src

** Polybar

Some utility functions.

#+begin_src emacs-lisp

  (defvar pg/polybar-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun pg/kill-panel ()
    (interactive)
    (when pg/polybar-process
      (ignore-errors
        (kill-process pg/polybar-process)))
    (setq pg/polybar-process nil))

  (defun pg/start-panel ()
    (interactive)
    (pg/kill-panel)
    (setq pg/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

  (defun pg/send-polybar-hook (module-name hook-index)
      (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun pg/exwm-workspace-current-index ()
      (concat "WS: " (int-to-string exwm-workspace-current-index)))

  (defun pg/send-polybar-exwm-workspace ()
    (pg/send-polybar-hook "exwm-workspace" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'pg/send-polybar-exwm-workspace)

#+end_src

Below is the config file with the various parameters.

#+begin_src conf :tangle ~/.config/polybar/config :mkdirp yes

  ; Docs: https://github.com/polybar/polybar
  ;==========================================================

  [settings]
  screenchange-reload = true

  [global/wm]
  margin-top = 0
  margin-bottom = 0

  [colors]
  background = #f0232635
  background-alt = #576075
  foreground = #A6Accd
  foreground-alt = #555
  primary = #ffb52a
  secondary = #e60053
  alert = #bd2c40
  underline-1 = #c792ea

  [bar/panel]
  width = 100%
  height = 30
  offset-x = 0
  offset-y = 0
  fixed-center = true
  enable-ipc = true

  background = ${colors.background}
  foreground = ${colors.foreground}

  line-size = 2
  line-color = #f00

  border-size = 0
  border-color = #00000000

  padding-top = 15
  padding-left = 0
  padding-right = 1

  module-margin = 1
  font-0 = "Cantarell:size=13:weight=bold;1"
  font-1 = "Font Awesome:size=14;2"
  font-2 = "Material Icons:size=14;5"
  font-3 = "Fira Mono:size=12;-3"

  modules-left = exwm-workspace cpu memory temperature
  modules-right = battery backlight date

  tray-position = right
  tray-padding = 2
  tray-maxsize = 28
  ; tray-background = #ffffff

  cursor-click = pointer
  cursor-scroll = ns-resize


  [module/exwm-workspace]
  type = custom/ipc
  hook-0 = emacsclient -e "(pg/exwm-workspace-current-index)" | sed -e 's/^"//' -e 's/"$//'
  initial = 1
  ;format-underline = ${colors.underline-1}
  format-padding = 1

  [module/memory]
  type = internal/memory
  interval = 1
  format = |  <label> RAM <bar-used>
  label = %gb_used% / %gb_total%
  bar-used-indicator =
  bar-used-width = 10
  bar-used-foreground-0 = #55aa55
  bar-used-foreground-1 = #557755
  bar-used-foreground-2 = #f5a70a
  bar-used-foreground-3 = #ff5555
  bar-used-fill = ▐
  bar-used-empty = ▐
  bar-used-empty-foreground = #444444

  [module/cpu]
  type = internal/cpu
  interval = 2
  format = | <label> CPU <ramp-coreload>
  ;format-underline = ${colors.underline-1}
  ; click-left = emacsclient -e "(proced)"
  label =  %percentage%%
  ramp-coreload-spacing = 0
  ;ramp-load-0-foreground = ${colors.foreground-alt}
  ramp-coreload-0 = ▁
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇
  ramp-coreload-7 = █

  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  interval = 0.5
  warn-temperature = 60
  format =  |  <ramp> <label>
  ;format-underline = ${colors.underline-1}
  format-warn = <ramp> <label-warn>
  ;format-warn-underline = ${self.format-underline}
  label = %temperature-c%
  label-warn = %temperature-c%!
  label-warn-foreground = ${colors.secondary}
  ramp-0 = 
  ramp-1 = 
  ramp-2 = 
  ramp-3 = 
  ramp-4 = 

  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = ADP1
  full-at = 100
  time-format = %-l:%M
  label-charging = %percentage%% / %time%
  format-charging = <animation-charging> <label-charging>
  ;format-charging-underline = ${colors.underline-1}
  label-discharging = %percentage%% / %time%
  format-discharging = <ramp-capacity> <label-discharging>
  ;format-discharging-underline = ${self.format-charging-underline}
  format-full = <ramp-capacity> <label-full>
  ;format-full-underline = ${self.format-charging-underline}
  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 
  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-framerate = 750

  [module/backlight]
  type = internal/backlight
  card = intel_backlight
  format = | <ramp> <label> |
  label = %percentage%%
  ramp-0 = 🌕
  ramp-1 = 🌔
  ramp-2 = 🌓
  ramp-3 = 🌒
  ramp-4 = 🌑

  [module/date]
  type = internal/date
  interval = 1.0
  date = "%F %a %b %d"
  time = %I:%M:%S %p
  format = <label>
  ;format-prefix-foreground = ${colors.foreground-alt}
  ;format-underline = ${colors.underline-1}
  label =  %date% |  %time%

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "polybar"

#+end_src

** Dunst

Some utility functions:

- Below are the available ~dunstctl~ commands. Usage: ~dunstctl <command> [parameters]~

| Commands                           | Description                                                                                     |
|------------------------------------+-------------------------------------------------------------------------------------------------|
| ~action~                             | Perform the default action, or open the contexte meny of the notification at the given position |
| ~close~                              | Close the last notification                                                                     |
| ~close-all~                          | Close all notifications                                                                         |
| ~context~                            | Open context menu                                                                               |
| ~history-pop~                        | Pop one notification from history                                                               |
| ~is-paused~                          | Check if dunst is running or paused                                                             |
| ~set-paused [true : false : toggle]~ | Set the pause status                                                                            |
| ~debug~                              | Print debugging information                                                                     |
| ~help~                               | Show this help message                                                                          |

#+begin_src emacs-lisp

  (defun pg/dunstctl (cmd)
    (start-process-shell-command "dunstctl" nil (concat "dunstctl " cmd)))

  (exwm-input-set-key (kbd "s-n") (lambda () (interactive) (pg/dunstctl "history-pop")))
  (exwm-input-set-key (kbd "s-c") (lambda () (interactive) (pg/dunstctl "close")))

  (defun pg/disable-desktop-notifications ()
    (interactive)
    (start-process-shell-command "notify-send" nil "notify-send \"DUNST_COMMAND_PAUSE\""))

  (defun pg/enable-desktop-notifications ()
    (interactive)
    (start-process-shell-command "notify-send" nil "notify-send \"DUNST_COMMAND_RESUME\""))

#+end_src

For desktop notifications

#+begin_src conf :tangle ~/.config/dunst/dunstrc :mkdirp yes

    [global]
    ### Display ###
    monitor = 0

    # The geometry of the window:
    #   [{width}]x{height}[+/-{x}+/-{y}]
    geometry = "250x10-10+50"

    # Show how many messages are currently hidden (because of geometry).
    indicate_hidden = yes

    # Shrink window if it's smaller than the width.  Will be ignored if
    # width is 0.
    shrink = no

    # The transparency of the window.  Range: [0; 100].
    transparency = 10

    # The height of the entire notification.  If the height is smaller
    # than the font height and padding combined, it will be raised
    # to the font height and padding.
    notification_height = 0

    # Draw a line of "separator_height" pixel height between two
    # notifications.
    # Set to 0 to disable.
    separator_height = 1
    separator_color = frame

    # Padding between text and separator.
    padding = 8

    # Horizontal padding.
    horizontal_padding = 8

    # Defines width in pixels of frame around the notification window.
    # Set to 0 to disable.
    frame_width = 2

    # Defines color of the frame around the notification window.
    frame_color = "#89aaeb"

    # Sort messages by urgency.
    sort = yes

    # Don't remove messages, if the user is idle (no mouse or keyboard input)
    # for longer than idle_threshold seconds.
    idle_threshold = 60

    ### Text ###

    font = Cantarell 16

    # The spacing between lines.  If the height is smaller than the
    # font height, it will get raised to the font height.
    line_height = 0
    markup = full

    # The format of the message.  Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    #   %n  progress value if set without any extra characters
    #   %%  Literal %
    # Markup is allowed
    format = "<b>%s</b>\n%b"

    # Alignment of message text.
    # Possible values are "left", "center" and "right".
    alignment = left

    # Show age of message if message is older than show_age_threshold
    # seconds.
    # Set to -1 to disable.
    show_age_threshold = 60

    # Split notifications into multiple lines if they don't fit into
    # geometry.
    word_wrap = yes

    # When word_wrap is set to no, specify where to make an ellipsis in long lines.
    # Possible values are "start", "middle" and "end".
    ellipsize = middle

    # Ignore newlines '\n' in notifications.
    ignore_newline = no

    # Stack together notifications with the same content
    stack_duplicates = true

    # Hide the count of stacked notifications with the same content
    hide_duplicate_count = false

    # Display indicators for URLs (U) and actions (A).
    show_indicators = yes

    ### Icons ###

    # Align icons left/right/off
    icon_position = left

    # Scale larger icons down to this size, set to 0 to disable
    max_icon_size = 88

    # Paths to default icons.
    # icon_path = ~/.icons/50x50/

    ### History ###

    # Should a notification popped up from history be sticky or timeout
    # as if it would normally do.
    sticky_history = no

    # Maximum amount of notifications kept in history
    history_length = 20

    ### Misc/Advanced ###

    # Browser for opening urls in context menu.
    browser = qutebrowser

    # Always run rule-defined scripts, even if the notification is suppressed
    always_run_script = true

    # Define the title of the windows spawned by dunst
    title = Dunst

    # Define the class of the windows spawned by dunst
    class = Dunst

    startup_notification = false
    verbosity = mesg

    # Define the corner radius of the notification window
    # in pixel size. If the radius is 0, you have no rounded
    # corners.
    # The radius will be automatically lowered if it exceeds half of the
    # notification height to avoid clipping text and/or icons.
    corner_radius = 4

    mouse_left_click = close_current
    mouse_middle_click = do_action
    mouse_right_click = close_all

    # Experimental features that may or may not work correctly. Do not expect them
    # to have a consistent behaviour across releases.
    [experimental]
    # Calculate the dpi to use on a per-monitor basis.
    # If this setting is enabled the Xft.dpi value will be ignored and instead
    # dunst will attempt to calculate an appropriate dpi value for each monitor
    # using the resolution and physical size. This might be useful in setups
    # where there are multiple screens with very different dpi values.
    per_monitor_dpi = false

    [shortcuts]

    # Shortcuts are specified as [modifier+][modifier+]...key
    # Available modifiers are "ctrl", "mod1" (the alt-key), "mod2",
    # "mod3" and "mod4" (windows-key).
    # Xev might be helpful to find names for keys.

    # Close notification.
    # close = ctrl+space

    # Close all notifications.
    # close_all = ctrl+shift+space

    # Redisplay last message(s).
    # On the US keyboard layout "grave" is normally above TAB and left
    # of "1". Make sure this key actually exists on your keyboard layout,
    # e.g. check output of 'xmodmap -pke'
    # history = mod4+n

    # Context menu.
    # context = ctrl+shift+period

    [urgency_low]
    # IMPORTANT: colors have to be defined in quotation marks.
    # Otherwise the "#" and following would be interpreted as a comment.
    background = "#11bdbd"
    foreground = "#ffffff"
    timeout = 10
    # Icon for notifications with low urgency, uncomment to enable
    #icon = /path/to/icon

    [urgency_normal]
    background = "#1c1f26"
    foreground = "#ffffff"
    timeout = 10
    # Icon for notifications with normal urgency, uncomment to enable
    #icon = /path/to/icon

    [urgency_critical]
    background = "#900000"
    foreground = "#ffffff"
    frame_color = "#ff0000"
    timeout = 10
    # Icon for notifications with critical urgency, uncomment to enable
    #icon = /path/to/icon

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "dunst"
  "libnotify"  ; For notify-send

#+end_src

* User Services

Using [[https://www.gnu.org/software/shepherd/][GNU Shepherd]] to manage services that run in the background when logging in.

#+begin_src scheme :tangle ~/.config/shepherd/init.scm :mkdirp yes

  (define gpg-agent
    (make <service>
      #:provides '(gpg-agent)
      #:respawn? #t
      #:start (make-system-constructor "gpg-connect-agent /bye")
      #:stop (make-system-destructor "gpgconf --kill gpg-agent")))

  (define mcron
    (make <service>
      #:provides '(mcron)
      #:respawn? #t
      #:start (make-forkexec-constructor '("mcron"))
      #:stop  (make-kill-destructor)))

  (define pulseaudio
    (make <service>
      #:provides '(pulseaudio)
      #:respawn? #t
      #:start (make-forkexec-constructor '("pulseaudio"))
      #:stop  (make-kill-destructor)))

  (register-services gpg-agent mcron pulseaudio)
  (action 'shepherd 'daemonize)

  ;; Start user services
  (for-each start '(gpg-agent mcron pulseaudio))

#+end_src

* Applications

** Audio Device Control

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "alsa-utils"
  "pavucontrol"
  "pasystray"
  "bluez"

#+end_src

** Bluetooth Setup

If you need to manually connect to Bluetooth audio devices using ~bluetoothctl~, enter these commands at the ~bluetoothctl~ prompt:

#+begin_src sh

  system-alias "my-hostname" # To configure your laptop's device name
  default-agent
  power on
  scan on
  # Wait for your device to appear
  pair 04:52:C7:5E:5C:A8
  trust 04:52:C7:5E:5C:A8 # To enable auto-connect
  connect 04:52:C7:5E:5C:A8

#+end_src

** Browsers

*** Nyxt

*init.lisp*
    
#+begin_src lisp :tangle ~/.config/nyxt/init.lisp

  (in-package #:nyxt-user)

  (defvar *request-resource-handlers* nil
    "The list of handlers to add to `request-resource-hook'.
  These handlers are usually used to block/redirect the requests.")

  (dolist (file
	   (list (nyxt-init-file "evil-mode.lisp")
		 (nyxt-init-file "status.lisp")
		 (nyxt-init-file "adblock.lisp")
		 (nyxt-init-file "style.lisp")))
    (load file))

  (load-after-system :nx-search-engines (nyxt-init-file "search-engines.lisp"))
  (load-after-system :nx-freestance-handler (nyxt-init-file "freestance.lisp"))
  ;; (load-after-system :nx-dark-reader (nyxt-init-file "dark-reader.lisp"))

  (define-configuration web-buffer
      ((request-resource-hook
	(reduce #'hooks:add-hook
		(mapcar #'make-handler-resource
			,*request-resource-handlers*)
		:initial-value %slot-default%))))

  (define-configuration browser
    ;; This is for Nyxt to never prompt me about restoring the previous session.
      ((session-restore-prompt :never-restore)
       (external-editor-program (list "emacsclient" "-c"))))

  ;;; Those are settings that every type of buffer should share
  (define-configuration (buffer web-buffer internal-buffer editor-buffer prompt-buffer)
    ((default-modes (append '(evil-normal-mode) %slot-default%))
     (download-engine :renderer)
     (current-zoom-ratio 1.25)))

  (define-configuration (prompt-buffer)
      ((default-modes (append '(evil-insert-mode) %slot-default%))))

  (define-configuration buffer
    ((default-new-buffer-url "https://duckduckgo.com")))

#+end_src

*evil-mode.lisp*

#+begin_src lisp :tangle ~/.config/nyxt/evil-mode.lisp

  (in-package #:nyxt-user)

  ;; * Evil normal
  (define-mode evil-normal-mode ()
    "Enable evil style modal bindings (normal mode).
  To enable these bindings by default, add the mode to the list of default modes
  in your configuration file.

  Example:

  \(define-configuration buffer
    ((default-modes (append '(evil-normal-mode) %slot-default%))))

  In `evil-insert-mode', CUA bindings are still available unless
  `application-mode-p' is non-nil in `evil-insert-mode'.
  You can also enable `application-mode' manually to forward all keybindings to
  the web page.

  See also `evil-insert-mode'."
    ((glyph "N")
     (previous-keymap-scheme-name
      nil
      :type (or keymap:scheme-name null)
      :documentation "The previous keymap scheme that will be used when ending
      normal-mode")
     (keymap-scheme
      (define-scheme "evil-normal"
	scheme:vi-normal
	'("i" evil-insert-mode
	  "button1" evil-button1)))
     (destructor
      (lambda (mode)
	(setf (keymap-scheme-name (buffer mode))
	      (previous-keymap-scheme-name mode))
	 (setf (forward-input-events-p (buffer mode)) t)))
     (constructor
      (lambda (mode)
	(with-accessors
	 ((buffer buffer)) mode
	 (let ((evil-insert (find-submode buffer 'evil-insert-mode)))
	   (setf (previous-keymap-scheme-name mode)
		 (if evil-insert
		     (previous-keymap-scheme-name evil-insert)
		   (keymap-scheme-name buffer))))
	 ;; Destroy evil-normal mode after setting previous-keymap-scheme-name,
	 ;; or else we can't save the previous keymap scheme.
	 (evil-insert-mode :activate nil :buffer buffer)
	 (setf (keymap-scheme-name buffer) scheme:vi-normal)
	 (setf (forward-input-events-p buffer) nil))))))

  ;; * Evil insert
  (define-mode evil-insert-mode ()
    "Enable evil-insert-style modal bindings (insert mode).
  See `evil-normal-mode'."
    ((glyph "I")
     (rememberable-p nil)
     (previous-keymap-scheme-name nil
      :type (or keymap:scheme-name null)
      :documentation "The previous keymap scheme that will be used when ending
  vi-normal-mode.")
     (previous-evil-normal-mode nil
      :type (or evil-normal-mode null)
      :documentation "The `evil-normal-mode' that this insert mode is tied to.")
     (keymap-scheme
      (define-scheme "evil-insert"
	scheme:vi-insert
	'("button1" evil-button1
	  "C-g" nyxt/prompt-buffer-mode:cancel-input
	  "escape" switch-to-evil-normal-mode)))
     (destructor
      (lambda (mode)
	(setf (keymap-scheme-name (buffer mode))
	      (previous-keymap-scheme-name mode))))
     (constructor
      (lambda (mode)
	(with-accessors ((buffer buffer)) mode
	  (let ((evil-normal (find-submode buffer 'evil-normal-mode)))
	    (setf (previous-keymap-scheme-name mode)
		  (if evil-normal
		      (previous-keymap-scheme-name evil-normal)
		      (keymap-scheme-name buffer))
		  (previous-evil-normal-mode mode)
		  evil-normal))
	  (evil-normal-mode :activate nil :buffer buffer)
	  (setf (keymap-scheme-name buffer) scheme:vi-insert))))))


  ;; * Insert to normal
  (define-command switch-to-evil-normal-mode
      (&optional (mode
		  (find-submode (or (current-prompt-buffer) (current-buffer))
				'evil-insert-mode)))
    "Switch to the mode remembered to be the matching evil-normal one for this
    MODE. See also `evil-normal-mode' and `evil-insert-mode'."
    (when mode
      (enable-modes (list (or (and (previous-evil-normal-mode mode)
				   (mode-name (previous-evil-normal-mode mode)))
			      'evil-normal-mode))
		    (buffer mode))))

  (define-command evil-button1
      (&optional (buffer (or (current-prompt-buffer)
			     (current-buffer))))
    "Enable evil insert mode when focus is on an input element on the web page.
  See also `evil-normal-mode' and `evil-insert-mode'."
    (forward-to-renderer :window (current-window) :buffer buffer)
    (let ((response (nyxt/web-mode:%clicked-in-input? buffer)))
      (cond
	((and (nyxt/web-mode:input-tag-p response)
	      (find-submode buffer 'evil-normal-mode))
	 (evil-insert-mode))
	((and (not (nyxt/web-mode:input-tag-p response))
	      (find-submode buffer 'evil-insert-mode))
	 (evil-normal-mode)))))

  (define-configuration base-mode
      ((keymap-scheme
	(define-scheme "evil-base"
	  scheme:vi-normal
	  '("C-x C-c" quit
	    "C-x C-f" open-file
	    "[" switch-buffer-previous
	    "]" switch-buffer-next
	    "M-x" execute-command
	    "C-x k" delete-buffer
	    "C-x b" switch-buffer
	    "g r" reload-current-buffer
	    "o" set-url
	    "O" set-url-new-buffer
	    "m u" bookmark-url
	    "m d" delete-bookmark
	    "m l" list-bookmarks
	    "y u" copy-url
	    "y t" copy-title
	    "C-h h" help
	    "C-h C" describe-class
	    "C-h b" describe-bindings
	    "C-h c" describe-command
	    "C-h f" describe-function
	    "C-h k" describe-key
	    "C-h r" manual
	    "C-h s" describe-slot
	    "C-h t" tutorial
	    "C-h v" describe-variable
	    "w w" make-window
	    "w q" delete-current-window
	    "v" nyxt/visual-mode:visual-mode
	    "u" reopen-buffer)))))

  (define-configuration prompt-buffer
      ((keymap-scheme
	(define-scheme "evil-prompt"
	  scheme:vi-normal
	  '("C-j" select-next
	    "C-k" select-previous
	    "C-g" cancel-input)))))

  (define-configuration nyxt/web-mode:web-mode
      ((keymap-scheme
	(define-scheme "evil-web"
	  scheme:vi-normal
	  '("C-s" nyxt/web-mode:search-buffer
	    "H" nyxt/web-mode:history-backwards
	    "L" nyxt/web-mode:history-forwards
	    "y y" nyxt/web-mode:copy
	    "p" nyxt/web-mode:paste
	    "d d" nyxt/web-mode:cut
	    "u" nyxt/web-mode:undo
	    "f" nyxt/web-mode:follow-hint
	    "F" nyxt/web-mode:follow-hint-new-buffer
	    "C-r" nyxt/web-mode:redo
	    "m f" nyxt/web-mode:bookmark-hint
	    "+" nyxt/web-mode:zoom-page
	    "hyphen" nyxt/web-mode:unzoom-page
	    "=" nyxt/web-mode:reset-page-zoom
	    "j" nyxt/web-mode:scroll-down
	    "k" nyxt/web-mode:scroll-up
	    "h" nyxt/web-mode:scroll-left
	    "j" nyxt/web-mode:scroll-down
	    "k" nyxt/web-mode:scroll-up
	    "l" nyxt/web-mode:scroll-right
	    "G" nyxt/web-mode:scroll-to-bottom
	    "g g" nyxt/web-mode:scroll-to-top
	    "C-d" nyxt/web-mode:scroll-page-down
	    "C-u" nyxt/web-mode:scroll-page-up)))))

  (define-configuration nyxt/visual-mode:visual-mode
    ((keymap-scheme
      (define-scheme "evil-visual"
	scheme:vi-normal
	'("h" nyxt/visual-mode:backward-char
	  "j" nyxt/visual-mode:forward-line
	  "k" nyxt/visual-mode:backward-line
	  "l" nyxt/visual-mode:forward-char
	  "w" nyxt/visual-mode:forward-word
	  "e" nyxt/visual-mode:forward-word
	  "b" nyxt/visual-mode:backward-word
	  "$" nyxt/visual-mode:end-line
	  ")" nyxt/visual-mode:forward-sentence
	  "(" nyxt/visual-mode:backward-sentence
	  "}" nyxt/visual-mode:forward-paragraph
	  "{" nyxt/visual-mode:backward-paragraph
	  "C-u" nyxt/visual-mode:forward-document
	  "C-d" nyxt/visual-mode:backward-document
	  "0" nyxt/visual-mode:beginning-line
	  "C-g" nyxt/visual-mode:toggle-mark
	  "C-c" nyxt/visual-mode:visual-mode)))))

#+end_src

*status.lisp*

#+begin_src lisp :tangle ~/.config/nyxt/status.lisp

  (in-package #:nyxt-user)

  ;;; Display modes as short glyphs (listed below) in the mode line
  ;;; (bottom-right of the screen).
  (define-configuration status-buffer
    ((glyph-mode-presentation-p t)))

  (define-configuration nyxt/force-https-mode:force-https-mode ((glyph "ϕ")))
  (define-configuration nyxt/blocker-mode:blocker-mode ((glyph "β")))
  (define-configuration nyxt/proxy-mode:proxy-mode ((glyph "π")))
  (define-configuration nyxt/reduce-tracking-mode:reduce-tracking-mode
    ((glyph "τ")))
  (define-configuration nyxt/certificate-exception-mode:certificate-exception-mode
    ((glyph "χ")))
  (define-configuration nyxt/style-mode:style-mode ((glyph "ϕ")))
  (define-configuration nyxt/help-mode:help-mode ((glyph "?")))
  (define-configuration nyxt/web-mode:web-mode ((glyph "ω")))
  (define-configuration nyxt/auto-mode:auto-mode ((glyph "α")))
  (define-configuration nyxt/cruise-control-mode:cruise-control-mode ((glyph "σ")))

#+end_src

*adblock.lisp*

#+begin_src lisp :tangle ~/.config/nyxt/adblock.lisp

  (in-package #:nyxt)

  (define-configuration nyxt/blocker-mode:blocker-mode
    ((nyxt/blocker-mode:hostlists
      (mapcar (lambda (h)
		;; Update every minute
		(setf (nyxt/blocker-mode:update-interval h) 60))
	      %slot-default%))))

  (define-configuration buffer
    ((default-modes (append '(blocker-mode noscript-mode) %slot-default%))))

#+end_src

*style.lisp*

#+begin_src lisp :tangle ~/.config/nyxt/style.lisp

  (in-package #:nyxt-user)

  (define-configuration window
      ((message-buffer-style
	(str:concat
	 %slot-default%
	 (cl-css:css
	  '((body
	     :background-color "#282c34"
	     :color "#cccccc")))))))
  ;;; Color config for prompt-buffer (minibuffer in Emacs parlance).
  (define-configuration prompt-buffer
      ((style (str:concat
	       %slot-default%
	       (cl-css:css
		'((body
		   :background-color "#282c34"
		   :color "#cccccc")
		  ("#prompt-area"
		   :background-color "#282c34")
		  ;; The area you input text in.
		  ("#input"
		   :background-color "#cccccc")
		  (".source-name"
		   :color "#cccccc"
		   :background-color "#202231")
		  (".source-content"
		   :background-color "#282c34")
		  (".source-content th"
		   :border "1px solid #202231"
		   :background-color "#282c34")
		  ;; The currently highlighted option.
		  ("#selection"
		   :background-color "#98f979"
		   :color "#282c34")
		  (.marked :background-color "#4682d9"
			   :font-weight "bold"
			   :color "#cccccc")
		  (.selected :background-color "#282c34"
			     :color "#cccccc")))))))
  ;;; Internal (i.e. help, info, describe-* buffers). Usually work for
  ;;; simple HTML display, so I'm overriding lots of things there.
  ;;;
  ;;; Panel buffers are the same in regards to style.
  (define-configuration (internal-buffer panel-buffer)
      ((style
	(str:concat
	 %slot-default%
	 (cl-css:css
	  '((title
	     :color "#cccccc")
	    (body
	     :background-color "#282c34"
	     :color "#cccccc")
	    (hr
	     :color "#eead0e")
	    (a
	     :color "#61afef")
	    (.button
	     :color "#ffffff"
	     :background-color "#006fff")))))))
  ;;; History-tree-mode is a mode used in `history-tree' and
  ;;; `buffer-history-tree' buffers. It's not enough to customize
  ;;; `internal-buffer' to cover it, thus I'm customizing it
  ;;; specifically.
  (define-configuration nyxt/history-tree-mode:history-tree-mode
      ((nyxt/history-tree-mode::style
	(str:concat
	 %slot-default%
	 (cl-css:css
	  '((body
	     :background-color "#282c34"
	     :color "#cccccc")
	    (hr
	     :color "#cccccc")
	    (a
	     :color "#61afef")
	    ;; Those three below are here to color the tree-branching list
	    ;; markers in white.
	    ("ul li::before"
	     :background-color "#cccccc")
	    ("ul li::after"
	     :background-color "#cccccc")
	    ("ul li:only-child::before"
	     :background-color "#cccccc")))))))
  (define-configuration nyxt/web-mode:web-mode
      ;; The style of highlighted boxes, e.g. link hints.
      ((nyxt/web-mode:highlighted-box-style
	(cl-css:css
	 '((".nyxt-hint.nyxt-highlight-hint"
	    :font-weight "normal"
	    :background "#494949"))))))
  ;;; Status buffer is the strip above the message buffer/echo area.
  ;;; Modeline in Emacs parlance.
  (define-configuration status-buffer
      ((style (str:concat
	       %slot-default%
	       (cl-css:css
	      ;; Arrows on the left.
		'(("#controls"
		   :border-top "1px solid #ffffff"
		   :background-color "#737373")
		  ;; To the right of the arrows.
		  ("#url"
		   :background-color "#21252b"
		   :color "#cccccc"
		   :border-top "1px solid #cccccc")
		  ;; Far to the right.
		  ("#modes"
		   :background-color "#21252b"
		   :border-top "1px solid #cccccc")
		  ;; The center segment.
		  ("#tabs"
		   :background-color "#737373"
		   :color "#282c34"
		   :border-top "1px solid #cccccc")))))))
  (define-configuration nyxt/style-mode:dark-mode
      ((style #.(cl-css:css
		 '((*
		    :background-color "#282c34 !important"
		    :background-image "none !important"
		    :color "#cccccc")
		   (a
		    :background-color "#282c34 !important"
		    :background-image "none !important"
		    :color "#556B2F !important"))))))

#+end_src

*freestance.lisp*

#+begin_src lisp :tangle ~/.config/nyxt/freestance.lisp

  (in-package #:nyxt-user)

  (setq *request-resource-handlers*
	(nconc *request-resource-handlers*
	       nx-freestance-handler:*freestance-handlers*))

#+end_src

*dark-reader.lisp*

#+begin_src lisp :tangle ~/.config/nyxt/dark-reader.lisp

  (in-package #:nyxt-user)

  (define-configuration nx-dark-reader:dark-reader-mode
    ((nxdr:selection-color "#494949")
     (nxdr:background-color "#282c34")
     (nxdr:text-color "#cccccc")))

  (push 'nx-dark-reader:dark-reader-mode *web-buffer-modes*)

#+end_src

*search-engines.lisp*

#+begin_src lisp :tangle ~/.config/nyxt/search-engines.lisp

  (in-package #:nyxt-user)

  ;;;; This is a file with settings for my nx-search-engines extension.

  ;;; My DDG settings, shared between the usual, image-search and other
  ;;; types of DuckDuckGo.
  (defvar *duckduckgo-keywords*
    '(:theme :dark
      :help-improve-duckduckgo nil
      :homepage-privacy-tips nil
      :privacy-newsletter nil
      :newsletter-reminders nil
      :install-reminders nil
      :install-duckduckgo nil
      :units-of-measure :metric
      :keyboard-shortcuts t
      :advertisements nil
      :open-in-new-tab nil
      :infinite-scroll t
      :safe-search :off
      :font-size :medium
      :header-behavior :on-fixed
      :font :helvetica
      :background-color "000000"
      :center-alignment t))

  (define-configuration buffer
      ((search-engines
	(list
	 ;; engines: is a prefix for `nx-search-engines',
	 ;; it only works if you load nx-search-engines.
	 (engines:google :shortcut "gmaps"
			 :object :maps)
	 (engines:wikipedia :shortcut "w")
	 (engines:google :shortcut "g"
			 :safe-search nil)
	 (apply #'engines:duckduckgo-images
		:shortcut "i" *duckduckgo-keywords*)
	 (engines:duckduckgo-html-only :shortcut "dho")
	 (engines:github :shortcut "git")
	 (apply #'engines:duckduckgo
		:shortcut "d" *duckduckgo-keywords*)))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "nyxt"

#+end_src

*** Qutebrowser

*Main configuration*

#+begin_src python :tangle ~/.config/qutebrowser/config.py :noweb yes

  import sys, os

  ################################################################################
  # ALIASES
  ################################################################################

  # Type - dict
  c.aliases = {
      'w': 'session-save',
      'q': 'close',
      'qa': 'quit',
      'wq': 'quit --save',
      'wqa': 'quit --save'
  }

  ################################################################################
  # TABS AND WINDOW MANAGEMENT
  ################################################################################

  # Open new window for every tab
  # Type - Bool
  c.tabs.tabs_are_windows = False

  # When to show tab bar
  # Type - String
  # Values - always    -> Always show tab bar
  #          never     -> Always hide tab bar
  #          multuple  -> Hide tab bar if only one tab open
  #          switching -> Show tab bar when switching tabs
  c.tabs.show = 'multiple'

  # Behaviour on last closed tab
  # Type - String
  # Values - ignore       -> Do nothing
  #          blank        -> Load blank page
  #          startpage    -> Load start page
  #          default-page -> Load default page
  #          close        -> Close window
  c.tabs.last_close = 'close'

  # Auto save session
  # Type - Bool
  c.auto_save.session = True

  # Enable smooth scrolling
  # Type - Bool
  c.scrolling.smooth = True

  # Load a restored tab as soon as it takes focus.
  # Type - Bool
  c.session.lazy_restore = True

  ################################################################################
  # FONTS AND THEMES
  ################################################################################

  # Font family for standard fonts
  # Type - FontFamily
  c.fonts.web.family.standard = 'Bitstream Vera Sans'

  # Font family for serif fonts
  # Type - FontFamily
  c.fonts.web.family.serif = 'Bitstream Vera Serif'

  # Font family for sans-serif fonts.
  # Type: FontFamily
  c.fonts.web.family.sans_serif = 'Bitstream Vera Sans'

  # Font family for fixed fonts.
  # Type: FontFamily
  c.fonts.web.family.fixed = 'Fira Mono'

  # Font used for hints
  # Type - Font
  c.fonts.hints = 'bold 12pt monospace'

  # Font used in statusbar
  # Type - Font
  c.fonts.statusbar = '12pt Cantarell'

  # Render web contents using dark theme
  # Type - Bool
  c.colors.webpage.darkmode.enabled = True

  # Which images to apply dark mode to
  # Type - String
  # Values - always -> Apply dark mode filter to all images
  #          never  -> Never apply dark mode filter to any images
  #          smart  -> Apply dark mode based on image content
  c.colors.webpage.darkmode.policy.images = 'never'

  # Background color for webpages
  # Type - QtColor
  c.colors.webpage.bg = 'black'

  ################################################################################
  # EDITING
  ################################################################################

  # Automatically turn on insert mode when a loaded page focuses a text field
  # Type - Bool
  c.input.insert_mode.auto_load = True

  # Edit fields in Emacs with Ctrl+E
  # Type - ShellCommand
  c.editor.command = ["emacsclient", "+{line}:{column}", "{file}"]

  ################################################################################
  # CONTENT VIEWING
  ################################################################################

  # Allow pdf.js to view PDF files in browser
  # Type - Bool
  c.content.pdfjs = False

  # Autoplay video elements
  # Type - Bool
  c.content.autoplay = False

  ################################################################################
  # ADBLOCKING - TODO
  ################################################################################
  sys.path.append(os.path.join(sys.path[0], 'jmatrix'))
  config.source("jmatrix/jmatrix/integrations/qutebrowser.py")
  # c.content.blocking.enabled = False
  # c.content.blocking.method = null
  # c.content.blocking.adblock.lists = [
  #     'https://easylist.to/easylist/easylist.txt',
  #     'https://easylist.to/easylist/easyprivacy.txt',
  #     'https://easylist.to/easylist/fanboy-annoyance.txt',
  #     'https://easylist-downloads.adblockplus.org/abp-filters-anti-cv.txt',
  #     'https://secure.fanboy.co.nz/fanboy-annoyance.txt',
  #     'https://secure.fanboy.co.nz/fanboy-cookiemonster.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/legacy.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/annoyances.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/badware.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/privacy.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/resource-abuse.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/unbreak.txt'
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/badlists.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2020.txt',
  #     'https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2021.txt',
  #     'https://www.malwaredomainlist.com/hostslist/hosts.txt',
  #     'https://www.i-dont-care-about-cookies.eu/abp/',
  #     'https://pgl.yoyo.org/adservers/serverlist.php?showintro=0;hostformat=hosts',
  #     'https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=1&mimetype=plaintext'
  # ]

  ################################################################################
  # KEYBINDINGS
  ################################################################################

  ## Normal mode ##

  # Swap J and K for tab switching
  config.bind('J', 'tab-prev')
  config.bind('K', 'tab-next')
  config.unbind('d') # Don't close tab on lower-case 'd'
  config.bind('yy', 'yank')
  config.bind(',m', 'spawn mpv {url}')
  config.bind(',M', 'hint links spawn mpv {hint-url}')

  ## Command mode ##
  config.bind('<Ctrl-g>', 'mode-leave', mode='command')
  config.bind('<ctrl-j>', 'completion-item-focus --history next', mode='command')
  config.bind('<ctrl-k>', 'completion-item-focus --history prev', mode='command')

  ## Hint mode ##
  config.bind('<Ctrl-g>', 'mode-leave', mode='hint')

  ## Insert mode ##
  config.bind('<Ctrl-g>', 'mode-leave', mode='insert')

  ## Prompt mode ##
  config.bind('<Ctrl-g>', 'mode-leave', mode='prompt')
  config.bind('<ctrl-j>', 'prompt-item-focus next', mode='prompt')
  config.bind('<ctrl-k>', 'prompt-item-focus prev', mode='prompt')

  ################################################################################
  # MISC
  ################################################################################

  # Additional arguments to pass to Qt, without leading '--'
  # Type - List of String
  c.qt.args = ['disable-seccomp-filter-sandbox'] # Fix rendering issue

  # Load the autoconfig file (quteconfig.py)
  config.load_autoconfig()

#+end_src

*Relevant bookmarks*

#+begin_src conf :tangle ~/.config/qutebrowser/quickmarks

  gn https://github.com/notifications
  dot https://github.com/phil-gab99/dotfiles
  ddg https://duckduckgo.com/?q
  gh https://github.com
  yt https://youtube.com
  st https://studium.umontreal.ca/my/index.php
  sc https://academique-dmz.synchro.umontreal.ca
  cups http://localhost:631
  fb https://www.facebook.com/philippe.gabriel99
  ld https://www.linkedin.com/in/philippe-gabriel-52b945149/
  sb https://www.scotiaonline.scotiabank.com/online/views/accounts/summary/summaryStandard.bns?SBL=all&convid=60975
  ctfs https://www.ctfs.com/content/dash/en/private/Summary.html
  naruto https://www18.naruspot.tv/
  mal https://myanimelist.net/animelist/Ramenphile

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "rust-adblock"
  "qutebrowser"

#+end_src

** Default Applications

#+begin_src conf :tangle ~/.config/mimeapps.list

  [Default Applications]
  text/html=qutebrowser.desktop
  x-scheme-handler/http=qutebrowser.desktop
  x-scheme-handler/https=qutebrowser.desktop
  x-scheme-handler/about=qutebrowser.desktop
  x-scheme-handler/unknown=qutebrowser.desktop
  application/xhtml+xml=qutebrowser.desktop

  [Added Associations]
  x-scheme-handler/http=qutebrowser.desktop;
  text/html=qutebrowser.desktop;
  application/xhtml+xml=qutebrowser.desktop;
  x-scheme-handler/https=qutebrowser.desktop;

#+end_src

** Desktop Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "compton"
  "gucharmap"
  "fontmanager"
  "brightnessctl"
  "xdg-utils"      ;; For xdg-open, etc
  "xdg-dbus-proxy" ;; For Flatpak
  "gtk+:bin"       ;; For gtk-launch
  "glib:bin"       ;; For gio-launch-desktop
  "shared-mime-info"
  "htop"

#+end_src

** Disk Mounting

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "udiskie"

#+end_src

** Flatpak

Applications to install which are otherwise difficult to install Guix systems.
    
#+begin_src sh

  flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  flatpak remote-add --user --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo
  flatpak install --user flathub com.spotify.Client
  flatpak install --user flathub com.valvesoftware.Steam
  flatpak install --user flathub com.microsoft.Teams
  flatpak install --user flathub com.discordapp.Discord
  flatpak install --user flathub-beta com.obsproject.Studio

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "flatpak"

#+end_src

** Image Viewers and Editors

*Wacom tablet scripts*

#+begin_src sh :tangle ~/bin/wacom-laptop :shebang #!/bin/sh

  xinput map-to-output "Wacom Intuos PT S Pen stylus" eDP-1
  xinput map-to-output "Wacom Intuos PT S Pen eraser" eDP-1

  echo "Mapped to laptop!"

#+end_src

#+begin_src sh :tangle ~/bin/wacom-screen :shebang #!/bin/sh

  xinput map-to-output "Wacom Intuos PT S Pen stylus" HDMI-1
  xinput map-to-output "Wacom Intuos PT S Pen eraser" HDMI-1

  echo "Mapped to HDMI!"

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "feh"
  "imagemagick"
  "gimp"
  "xournalpp"

#+end_src

** Media Players

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "mpv"
  "youtube-dl"
  "gstreamer"
  "gst-plugins-base"
  "gst-plugins-good"
  "gst-plugins-bad"
  "gst-plugins-ugly"
  "gst-libav"
  "intel-vaapi-driver"
  "libva-utils"

#+end_src

** Network

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "net-tools"

#+end_src

** Password Management

*Password sync script*

#+begin_src sh :tangle ~/bin/sync-passwords :shebang #!/bin/sh

  pass git pull
  pass git push

  notify-send -i "emblem-synchronizing" "Passwords synced!"

#+end_src

*Scheduling with mcron*

#+begin_src scheme :tangle ~/.config/cron/pass-sync.guile

  (job
   '(next-hour (range 0 24 4))
   "~/bin/sync-passwords")

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "password-store"
  "mcron"

#+end_src

** Printing

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "system-config-printer"

#+end_src

** System Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "openssh"
  "sysfsutils"
  "zip"
  "unzip"
  "trash-cli"

#+end_src

** Xorg Tools

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "xev"
  "xset"
  "xrdb"
  "xhost"
  "xmodmap"
  "setxkbmap"
  "xrandr"
  "arandr"
  "xss-lock"
  "libinput"
  "xinput"

#+end_src

* Desktop Profile

#+begin_src emacs-lisp

  (provide 'pg-desktop)

#+end_src

#+begin_src scheme :tangle ~/.config/guix/manifests/desktop.scm :noweb yes

    (specifications->manifest
     '(
       <<packages>>
       ))

#+end_src
