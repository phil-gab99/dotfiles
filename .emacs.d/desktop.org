#+title: Emacs Desktop Environment
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/desktop.el

* Window Management

Various settings and packages to alllow emacs to act as the operating system.

** Package | exwm

Many useful keybindings to know:

Managing windows:
- ~M-&~ - Launch a process asy/nchronously
- ~s-t~ - Binding from EXWM to launch without popup
- ~exwm-floating-toggle-floating~ - Floating windows
- ~exwm-layout-toggle-fullscreen~ - Fullscreen
- ~s-SPC~ - Select an app to open

Workspaces:
- ~s-(0-9)~ - Switch to numbered workspace (~~~ can also be used instead of ~0~)
- ~s-w~ - Workspace selector
- ~C-c RET~ - Move window to numbered workspace (EXWM windows are attached to a single workspace)
- ~C-x B~ - Move to any buffer across all workspaces

#+begin_src emacs-lisp

  ;; Sets buffer names to be app names
  (defun pg/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (defun pg/set-wallpaper ()
    (interactive)
    (start-process-shell-command "feh" nil "feh --bg-scale ~/Pictures/ferdinand-stohr-NFs6dRTBgaM-unsplash.jpg"))
    ;; (start-process-shell-command "feh" nil "feh --bg-scale /usr/share/backgrounds/System76-Fractal_Mountains-by_Kate_Hazen_of_System76.png"))

  ;; Some configurations to do per application
  (defun pg/configure-window-by-class ()
    (pcase exwm-class-name
      ("biblioApp.App" (exwm-layout-hide-mode-line) (exwm-floating-toggle-floating))
      ("mpv" (exwm-layout-hide-mode-line))
      ("PPSSPPSDL" (exwm-layout-hide-mode-line))
      ("edu-mit-csail-sdg-alloy4whole-Alloy" (exwm-layout-hide-mode-line))
      ("vlc" (exwm-layout-hide-mode-line))))

  ;; Runs a process in the background
  (defun pg/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  ;; For managing multiple displays
  (defun pg/update-displays ()
    (interactive)
    (pg/run-in-background "autorandr --change --force")
    ;; Change this with respect to the different screen configuration
    ;; Check arandr for display names
    (setq exwm-randr-workspace-monitor-plist
          (pcase (shell-command-to-string "autorandr --detected")
            ("work\n" '(5 "HDMI-1"))
            ("jclab\n" '(5 "HDMI-1"))
            ("aa-1140\n" '(5 "HDMI-1"))
            ("rg-e310\n" '(5 "HDMI-1"))
            ("jc-s139\n" '(5 "HDMI-1"))
            ("jc-s1139\n" '(5 "DP-1"))
            ("entertainment\n" '(5 "HDMI-1"))))
    (pg/set-wallpaper)
    (message "Display config: %s"
             (string-trim (shell-command-to-string "autorandr --current"))))

  ;; Some initializations
  (defun pg/exwm-startup ()
    (pg/start-panel)
    (pg/run-in-background "dunst")
    (pg/run-in-background "nm-applet")
    (pg/run-in-background "pasystray")
    (pg/run-in-background "blueman-applet"))

  (straight-use-package 'exwm)
  (require 'exwm-config)
  (require 'exwm-randr)
  (use-package exwm
    :straight t
    :custom
    (exwm-manage-configurations
     '(((string-equal exwm-class-name "Nyxt")
        char-mode t)))
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 6)

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'pg/exwm-update-class)

    ;; When exwm starts up
    (add-hook 'exwm-init-hook #'pg/exwm-startup)

    ;; Configure launching of some x windows
    (add-hook 'exwm-manage-finish-hook #'pg/configure-window-by-class)

    ;; Configure some keybindings
    (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")

    ;; Display all buffers across all workspaces when switching
    (setq exwm-workspace-show-all-buffers t)


    ;; Smart display adaptation
    (add-hook 'exwm-randr-screen-change-hook #'pg/update-displays)
    (pg/update-displays)

    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
          '(?\C-x
            ?\C-g
            ?\C-h
            ?\M-x
            ?\M-`
            ?\M-&
            ?\M-:
            ?\C-\s ;; C-SPC
            M-tab))

    ;; C-q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
          `(([?\s-r] . exwm-reset)

            ;; Switch between char and line mode
            ([?\s-s] . exwm-input-toggle-keyboard)

            ;; Launch applications via shell command
            ([?\s-t] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))

            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)

            ;; Bind the tilde key to workspace 0 when switching/creating
            ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

            ;; 's-N': Switch to certain workspace with Super plus a number key (0 - 9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))))

    (exwm-input-set-key (kbd "s-SPC") 'app-launcher-run-app)
    (exwm-randr-enable)
    (exwm-enable)
    :bind (("C-x B" . exwm-workspace-switch-to-buffer)))


#+end_src

** Package | desktop-environment

Allows for some of the keybindings to use while in exwm.

#+begin_src emacs-lisp

  (use-package desktop-environment
    :after exwm
    :diminish desktop-environment-mode
    :config
    (desktop-environment-mode)
    (unbind-key "<XF86AudioPlay>" 'desktop-environment-mode-map)
    :custom
    (desktop-environment-volume-get-command "amixer -D pulse get Master + 1")
    (desktop-environment-volume-set-command "amixer -D pulse set Master 1+ %s")
    (desktop-environment-volume-toggle-command "amixer -D pulse set Master 1+ toggle")
    (desktop-environment-brightness-normal-increment "5%+")
    (desktop-environment-brightness-normal-decrement "5%-"))

#+end_src

** Desktop environment

It is necessary to run the following command for creating a sym link for the below file:
~sudo ln -f ~/.emacs.d/exwm/EXWM.desktop /usr/share/xsessions/EXWM.desktop~

#+begin_src conf :tangle ~/.emacs.d/exwm/EXWM.desktop :mkdirp yes

  [Desktop Entry]
  Name=EXWM
  Comment=Emacs Window Manager
  Exec=sh /home/phil-gab99/.emacs.d/exwm/start-exwm.sh
  TryExec=sh
  Type=Application
  X-LightDM-DesktopName=exwm
  DesktopNames=exwm

#+end_src

** Launcher script

Script invoked by ~EXWM.desktop~ to start emacs and load the desktop environment configuration.

#+begin_src shell :tangle ~/.emacs.d/exwm/start-exwm.sh :mkdirp yes :shebang #!/bin/bash

  xset dpms 0 0 0 && xset -dpms && xset s off && xset s noblank # Prevent screen blank

  xinput set-prop "PNP0C50:00 04F3:311D Touchpad" "libinput Tapping Enabled" 1
  xinput set-prop "ETPS/2 Elantech Touchpad" "libinput Tapping Enabled" 1
  xinput set-prop "PNP0C50:00 04F3:311D Touchpad" "libinput Natural Scrolling Enabled" 1
  xinput set-prop "ETPS/2 Elantech Touchpad" "libinput Natural Scrolling Enabled" 1

  xinput map-to-output "Wacom Intuos PT S Pen stylus" eDP-1     # Maps stylus to laptop monitor
  xinput map-to-output "Wacom Intuos PT S Pen eraser" eDP-1     # Maps eraser to laptop monitor

  start_daemons () {
      eval "$(gnome-keyring-daemon --start --components=ssh)"
      compton &
      gnome-keyring-daemon --start --components=pkcs11 &
      gnome-keyring-daemon --start --components=secrets &
      /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 &
      export SSH_AUTH_SOCK
  }

  exwm () {
      export EXWM=1
      # Disable access control for the current user.
      # xhost "+SI:localuser:$USER"

      # Make Java applications aware this is a non-reparenting window manager.
      export _JAVA_AWT_WM_NONREPARENTING=1

      # Set default cursor.
      xsetroot -cursor_name left_ptr

      # Set keyboard repeat rate.
      # xset r rate 200 60

      # Finally start Emacs
      # exec dbus-launch emacs --eval "(lerax-exwm-start nil t)"
      exec dbus-launch --exit-with-session emacs -mm -debug-init -l ~/.emacs.d/desktop.el
  }

  start_daemons
  exwm 

#+end_src

** Keyboard configuration

Remapping some keys to work inside of the desktop environment

#+begin_src sh :tangle ~/.emacs.d/exwm/Xmodmap :mkdirp yes

  clear lock
  clear control
  keycode 66 = Control_L
  add control = Control_L
  keycode 105 = Multi_key

#+end_src

** Multiple monitors

In order to setup exwm for multiple monitors, the ~arandr~ and ~autorandr~ applications can come in handy. Some useful commands to know:
- ~autorandr --save profile~ - Saves the current display setup under the name profile
- ~autorandr --change~ - Changes to the appopriate profile with respect to the current display setup; the profile name can be explicitly given to change to it
- ~autorandr~ - Displays the created profiles

** Polybar

Some utility functions.

#+begin_src emacs-lisp

  (defvar pg/polybar-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun pg/kill-panel ()
    (interactive)
    (when pg/polybar-process
      (ignore-errors
        (kill-process pg/polybar-process)))
    (setq pg/polybar-process nil))

  (defun pg/start-panel ()
    (interactive)
    (pg/kill-panel)
    (setq pg/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

  (defun pg/send-polybar-hook (module-name hook-index)
      (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun pg/exwm-workspace-current-index ()
      (concat "WS: " (int-to-string exwm-workspace-current-index)))

  (defun pg/send-polybar-exwm-workspace ()
    (pg/send-polybar-hook "exwm-workspace" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'pg/send-polybar-exwm-workspace)

#+end_src

Below is the config file with the various parameters.

#+begin_src conf :tangle ~/.config/polybar/config :mkdirp yes

  ; Docs: https://github.com/polybar/polybar
  ;==========================================================

  [settings]
  screenchange-reload = true

  [global/wm]
  margin-top = 0
  margin-bottom = 0

  [colors]
  background = #f0232635
  background-alt = #576075
  foreground = #A6Accd
  foreground-alt = #555
  primary = #ffb52a
  secondary = #e60053
  alert = #bd2c40
  underline-1 = #c792ea

  [bar/panel]
  width = 100%
  height = 30
  offset-x = 0
  offset-y = 0
  fixed-center = true
  enable-ipc = true

  background = ${colors.background}
  foreground = ${colors.foreground}

  line-size = 2
  line-color = #f00

  border-size = 0
  border-color = #00000000

  padding-top = 15
  padding-left = 0
  padding-right = 1

  module-margin = 1
  font-0 = "Cantarell:size=13:weight=bold;1"
  font-1 = "Font Awesome:size=14;2"
  font-2 = "Material Icons:size=14;5"
  font-3 = "Fira Mono:size=12;-3"

  modules-left = exwm-workspace cpu memory temperature
  modules-right = battery backlight date

  tray-position = right
  tray-padding = 2
  tray-maxsize = 28
  ; tray-background = #ffffff

  cursor-click = pointer
  cursor-scroll = ns-resize


  [module/exwm-workspace]
  type = custom/ipc
  hook-0 = emacsclient -e "(pg/exwm-workspace-current-index)" | sed -e 's/^"//' -e 's/"$//'
  initial = 1
  ;format-underline = ${colors.underline-1}
  format-padding = 1

  [module/memory]
  type = internal/memory
  interval = 1
  format = |  <label> RAM <bar-used>
  label = %gb_used% / %gb_total%
  bar-used-indicator =
  bar-used-width = 10
  bar-used-foreground-0 = #55aa55
  bar-used-foreground-1 = #557755
  bar-used-foreground-2 = #f5a70a
  bar-used-foreground-3 = #ff5555
  bar-used-fill = ▐
  bar-used-empty = ▐
  bar-used-empty-foreground = #444444

  [module/cpu]
  type = internal/cpu
  interval = 2
  format = | <label> CPU <ramp-coreload>
  ;format-underline = ${colors.underline-1}
  ; click-left = emacsclient -e "(proced)"
  label =  %percentage%%
  ramp-coreload-spacing = 0
  ;ramp-load-0-foreground = ${colors.foreground-alt}
  ramp-coreload-0 = ▁
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇
  ramp-coreload-7 = █

  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  interval = 0.5
  warn-temperature = 60
  format =  |  <ramp> <label>
  ;format-underline = ${colors.underline-1}
  format-warn = <ramp> <label-warn>
  ;format-warn-underline = ${self.format-underline}
  label = %temperature-c%
  label-warn = %temperature-c%!
  label-warn-foreground = ${colors.secondary}
  ramp-0 = 
  ramp-1 = 
  ramp-2 = 
  ramp-3 = 
  ramp-4 = 

  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = ADP1
  full-at = 100
  time-format = %-l:%M
  label-charging = %percentage%% / %time%
  format-charging = <animation-charging> <label-charging>
  ;format-charging-underline = ${colors.underline-1}
  label-discharging = %percentage%% / %time%
  format-discharging = <ramp-capacity> <label-discharging>
  ;format-discharging-underline = ${self.format-charging-underline}
  format-full = <ramp-capacity> <label-full>
  ;format-full-underline = ${self.format-charging-underline}
  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 
  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-framerate = 750

  [module/backlight]
  type = internal/backlight
  card = intel_backlight
  format = | <ramp> <label> |
  label = %percentage%%
  ramp-0 = 🌕
  ramp-1 = 🌔
  ramp-2 = 🌓
  ramp-3 = 🌒
  ramp-4 = 🌑

  [module/date]
  type = internal/date
  interval = 1.0
  date = "%F %a %b %d"
  time = %I:%M:%S %p
  format = <label>
  ;format-prefix-foreground = ${colors.foreground-alt}
  ;format-underline = ${colors.underline-1}
  label =  %date% |  %time%

#+end_src

** Dunst

Some utility functions:

- Below are the available ~dunstctl~ commands. Usage: ~dunstctl <command> [parameters]~

| Commands                           | Description                                                                                     |
|------------------------------------+-------------------------------------------------------------------------------------------------|
| ~action~                             | Perform the default action, or open the contexte meny of the notification at the given position |
| ~close~                              | Close the last notification                                                                     |
| ~close-all~                          | Close all notifications                                                                         |
| ~context~                            | Open context menu                                                                               |
| ~history-pop~                        | Pop one notification from history                                                               |
| ~is-paused~                          | Check if dunst is running or paused                                                             |
| ~set-paused [true : false : toggle]~ | Set the pause status                                                                            |
| ~debug~                              | Print debugging information                                                                     |
| ~help~                               | Show this help message                                                                          |

#+begin_src emacs-lisp

  (defun pg/dunstctl (cmd)
    (start-process-shell-command "dunstctl" nil (concat "dunstctl " cmd)))

  (exwm-input-set-key (kbd "s-n") (lambda () (interactive) (pg/dunstctl "history-pop")))
  (exwm-input-set-key (kbd "s-c") (lambda () (interactive) (pg/dunstctl "close")))

  (defun pg/disable-desktop-notifications ()
    (interactive)
    (start-process-shell-command "notify-send" nil "notify-send \"DUNST_COMMAND_PAUSE\""))

  (defun pg/enable-desktop-notifications ()
    (interactive)
    (start-process-shell-command "notify-send" nil "notify-send \"DUNST_COMMAND_RESUME\""))

#+end_src

For desktop notifications

#+begin_src conf :tangle ~/.config/dunst/dunstrc :mkdirp yes

    [global]
    ### Display ###
    monitor = 0

    # The geometry of the window:
    #   [{width}]x{height}[+/-{x}+/-{y}]
    geometry = "250x10-10+50"

    # Show how many messages are currently hidden (because of geometry).
    indicate_hidden = yes

    # Shrink window if it's smaller than the width.  Will be ignored if
    # width is 0.
    shrink = no

    # The transparency of the window.  Range: [0; 100].
    transparency = 10

    # The height of the entire notification.  If the height is smaller
    # than the font height and padding combined, it will be raised
    # to the font height and padding.
    notification_height = 0

    # Draw a line of "separator_height" pixel height between two
    # notifications.
    # Set to 0 to disable.
    separator_height = 1
    separator_color = frame

    # Padding between text and separator.
    padding = 8

    # Horizontal padding.
    horizontal_padding = 8

    # Defines width in pixels of frame around the notification window.
    # Set to 0 to disable.
    frame_width = 2

    # Defines color of the frame around the notification window.
    frame_color = "#89aaeb"

    # Sort messages by urgency.
    sort = yes

    # Don't remove messages, if the user is idle (no mouse or keyboard input)
    # for longer than idle_threshold seconds.
    idle_threshold = 60

    ### Text ###

    font = Cantarell 16

    # The spacing between lines.  If the height is smaller than the
    # font height, it will get raised to the font height.
    line_height = 0
    markup = full

    # The format of the message.  Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    #   %n  progress value if set without any extra characters
    #   %%  Literal %
    # Markup is allowed
    format = "<b>%s</b>\n%b"

    # Alignment of message text.
    # Possible values are "left", "center" and "right".
    alignment = left

    # Show age of message if message is older than show_age_threshold
    # seconds.
    # Set to -1 to disable.
    show_age_threshold = 60

    # Split notifications into multiple lines if they don't fit into
    # geometry.
    word_wrap = yes

    # When word_wrap is set to no, specify where to make an ellipsis in long lines.
    # Possible values are "start", "middle" and "end".
    ellipsize = middle

    # Ignore newlines '\n' in notifications.
    ignore_newline = no

    # Stack together notifications with the same content
    stack_duplicates = true

    # Hide the count of stacked notifications with the same content
    hide_duplicate_count = false

    # Display indicators for URLs (U) and actions (A).
    show_indicators = yes

    ### Icons ###

    # Align icons left/right/off
    icon_position = left

    # Scale larger icons down to this size, set to 0 to disable
    max_icon_size = 88

    # Paths to default icons.
    # icon_path = ~/.icons/50x50/

    ### History ###

    # Should a notification popped up from history be sticky or timeout
    # as if it would normally do.
    sticky_history = no

    # Maximum amount of notifications kept in history
    history_length = 20

    ### Misc/Advanced ###

    # Browser for opening urls in context menu.
    browser = qutebrowser

    # Always run rule-defined scripts, even if the notification is suppressed
    always_run_script = true

    # Define the title of the windows spawned by dunst
    title = Dunst

    # Define the class of the windows spawned by dunst
    class = Dunst

    startup_notification = false
    verbosity = mesg

    # Define the corner radius of the notification window
    # in pixel size. If the radius is 0, you have no rounded
    # corners.
    # The radius will be automatically lowered if it exceeds half of the
    # notification height to avoid clipping text and/or icons.
    corner_radius = 4

    mouse_left_click = close_current
    mouse_middle_click = do_action
    mouse_right_click = close_all

    # Experimental features that may or may not work correctly. Do not expect them
    # to have a consistent behaviour across releases.
    [experimental]
    # Calculate the dpi to use on a per-monitor basis.
    # If this setting is enabled the Xft.dpi value will be ignored and instead
    # dunst will attempt to calculate an appropriate dpi value for each monitor
    # using the resolution and physical size. This might be useful in setups
    # where there are multiple screens with very different dpi values.
    per_monitor_dpi = false

    [shortcuts]

    # Shortcuts are specified as [modifier+][modifier+]...key
    # Available modifiers are "ctrl", "mod1" (the alt-key), "mod2",
    # "mod3" and "mod4" (windows-key).
    # Xev might be helpful to find names for keys.

    # Close notification.
    # close = ctrl+space

    # Close all notifications.
    # close_all = ctrl+shift+space

    # Redisplay last message(s).
    # On the US keyboard layout "grave" is normally above TAB and left
    # of "1". Make sure this key actually exists on your keyboard layout,
    # e.g. check output of 'xmodmap -pke'
    # history = mod4+n

    # Context menu.
    # context = ctrl+shift+period

    [urgency_low]
    # IMPORTANT: colors have to be defined in quotation marks.
    # Otherwise the "#" and following would be interpreted as a comment.
    background = "#11bdbd"
    foreground = "#ffffff"
    timeout = 10
    # Icon for notifications with low urgency, uncomment to enable
    #icon = /path/to/icon

    [urgency_normal]
    background = "#1c1f26"
    foreground = "#ffffff"
    timeout = 10
    # Icon for notifications with normal urgency, uncomment to enable
    #icon = /path/to/icon

    [urgency_critical]
    background = "#900000"
    foreground = "#ffffff"
    frame_color = "#ff0000"
    timeout = 10
    # Icon for notifications with critical urgency, uncomment to enable
    #icon = /path/to/icon

#+end_src
