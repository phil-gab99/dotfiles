#+TITLE: System Configuration with Guix
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)

* Channels

#+begin_src scheme :tangle ~/.config/guix/base-channels.scm

  (list (channel
	 (name 'flat)
	 (url "https://github.com/flatwhatson/guix-channel.git")
	 (introduction
	  (make-channel-introduction
	   "33f86a4b48205c0dc19d7c036c85393f0766f806"
	   (openpgp-fingerprint
	    "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
	(channel
	 (name 'rde)
	 (url "https://git.sr.ht/~abcdw/rde")
	 (introduction
	  (make-channel-introduction
	   "257cebd587b66e4d865b3537a9a88cccd7107c95"
	   (openpgp-fingerprint
	    "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))
	(channel
	 (name 'nonguix)
	 (url "https://gitlab.com/nonguix/nonguix"))
	(channel
	 (name 'guix)
	 (url "https://git.savannah.gnu.org/git/guix.git")
	 (introduction
	  (make-channel-introduction
	   "9edb3f66fd807b096b48283debdcddccfea34bad"
	   (openpgp-fingerprint
	    "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))

#+end_src

* Systems

** Base Configuration

This base configuration is shared between all of the machines I manage with Guix.

#+begin_src scheme :tangle ~/.config/guix/systems/base-system.scm

  (define-module (base-system)
    #:use-module (gnu)
    #:use-module (srfi srfi-1)
    #:use-module (gnu system nss)
    #:use-module (gnu services pm)
    #:use-module (gnu services cups)
    #:use-module (gnu services desktop)
    #:use-module (gnu services docker)
    #:use-module (gnu services networking)
    #:use-module (gnu services virtualization)
    #:use-module (gnu packages wm)
    #:use-module (gnu packages vim)
    #:use-module (gnu packages gtk)
    #:use-module (gnu packages xorg)
    #:use-module (gnu packages emacs)
    #:use-module (gnu packages file-systems)
    #:use-module (gnu packages gnome)
    #:use-module (gnu packages mtools)
    #:use-module (gnu packages linux)
    #:use-module (gnu packages audio)
    #:use-module (gnu packages gnuzilla)
    #:use-module (gnu packages pulseaudio)
    #:use-module (gnu packages web-browsers)
    #:use-module (gnu packages version-control)
    #:use-module (gnu packages package-management)
    #:use-module (nongnu packages linux)
    #:use-module (nongnu system linux-initrd))

  (use-service-modules nix)
  (use-service-modules desktop xorg)
  (use-package-modules certs)
  (use-package-modules shells)

#+end_src

Add a ~udev~ rule to enable members of the ~video~ group to control screen brightness.

#+begin_src scheme :tangle ~/.config/guix/systems/base-system.scm

  ;; Allow members of the "video" group to change the screen brightness.
;  (define %backlight-udev-rule
;    (udev-rule
;     "90-backlight.rules"
;     (string-append "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
;		    "RUN+=\"/run/current-system/profile/bin/chgrp video /sys/class/backlight/%k/brightness\""
;		    "\n"
;		    "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
;		    "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/backlight/%k/brightness\"")))

#+end_src

Override the default ~%desktop-services~ to add the ~udev~ backlight configuration and include OpenVPN in the list of NetworkManager plugins.

#+begin_src scheme :tangle ~/.config/guix/systems/base-system.scm

;  (define %my-desktop-services
;    (modify-services %desktop-services
;		     (elogind-service-type config =>
;					   (elogind-configuration (inherit config)
;								  (handle-lid-switch-external-power 'suspend)))
;		     (udev-service-type config =>
;					(udev-configuration (inherit config)
;							    (rules (cons %backlight-udev-rule
;									 (udev-configuration-rules config)))))
;		     (network-manager-service-type config =>
;						   (network-manager-configuration (inherit config)
;										  (vpn-plugins (list network-manager-openvpn))))))

#+end_src

Use the ~libinput~ driver for all input devices since it's a bit more modern than the default.

#+begin_src scheme :tangle ~/.config/guix/systems/base-system.scm

  (define %xorg-libinput-config
    "Section \"InputClass\"
    Identifier \"Touchpads\"
    Driver \"libinput\"
    MatchDevicePath \"/dev/input/event*\"
    MatchIsTouchpad \"on\"

    Option \"Tapping\" \"on\"
    Option \"TappingDrag\" \"on\"
    Option \"DisableWhileTyping\" \"on\"
    Option \"MiddleEmulation\" \"on\"
    Option \"ScrollMethod\" \"twofinger\"
  EndSection
  Section \"InputClass\"
    Identifier \"Keyboards\"
    Driver \"libinput\"
    MatchDevicePath \"/dev/input/event*\"
    MatchIsKeyboard \"on\"
  EndSection
  ")

#+end_src

Define the ~base-operating-system~ which will be inherited by all machine configurations. TODO

#+begin_src scheme

  (define-public base-operating-system
    (operating-system
     (host-name "TMP")
     (timezone "America/Toronto")
     (locale "en_CA.utf8")
     (keyboard-layout (keyboard-layout "us"))

     ;; Use non-free Linux and firmware
     (kernel linux)
     (firmware (list linux-firmware))

     ;; Use the UEFI variant of GRUB with the EFI System
     ;; Partition mounted on /boot/efi.
     (bootloader (bootloader-configuration
                  (bootloader grub-efi-bootloader)
                  (target "/boot/efi")
                  (keyboard-layout keyboard-layout)))

     ;; Swap space to be overriden
     (swap-devices
      (list (swap-space (target "none"))))

     ;; Guix doesn't like it when there isn't a `file-systems`
     ;; entry, so add one that is meant to be overridden
     (file-systems
      (cons* (file-system
              (mount-point "/tmp")
              (device "none")
              (type "tmpfs")
              (check? #f))
             %base-file-systems))

     (users (cons (user-account
                   (name "phil-gab99")
                   (comment "Philippe Gabriel")
                   (group "users")
                   (home-directory "/home/phil-gab99")
                   (supplementary-groups '("wheel"     ;; sudo
                                           "netdev"    ;; network devices
                                           "kvm"
                                           "tty"
                                           "input"
                                           "docker"
                                           "realtime"  ;; Enable realtime sc heduling
                                           "lp"        ;; control bluetooth devices
                                           "audio"     ;; control audio devices
                                           "video")))  ;; control video devices
                  %base-user-accounts))

     ;; Install bare-minimum system packages
     (packages (append (list
                        git
                        ntfs-3g
                        exfat-utils
                        fuse-exfat
                        vim
                        emacs
                        emacs-exwm
                        emacs-desktop-environment
                        xterm
                        bluez
                        bluez-alsa
                        pulseaudio
                        tlp
                        xf86-input-libinput
                        nss-certs     ;; for HTTPS access
                        gvfs)         ;; for user mounts
                       %base-packages))

     ;; Use the "desktop" services, which include the X11 log-in service,
     ;; networking with NetworkManager, and more
     (services
      (append
       (list (service gnome-desktop-service-type)
             (service openssh-service-type)
             (service tor-service-type)
             (service cups-service-type
                      (cups-configuration
                       (web-interface? #t)
                       (extensions
                        (list cups-filters))))
             (set-xorg-configuration
              (xorg-configuration
               (keyboard-layout keyboard-layout))))
       %desktop-services))

#+end_src

** Machines

*** TODO s76-laptop

Tangle to ~~/.config/guix/systems/s76-laptop.scm~
    
#+begin_src scheme

  (define-module (s76-laptop)
    #:use-module (base-system)
    #:use-module (gnu))

  (operating-system
   (inherit base-operating-system)
   (host-name "s76-laptop")

                                          ; (mapped-devices
                                          ;  (list (mapped-device
                                          ;         (source (uuid "039d3ff8-0f90-40bf-89d2-4b2454ada6df"))
                                          ;         (target "system-root")
                                          ;         (type luks-device-mapping))))

                                          ; (file-systems (cons*
                                          ;                (file-system
                                          ;                 (device (file-system-label "zerocool"))
                                          ;                 (mount-point "/")
                                          ;                 (type "ext4")
                                          ;                 (dependencies mapped-devices))
                                          ;                (file-system
                                          ;                 (device "/dev/nvme0n1p1")
                                          ;                 (mount-point "/boot/efi")
                                          ;                 (type "vfat"))
                                          ;                %base-file-systems)))

#+end_src

* Profile Management

Profiles get installed under the ~~/.guix-extra-profiles~ path and sourced by ~~/.profile~ when logging in.

A couple of shell scripts for managing the profiles:

** List Available profiles

This script simply lists the profiles available to activate/update:

#+begin_src sh

  list-profiles

#+end_src

#+begin_src sh :tangle ~/bin/list-profiles :shebang #!/bin/sh

  echo -e "\nAvailable profiles are:\n"
  for profile in "$HOME/.config/guix/manifests/*.scm"; do
      profileName=$(basename -s .scm $profile)
      echo "$profileName"
  done

  echo -e "\n\nYour active profiles are:\n"
  profiles=$(guix package --list-profiles)
  for active in $profiles; do
      base=$(basename $active)
      if [ "$base" != "current" ] && [ "$base" != ".guix-profile" ]; then
          echo "$base"
      fi
  done

#+end_src

** Activating Profiles

This script accepts a space-separated list of manifest file names (without extension) under the ~~/.config/guix/manifests~ folder and then installs those profiles for the first time.
For example:

#+begin_src sh

  activate-profiles desktop emacs

#+end_src

#+begin_src sh :tangle ~/bin/activate-profiles :shebang #!/bin/sh

  GREEN='\033[1;32m'
  RED='\033[1;30m'
  NC='\033[0m'
  GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles

  profiles=$*
  if [[ $# -eq 0 ]]; then
      profiles="$HOME/.config/guix/manifests/*.scm";
  fi

  for profile in $profiles; do
      # Remove the path and file extension, if any
      profileName=$(basename $profile)
      profileName="${profileName%.*}"

      profilePath="$GUIX_EXTRA_PROFILES/$profileName"

      manifestPath=$HOME/.config/guix/manifests/$profileName.scm

    if [ -f $manifestPath ]; then
      echo
      echo -e "${GREEN}Activating profile:" $manifestPath "${NC}"
      echo

      mkdir -p $profilePath
      guix package --manifest=$manifestPath --profile="$profilePath/$profileName"

      # Source the new profile
      GUIX_PROFILE="$profilePath/$profileName"
      if [ -f $GUIX_PROFILE/etc/profile ]; then
          . "$GUIX_PROFILE"/etc/profile
      else
          echo -e "${RED}Couldn't find profile:" $GUIX_PROFILE/etc/profile "${NC}"
      fi
    else
      echo "No profile found at path" $profilePath
    fi
  done

#+end_src

** Updating Profiles

This script accepts a space-separated list of manifest file names (without extension) under the ~~/.config/guix/manifests~ folder and then installs any updates to the packages contained within them.
If no profile names are provided, it walks the list of profile directories under ~~/.guix-extra-profiles~ and updates each one of them.

#+begin_src sh

  update-profiles emacs

#+end_src

#+begin_src sh :tangle ~/bin/update-profiles :shebang #!/bin/sh

  GREEN='\033[1;32m'
  NC='\033[0m'
  GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles

  profiles=$*
  if [[ $# -eq 0 ]]; then
      profiles="$GUIX_EXTRA_PROFILES/*";
  fi

  for profile in $profiles; do
    profileName=$(basename $profile)
    profilePath=$GUIX_EXTRA_PROFILES/$profileName

    echo
    echo -e "${GREEN}Updating profile:" $profilePath "${NC}"
    echo

    guix package --profile="$profilePath/$profileName" --manifest="$HOME/.config/guix/manifests/$profileName.scm"
  done

#+end_src

** Updating Channels

This script makes it easy to update all channels to the latest commit based on an original channel file (see the Channels section at the top of this document).

#+begin_src sh

  update-channels

#+end_src

#+begin_src sh :tangle ~/bin/update-channels :shebang #!/bin/sh

  guix pull --channels=$HOME/.config/guix/base-channels.scm
  guix describe --format=channels > ~/.config/guix/channels.scm

#+end_src

* Nix Package Manager

#+begin_src conf :tangle ~/.nix-channels

  https://nixos.org/channels/nixpkgs-unstable nixpkgs

#+end_src

The channel needs to be updated before any packages can be installed:

#+begin_src sh

  nix-channel --update

#+end_src

Installing packages:

#+begin_src sh

  nix-env -i nodejs dotnet-sdk gh hledger
  nix-env -iA nixpkgs.nodejs-12_x # For a specific version

#+end_src
