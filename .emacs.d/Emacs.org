#+title: Emacs configuration
#+author: Philippe Gabriel
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

Below is a sectioned configuration of emacs. Each code blocks gets written out to the ~~/.emacs~ config file.

* Startup

** Performance Measurements

Here we check reduce threshold for garbage collector to improve performanceand check for the startup time.

#+begin_src emacs-lisp
  
  (setq gc-cons-threshold (* 50 1000 1000)) ; Sets garbage collection threshold high enough

#+end_src

** Native Compilation

Some settings specific to the ~emacs-native-comp~ version of emacs

#+begin_src emacs-lisp

;;  (setq native-comp-async-report-warnings-errors nil)                                           ; Silence compiler warnings
;;  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory)) ; Set directory for cache storage

#+end_src

** Server Initialization

Starting a server for displaying polybar info

#+begin_src emacs-lisp

  (server-start)

#+end_src

** Package Initialization

Some initializations are first set up.

#+begin_src emacs-lisp

  ;; (require 'package) ; Initialize package sources

  ;; (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  ;;                          ("org" . "https://orgmode.org/elpa/")
  ;;                          ("elpa" . "https://elpa.gnu.org/packages/")))
  ;; (package-initialize)
  ;; (setq package-enable-at-startup nil)
  ;; (unless package-archive-contents
  ;;   (package-refresh-contents))

  ;; (unless (package-installed-p 'use-package) 
  ;;   (package-install 'use-package))

  ;; (require 'use-package)
  ;; (setq use-package-always-ensure t)

  (unless (featurep 'straight)
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))

  ;;(straight-use-package 'use-package)
  ;;(setq straight-use-package-by-default t)
  ;;(setq use-package-verbose t) For optimizing performance

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-use-package"

#+end_src

** System settings

Check whether using emacs from phone or laptop for applying appropriate settings

#+begin_src emacs-lisp

  (push "~/.emacs.d/lisp" load-path)

  (require 'subr-x)
  (setq pg/is-termux
	(string-suffix-p "Android" (string-trim (shell-command-to-string "uname -a"))))

  (setq pg/exwm-enabled (and (not pg/is-termux)
			     (eq window-system 'x)
			     (seq-contains command-line-args "--use-exwm")))

  (when pg/exwm-enabled (require 'pg-desktop))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-exwm"
  "emacs-desktop-environment"

#+end_src

* Basic UI Configuration

** UI settings

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)                                   ; Disable startup message
  (setq scroll-conservatively 1000)                                  ; Slow scrolling
  (unless pg/is-termux
    (scroll-bar-mode 0)                                                ; Disable visible scrollbar
    (tool-bar-mode 0)                                                  ; Disable toolbar
    (tooltip-mode 0))

  (menu-bar-mode 0)                                                  ; Disable menu bar
  (setq split-width-threshold 185)                                   ; Width for splitting
  (global-set-key (kbd "M-<tab>") 'other-window)                     ; Bind alt tab to buffer switching

  ;; Set frame transparency
  (unless (or pg/is-termux (not pg/exwm-enabled))
    (set-frame-parameter (selected-frame) 'alpha '(100 . 100))
    (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized)))

#+end_src

** Editing experience

#+begin_src emacs-lisp

  (require 'iso-transl)
  (define-key global-map (kbd "<Multi_key>") iso-transl-ctl-x-8-map) ; Bind compose key in case emacs captures it

  (setq tab-width 4)                    ; Set tab length
  (setq custom-buffer-indent 2)
  (setq-default indent-tabs-mode nil)   ; Disable tab caracter
  (show-paren-mode 1)                   ; Enable delimiters matching
  (save-place-mode 1)                   ; Remembers last cursor placement in file
  (column-number-mode)                  ; Show column numbers
  ;; (mouse-avoidance-mode 'banish)        ; No mouse allowed
  (global-display-line-numbers-mode 1)  ; Show line numbers
  (setq display-line-numbers-type 'relative)
  (setq-default fill-column 80)         ; 80 caracter column indicator
  (setq vc-follow-symlinks t)
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
  (add-hook 'compilation-filter-hook
            (lambda () (ansi-color-apply-on-region (point-min) (point-max))))

  (dolist (mode '(org-mode-hook         ; Disable line numbers for some modes
                  term-mode-hook
                  coming-mode-hook
                  gfm-view-mode-hook
                  compilation-mode-hook
                  dashboard-mode-hook
                  eshell-mode-hook
                  sql-interactive-mode-hook
                  pdf-view-mode-hook
                  sokoban-mode-hook
                  doc-view-mode-hook
                  mu4e-main-mode-hook
                  Man-mode-hook
                  simple-mpc-mode-hook
                  treemacs-mode-hook
                  vterm-mode-hook
                  slack-mode-hook
                  shell-mode-hook))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))

#+end_src

** Fonts

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Fira Code Retina" :height 120)
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina")
  (set-face-attribute 'variable-pitch nil :font "DejaVu Sans" :weight 'regular)

  (set-face-attribute 'italic nil
                      :slant 'italic 
                      :underline nil)

#+end_src

** Window placement management

#+begin_src emacs-lisp

  (setq display-buffer-base-action
        '(display-buffer-reuse-mode-window
          display-buffer-reuse-window
          display-buffer-same-window))

  ;; If a popup does happen, don't resize windows to be equal-sized
  (setq even-window-sizes nil)

#+end_src

* Temporary Files Management

Some settings to manage where emacs stores backup files (such as the ~~~ backup files).

#+begin_src emacs-lisp

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

#+end_src

* Packages

** System Management

*** Package | guix

Emacs interface for guix package manager.

#+begin_src emacs-lisp

  (use-package guix
    :straight nil)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-guix"

#+end_src

** Password utilities

*** Package | auth-source

#+begin_src emacs-lisp

  (use-package auth-source
    :straight nil
    :custom
    (auth-sources '("~/.authinfo.gpg")))

#+end_src

*** Package | pinentry

#+begin_src emacs-lisp

  (unless pg/is-termux
    (use-package pinentry
      :straight nil
      :custom
      (epg-pinentry-mode 'loopback)
      :config
      (pinentry-start)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-pinentry"

#+end_src

*** Package | password-cache

#+begin_src emacs-lisp

  (use-package password-cache
    :straight nil
    :custom
    (password-cache-expiry (* 60 60 2)))

#+end_src

*** Password lookup

#+begin_src emacs-lisp

  (defun pg/lookup-password (&rest keys)
    (let ((result (apply #'auth-source-search keys)))
      (if result
          (funcall (plist-get (car result) :secret))
        nil)))

#+end_src

** Keybind Log

*** Package | keycast

Useful when starting out with the various keybindings and when presenting to an audience.

#+begin_src emacs-lisp

  (define-minor-mode pg/keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (interactive)
    (if pg/keycast-mode
        (add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast--update)))

  (use-package keycast
    :custom
    (keycast-mode-line-format "%2s%k%c%2s")
    :config
    (fset #'keycast-mode #'pg/keycast-mode)
    (keycast-mode)
    (add-to-list 'global-mode-string '("" keycast-mode-line)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-keycast"

#+end_src

** Command Completion Framework

*** Package | savehist

#+begin_src emacs-lisp

  (use-package savehist
    :straight nil
    :custom
    (savehist-mode))

#+end_src

*** Package | marginalia

#+begin_src emacs-lisp

  (use-package marginalia
    :straight nil
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :config
    (marginalia-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-marginalia"

#+end_src

*** Package | consult

#+begin_src emacs-lisp

  (use-package consult
    :straight nil
    :bind
    ("C-s" . consult-line)
    ("C-x b" . consult-buffer)
    (:map minibuffer-local-map
          ("C-r" . consult-history)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-consult"

#+end_src

*** Package | orderless

#+begin_src emacs-lisp

  (use-package orderless
    :straight nil
    :custom
    (completion-styles '(orderless))
    (completion-category-defaults nil)
    (orderless-skip-highlighting nil)
    (completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-orderless"

#+end_src

*** Package | corfu

#+begin_src emacs-lisp

  (use-package corfu
    :straight nil
    :bind
    (:map corfu-map
          ("C-j" . corfu-next)
          ("C-k" . corfu-previous))
    :custom
    (corfu-cycle t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-corfu"

#+end_src

*** Package | vertico

#+begin_src emacs-lisp

  (use-package vertico
    :straight nil
    :bind
    (:map vertico-map
          ("C-j" . vertico-next)
          ("C-k" . vertico-previous))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-vertico"

#+end_src

*** Package | embark

#+begin_src emacs-lisp

  (use-package embark
    :straight nil
    :bind
    ("C-S-a" . embark-act)
    (:map minibuffer-local-map
          ("C-d" . embark-act))
    :custom
    (embark-confirm-act-all nil)
    :config
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-embark"

#+end_src

*** Package | embark-consult

#+begin_src emacs-lisp

  (use-package embark-consult
    :straight '(embark-consult :host github
                               :repo "oantolin/embark"
                               :files ("embark-consult.el"))
    :after (embark consult)
    :demand t
    :hook
    (embark-collect-mode . embark-consult-preview-minor-mode))

#+end_src

*** Package | app-launcher

#+begin_src emacs-lisp

  (use-package app-launcher
    :straight '(app-launcher
                :host github
                :repo "SebastienWae/app-launcher"))

#+end_src

*** Package | prescient

#+begin_src emacs-lisp

  (use-package prescient
    :straight nil)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-prescient"

#+end_src

*** Package | which-key

Displays additional keybindings subsequent to prefix keybindings

#+begin_src emacs-lisp

  (use-package which-key
    :straight nil
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1)) ; Delay before popup in seconds

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-which-key"

#+end_src

*** Package | helm

#+begin_src emacs-lisp

  (use-package helm
    :straight t
    :after lsp-java
    :bind
    (:map helm-map
          ("C-k" . helm-previous-line)
          ("C-j" . helm-next-line))
    :config
    (helm-mode 1))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-helm"

#+end_src

** UI Enhancement

*** Package | diminish

#+begin_src emacs-lisp

  (use-package diminish
    :straight nil)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-diminish"

#+end_src

*** Package | all-the-icons

#+begin_src emacs-lisp

  (use-package all-the-icons
    :straight nil)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-all-the-icons"

#+end_src

*** Package | ligature

#+begin_src emacs-lisp

  (use-package ligature
    :straight nil
    :disabled
    :load-path "~/Packages/ligature.el"
    :config
    ;; Enable ligatures
    (ligature-set-ligatures 't '("++" "--" "/=" "&&" "||" "||=" "->" "=>" "::" "__" "==" "===" "!=" "=/=" "!=="
                                 "<=" ">=" "<=>" "/*" "*/" "//" "///" "\\n" "\\\\" "<<" "<<<" "<<=" ">>" ">>>" ">>="
                                 "|=" "^=" "**" "?." "</" "<!--" "</>" "-->" "/>" "www" "##" "###" "####" "#####"
                                 "######" "--" "---" "----" "-----" "------" "====" "=====" "======" "[]" "<>" "<~>"
                                 "??" ".." "..." "=~" "!~" ":=" "..<" "!!" ":::" "=!=" "=:=" "<:<" "..=" "::<"
                                 "#{" "#(" "#_" "#_(" "#?" "#:" ".-" ";;" "~@" "<-" "#{}" "|>" "=>>" "=<<" ">=>" "<=<"
                                 "=>=" "=<=" "<$" "<$>" "$>" "<+" "<+>" "+>" "<*" "<*>" "*>" "<|>" ".=" "#=" "+++" "***"
                                 ":>:" ":<:" "<|||" "<||" "<|" "||>" "|||>" "[|" "|]" "~-" "~~" "%%" "/\\" "\\/" "-|" "_|"
                                 "_|_" "|-" "||-" ":>" ":<" ">:" "<:" "::>" "<::" ">::" "{|" "|}" "#[" "]#" "::="
                                 "#!" "#=" "->>" ">-" ">>-" "->-" "->>-" "=>>=" ">>->" ">>=>" "|->" "|=>" "~>" "~~>" "//=>"
                                 "<<-" "-<" "-<<" "-||" "-<-" "-<<-" "=<" "=|" "=||" "=<<=" "<-<<" "<=<<" "<-|" "<=|" "<~"
                                 "<~~" "<=//" "<->" "<<=>>" "|-|-|" "|=|=|" "/=/"))

    (global-ligature-mode 't))

#+end_src

*** Package | doom-modeline

Customizes the look of the modeline for better aesthetic.

#+begin_src emacs-lisp

  (use-package doom-modeline
    :straight nil
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 15)
    (doom-modeline-modal-icon nil)
    (doom-modeline-enable-word-count t)
    (doom-modeline-indent-info t)
    (doom-modeline-mu4e t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-doom-modeline"

#+end_src

*** Package | autothemer

Important to disable current theme ~M-x disable-theme~ in order to experiment.

#+begin_src emacs-lisp

  (use-package autothemer
    :straight nil
    :config
    (load-theme 'onedark-variant t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-autothemer"

#+end_src

*** Package | dashboard

#+begin_src emacs-lisp

  (defun pg/dashboard-setup-startup-hook ()
    "Setup post initialization hooks."
    (add-hook 'after-init-hook (lambda ()
                                 ;; Display useful lists of items
                                 (dashboard-insert-startupify-lists)))
    (add-hook 'emacs-startup-hook (lambda ()
                                    (switch-to-buffer dashboard-buffer-name)
                                    (goto-char (point-min))
                                    (redisplay)
                                    (run-hooks 'dashboard-after-initialize-hook))))

  ;; (defun pg/display-startup-time ()
  ;;   (let ((package-count 0) (time (float-time (time-subtract after-init-time before-init-time))))
  ;;     (when (boundp 'straight--profile-cache)
  ;;       (setq package-count (+ (hash-table-count straight--profile-cache) package-count)))
  ;;     (if (zerop package-count)
  ;;         (format "Emacs started in %.2f" time)
  ;;       (format "%d packages loaded in %.2f seconds with %d garbage collections" package-count time gcs-done))))

  (use-package dashboard
    :straight t
    :custom
    (dashboard-set-file-icons t)
    (dashboard-items '((recents . 10)
                       (projects . 10)
                       (agenda . 5)))
    (dashboard-page-separator "\n\f\n")
    ;; (dashboard-init-info #'pg/display-startup-time)
    :config
    (fset #'dashboard-setup-startup-hook #'pg/dashboard-setup-startup-hook)
    (pg/dashboard-setup-startup-hook))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  ;; "emacs-dashboard" ;; old version

#+end_src

*** Package | page-break-lines

#+begin_src emacs-lisp

  (use-package page-break-lines
    :straight nil)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-page-break-lines"

#+end_src

** Window Management

*** Package | bufler

#+begin_src emacs-lisp

  (use-package bufler
    :straight t
    :after evil-collection
    :bind ("C-x C-b" . bufler)
    :config
    (evil-collection-define-key 'normal 'bufler-list-mode-map
      (kbd "RET")   'bufler-list-buffer-switch
      (kbd "M-RET") 'bufler-list-buffer-peek
      "D"           'bufler-list-buffer-kill)

    (setf bufler-groups
          (bufler-defgroups

           ;; Subgroup collecting all named workspaces.
           (group (auto-workspace))

           ;; Subgroup collecting buffers in a projectile project.
           (group (auto-projectile))

           ;; Grouping browser windows
           (group
            (group-or "Browsers"
                      (name-match "Firefox" (rx bos "firefox"))))

           (group
            (group-or "Chat"
                      (name-match "Discord" (rx bos "discord"))
                      (mode-match "Slack" (rx bos "slack-"))))

           (group
            ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
            (group-or "Help/Info"
                      (mode-match "*Help*" (rx bos (or "help-" "helpful-")))
                      (mode-match "*Info*" (rx bos "info-"))))

           (group
            ;; Subgroup collecting all special buffers (i.e. ones that are not
            ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
            ;; through to other groups, so they end up grouped with their project buffers).
            (group-and "*Special*"
                       (name-match "**Special**"
                                   (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace" "Pinentry") "*"))
                       (lambda (buffer)
                         (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                              buffer)
                                     (funcall (mode-match "Dired" (rx bos "dired"))
                                              buffer)
                                     (funcall (auto-file) buffer))
                           "*Special*"))))

           ;; Group remaining buffers by major mode.
           (auto-mode))))

#+end_src

*** Package | winner-mode

For window configurations

#+begin_src emacs-lisp

  (use-package winner
    :straight nil
    :config
    (winner-mode))

#+end_src

*** Package | tab-bar

#+begin_src emacs-lisp

  (use-package tab-bar
    :custom
    (tab-bar-show 1)
    :config
    (tab-bar-mode))

#+end_src

*** Package | perspective

For organizing the buffer list

#+begin_src emacs-lisp

  (use-package perspective
    :straight nil
    :bind
    ("C-x k" . persp-kill-buffer*)
    :config
    (unless (equal persp-mode t) (persp-mode)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-perspective"

#+end_src

** Email Management

*** Email configuration file

After having setup the file, make sure to run the following commands:
- ~mu init --maildir=~/Mail --my-address=address1@domain1.com --my-address=address2@domain2.com ...~ - For all different addresses
- ~mu index~ - To index the given addresses

#+begin_src conf :tangle ~/.mbsyncrc

  # Main hotmail account
  IMAPAccount hotmail
  Host outlook.office365.com
  User pgabriel999@hotmail.com
  Port 993
  PassCmd "emacsclient -e \"(pg/lookup-password :host \\\"hotmail.com\\\" :user \\\"pgabriel999\\\")\" | cut -d '\"' -f2"
  SSLType IMAPS
  CertificateFile /etc/ssl/certs/ca-certificates.crt

  IMAPStore hotmail-remote
  Account hotmail

  MaildirStore hotmail-local
  Subfolders Verbatim
  Path /home/phil-gab99/Mail/Main/
  Inbox /home/phil-gab99/Mail/Main/Inbox

  Channel hotmail
  Far :hotmail-remote:
  Near :hotmail-local:
  Patterns *
  CopyArrivalDate yes
  Create Both
  Expunge Both
  SyncState *

  # University account
  IMAPAccount umontreal
  Host outlook.office365.com
  User philippe.gabriel.1@umontreal.ca
  Port 993
  PassCmd "emacsclient -e \"(pg/lookup-password :host \\\"umontreal.ca\\\" :user \\\"philippe.gabriel.1\\\")\" | cut -d '\"' -f2"
  SSLType IMAPS
  CertificateFile /etc/ssl/certs/ca-certificates.crt

  IMAPStore umontreal-remote
  Account umontreal

  MaildirStore umontreal-local
  SubFolders Verbatim
  Path /home/phil-gab99/Mail/University/
  Inbox /home/phil-gab99/Mail/University/Inbox

  Channel umontreal
  Far :umontreal-remote:
  Near :umontreal-local:
  Patterns *
  CopyArrivalDate yes
  Create Both
  Expunge Both
  SyncState *

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "mu"
  "isync"

#+end_src

*** Package | mu4e

#+begin_src emacs-lisp

  (unless pg/is-termux
    (use-package mu4e
      :straight '( :type git
                   :host github
                   :repo "djcb/mu"
                   :branch "release/1.6"
                   :files ("mu4e/*")
                   :pre-build (("./autogen.sh") ("make")))
      :commands mu4e
      :hook (mu4e-compose-mode . corfu-mode)
      ;; :load-path "/usr/local/share/emacs/site-lisp/mu4e"
      :config
      (require 'mu4e-org)
      ;; This is set to 't' to avoid mail syncing issues when using mbsync
      (setq mu4e-change-filenames-when-moving t)

      ;; Refresh mail using isync every 10 minutes
      (setq mu4e-update-interval (* 10 60))
      (setq mu4e-get-mail-command "mbsync -a")
      (setq mu4e-maildir "~/Mail")
      (setq message-send-mail-function 'smtpmail-send-it)
      (setq mu4e-compose-format-flowed t)
      (setq mu4e-compose-signature
            (concat "Philippe Gabriel - \n[[mailto:philippe.gabriel.1@umontreal.ca][philippe.gabriel.1@umontreal.ca]] | "
                    "[[mailto:pgabriel999@hotmail.com][pgabriel999@hotmail.com]]"))
      (setq mu4e-compose-signature-auto-include nil)

      (setq mu4e-contexts
            (list
             ;; Main account
             (make-mu4e-context
              :name "Main"
              :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/Main" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "pgabriel999@hotmail.com")
                      (user-full-name . "Philippe Gabriel")
                      (smtpmail-smtp-server . "smtp.office365.com")
                      (smtpmail-smtp-user . "pgabriel999@hotmail.com")
                      (smtpmail-smtp-service . 587)
                      (smtpmail-stream-type . starttls)
                      (mu4e-drafts-folder . "/Main/Drafts")
                      (mu4e-sent-folder . "/Main/Sent")
                      (mu4e-refile-folder . "/Main/Archive")
                      (mu4e-trash-folder . "/Main/Deleted")))

             ;; University account
             (make-mu4e-context
              :name "University"
              :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/University" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "philippe.gabriel.1@umontreal.ca")
                      (user-full-name . "Philippe Gabriel")
                      (smtpmail-smtp-server . "smtp.office365.com")
                      (smtpmail-smtp-user . "philippe.gabriel.1@umontreal.ca")
                      (smtpmail-smtp-service . 587)
                      (smtpmail-stream-type . starttls)
                      (mu4e-drafts-folder . "/University/Drafts")
                      (mu4e-sent-folder . "/University/Sent Items")
                      (mu4e-refile-folder . "/University/Archive")
                      (mu4e-trash-folder . "/University/Deleted Items")))))

      (setq mu4e-maildir-shortcuts
            '(("/University/Inbox" . ?u)
              ("/University/Drafts" . ?d)
              ("/Main/Inbox" . ?m)
              ("/Main/Jobs" . ?j)
              ("/Main/University" . ?s)))
      (mu4e t)
      :custom
      (mu4e-context-policy 'pick-first)
      (mu4e-mu-binary (expand-file-name "mu/mu" (straight--repos-dir "mu")))
      ;; (setq mu4e-bookmarks
      ;;       '((:name "Display Name" :query "Query" :key "Key" ...)))
      ))

#+end_src

*** Package | mu4e-alert

Allows for notification pop-up and mode line count when receiving emails

#+begin_src emacs-lisp

  (unless pg/is-termux
    (use-package mu4e-alert
      :straight nil
      :after mu4e
      :custom
      (mu4e-alert-notify-repeated-mails t)
      :config
      (mu4e-alert-set-default-style 'notifications)
      (mu4e-alert-enable-notifications)
      (mu4e-alert-enable-mode-line-display)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-mu4e-alert"

#+end_src

** Editing Experience

*** Package | rainbow-delimiters

Colors matching delimiters with different colours for distinguishability.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :straight nil
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-rainbow-delimiters"

#+end_src

*** Package | abbrev-mode

#+begin_src emacs-lisp

  (use-package abbrev
    :straight nil
    :diminish abbrev-mode)

#+end_src

*** Package | highlight-indent-guides

#+begin_src emacs-lisp

  (use-package highlight-indent-guides
    :straight nil
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom 
    (highlight-indent-guides-responsive 'stack)
    (highlight-indent-guides-method 'character))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-highlight-indent-guides"

#+end_src

*** Package | undo-fu

Undo-redo tree to use for the evil package.

#+begin_src emacs-lisp

  (use-package undo-fu
    :straight nil)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-undo-fu"

#+end_src

*** Package | smartparens

For surrounding delimiter matching and autocompletion.

#+begin_src emacs-lisp

  (use-package smartparens
    :straight nil
    :diminish smartparens-mode
    :config
    (smartparens-global-mode))

  (with-eval-after-load 'smartparens
    (sp-with-modes
        '(smartparens-mode)
      (sp-local-pair "{" nil :post-handlers '(:add ("||\n[i]" "RET")))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-smartparens"

#+end_src

*** Package | outshine

#+begin_src emacs-lisp

  (use-package outshine
    :straight nil
    :hook (prog-mode . outshine-mode)
    :config
    (unbind-key "M-<up>" 'outshine-mode-map)
    (unbind-key "M-<down>" 'outshine-mode-map)
    (unbind-key "<normal-state> [ [" 'outline-mode-map)
    (unbind-key "<normal-state> ] ]" 'outline-mode-map)
    (unbind-key "C-c @ C-p" 'outline-minor-mode-map)
    (unbind-key "C-c @ C-n" 'outline-minor-mode-map)
    (unbind-key "<normal-state> C-k" 'outline-mode-map)
    (unbind-key "<normal-state> C-j" 'outline-mode-map)
    :bind (:map outline-minor-mode-map
                ("C-j" . outline-next-visible-heading)
                ("C-k" . outline-previous-visible-heading)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-outshine"

#+end_src

*** Package | selectric-mode

#+begin_src emacs-lisp

  (defun pg/selectric-type-sound ()
    "Make the sound of the printing element hitting the paper."
    (progn
      (selectric-make-sound (format "%sselectric-move.wav" selectric-files-path))
      (unless (minibufferp)
        (if (= (current-column) (current-fill-column))
            (selectric-make-sound (format "%sping.wav" selectric-files-path))))))

  (use-package selectric-mode
    :straight t
    :config
    (fset #'selectric-type-sound #'pg/selectric-type-sound))

#+end_src

*** Package | rainbow-mode

#+begin_src emacs-lisp

  (use-package rainbow-mode
    :diminish rainbow-mode
    :hook ((org-mode
            emacs-lisp-mode
            web-mode
            typescript-mode
            css-mode
            scss-mode
            less-css-mode) . rainbow-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-rainbow-mode"

#+end_src

*** Package | emojify

#+begin_src emacs-lisp

  (use-package emojify
    :straight nil)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-emojify"

#+end_src

** Help Documentation

*** Package | helpful

Displays full documentations of the default help function.

#+begin_src emacs-lisp

  (use-package helpful
    :straight nil
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-helpful"

#+end_src

** File management

*** Package | dired

The built-in directory editor. Some basic useful keybindings to keep in mind:
- ~j~ / ~k~ - Next / Previous line
- ~J~ - Jump to file in buffer
- ~RET~ - Select file or directory
- ~^~ - Go to parent directory
- ~g O~ - Open file in other window
- ~g o~ - Open file in other window in preview mode, which can be closed with ~q~
- ~M-RET~ - Show file in other window without focusing (previewing)

Keybindings relative to marking (selecting) in dired:
- ~m~ - Marks a file
- ~u~ - Unmarks a file
- ~U~ - Unmarks all files in buffer
- ~t~ - Inverts marked files in buffer
- ~% m~ - Mark files in buffer using regular expression
- ~*~ - Lots of other auto-marking functions
- ~K~ - "Kill" marked items, removed from the view only (refresh buffer with ~g r~ to get them back)
Many operations can be done on a single file if there are no active marks.

Keybindings relative to copying and renaming files:
- ~C~ - Copy marked files (or if no files are marked, the current file)
- ~R~ - Rename marked files
- ~% R~ - Rename based on regular expression

Keybindings relative to deleting files:
- ~D~ - Delete marked file
- ~d~ - Mark file for deletion
- ~x~ - Execute deletion for marks
- ~delete-by-moving-to-trash~ - Move to trash instead of deleting permanently if set to true

Keybindings relative to archives and compressing:
- ~Z~ - Compress or uncompress a file or folder to (.tar.gz)
- ~c~ - Compress selection to a specific file
- ~dired-compress-files-alist~ - Bind compression commands to file extension by adding additional extensions to the list

Keybindings for other useful operations:
- ~T~ - Touch (change timestamp)
- ~M~ - Change file mode
- ~O~ - Change file owner
- ~G~ - Change file group
- ~S~ - Create a symbolic link to this file
- ~L~ - Load an Emacs Lisp file into Emacs
  
 #+begin_src emacs-lisp

   (use-package dired
     :straight nil
     :after evil-collection
     :commands (dired dired-jump)
     :bind (("C-x C-j" . dired-jump)) ; Open dired at current directory
     :config
     (evil-collection-define-key 'normal 'dired-mode-map
       "h" 'dired-single-up-directory
       "l" 'dired-single-buffer)
     :custom ((dired-listing-switches "-agho --group-directories-first")))

#+end_src

*** Package | dired-single

Keeps a single dired buffer open at a time (to not have multiple buried buffers).

#+begin_src emacs-lisp

  (use-package dired-single
    :straight t
    :after dired
    :commands (dired dired-jump))

#+end_src

*** Package | all-the-icons-dired

Displays icons in dired-mode.

#+begin_src emacs-lisp

  (unless pg/is-termux
    (use-package all-the-icons-dired
      :straight nil
      :hook (dired-mode . all-the-icons-dired-mode)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-all-the-icons-dired"

#+end_src

*** Package | dired-hide-dotfiles

Togglable option for hiding dot files.

#+begin_src emacs-lisp

  (use-package dired-hide-dotfiles
    :straight t
    :after evil-collection
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

** Shell customization

*** Package | eshell-git-prompt

Adds more detail to the prompt in eshell with custome themes.

#+begin_src emacs-lisp

  (defun pg/eshell-git-prompt-multiline ()
    "Eshell Git prompt inspired by spaceship-prompt."
    (let (separator hr dir git git-dirty time sign command)
      (setq separator (with-face " | " 'eshell-git-prompt-multiline-secondary-face))
      (setq hr (with-face (concat "\n" (make-string (/ (window-total-width) 2) ?─) "\n") 'eshell-git-prompt-multiline-secondary-face))
      (setq dir
            (concat
             (with-face " " 'eshell-git-prompt-directory-face)
             (concat  (abbreviate-file-name (eshell/pwd)))))
      (setq git
            (concat (with-face "⎇" 'eshell-git-prompt-exit-success-face)
                    (concat (eshell-git-prompt--branch-name))))
      (setq git-dirty
            (when (eshell-git-prompt--branch-name)
              (if (eshell-git-prompt--collect-status)
                  (with-face " ✎" 'eshell-git-prompt-modified-face)
                (with-face " ✔" 'eshell-git-prompt-exit-success-face))))
      (setq time (with-face (format-time-string "%I:%M:%S %p") 'eshell-git-prompt-multiline-secondary-face))
      (setq sign
            (if (= (user-uid) 0)
                (with-face "\n#" 'eshell-git-prompt-multiline-sign-face)
              (with-face "\nλ" 'eshell-git-prompt-multiline-sign-face)))
      (setq command (with-face " " 'eshell-git-prompt-multiline-command-face))

      ;; Build prompt
      (concat hr dir separator git git-dirty separator time sign command)))

  (use-package eshell-git-prompt
    :straight t
    :after eshell
    :config
    (fset #'eshell-git-prompt-multiline #'pg/eshell-git-prompt-multiline))

#+end_src

*** Package | eshell

Some configurations to the built-in eshell.

#+begin_src emacs-lisp

  (defun pg/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (local-unset-key (kbd "M-<tab>"))
    (corfu-mode)

    (setq eshell-history-size 10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (require 'em-tramp)
  (use-package eshell
    :straight nil
    :hook (eshell-first-time-mode . pg/configure-eshell)
    :custom
    (eshell-prefer-lisp-functions t)
    :config
    (eshell-git-prompt-use-theme 'multiline2))

#+end_src

*** Package | vterm

#+begin_src emacs-lisp

  (use-package vterm
    :straight nil)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-vterm"

#+end_src

** Project Management and Version Control

*** Package | projectile

Allows for git projects management. Accessed using the ~C-c p~ prefix. Some important notes:
- ~C-c p E~ - Allows creation of a local dirs dot file for pre-defining the values for some important other projectile variables.
  - If variables have not been set after this change then evaluate (~M-:~) the following function ~(hack-dir-local-variables)~.
- ~C-c p s r~ - Allows for use of the ~ripgrep~ command across the current reopository. Useful along with ~C-c C-o~ to pop out the results from the minibuffer into another buffer.
Note that the emacs built-in local dir creation can also be used and is more flexible.

#+begin_src emacs-lisp

  (use-package projectile
    :straight nil
    :diminish projectile-mode
    :hook (lsp-mode . projectile-mode)
    :custom ((projectile-completion-system 'vertico))
    :init
    (setq projectile-keymap-prefix (kbd "C-c p"))
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  (bind-keys*
   :map prog-mode-map
   ("C-p c" . projectile-run-project)
   ("C-p b" . projectile-compile-project))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-projectile"

#+end_src

*** Package | magit

Allows for git commands to be applied to the current repository using the command ~C-x g~ which invokes a ~git status~ command with some additional information. Typing ~?~ invokes a list of possible commands, typing ~?~ again invokes the help function for the different commands and typing ~?~ a third time invokes the manual for the package.

#+begin_src emacs-lisp

  (use-package magit
    :straight nil
    :commands (magit-status magit-get-current-branch)
    :config
    (unbind-key "M-<tab>" 'magit-mode-map)
    (unbind-key "M-<tab>" 'magit-section-mode-map)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-magit"

#+end_src

*** Package | git-gutter

#+begin_src emacs-lisp

  (use-package git-gutter
    :straight nil
    :diminish git-gutter-mode
    :hook ((text-mode . git-gutter-mode)
           (prog-mode . git-gutter-mode))
    :custom
    (git-gutter-fr:side 'right-fringe)
    :config
    (unless pg/is-termux
      (require 'git-gutter-fringe)
      (set-face-foreground 'git-gutter-fr:added "LightGreen")
      (fringe-helper-define 'git-gutter-fr:added nil
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        ".........."
        ".........."
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        ".........."
        ".........."
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX")

      (set-face-foreground 'git-gutter-fr:modified "LightGoldenrod")
      (fringe-helper-define 'git-gutter-fr:modified nil
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        ".........."
        ".........."
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        ".........."
        ".........."
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX")

      (set-face-foreground 'git-gutter-fr:deleted "LightCoral")
      (fringe-helper-define 'git-gutter-fr:deleted nil
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        ".........."
        ".........."
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        ".........."
        ".........."
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX"))

    ;; These characters are used in terminal mode
    (set-face-foreground 'git-gutter:added "LightGreen")
    (set-face-foreground 'git-gutter:modified "LightGoldenrod")
    (set-face-foreground 'git-gutter:deleted "LightCoral"))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-git-gutter"
  "emacs-git-gutter-fringe"

#+end_src

*** Package | forge

Adds git forges to magit.
Steps to get working:
- Run ~forge pull~ at the current git repo

#+begin_src emacs-lisp

  (use-package forge
    :straight nil
    :after magit)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-forge"

#+end_src

** IDE Functionalities 

*** Package | lsp-mode

Language Server Protocol for basic IDE functionalities. See [[https://emacs-lsp.github.io/lsp-mode/page/languages/][here]] for how to setup for different languages.
The ~lsp=ui-doc-focus-frame~ command allows to access the documentation frame of the pop-up.

#+begin_src emacs-lisp

  (defun pg/lsp-mode-setup () ; Displays structure of cursor position for all buffers
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (require 'lsp-completion)
  (use-package lsp-mode
    :straight nil
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . pg/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t)
    :custom
    (lsp-completion-provider :none))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-lsp-mode"

#+end_src

*** Package | lsp-ui

Displays useful doc on hover.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :straight nil
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show-with-cursor t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-lsp-ui"

#+end_src

*** Package | lsp-treemacs

Tree views in emacs.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :straight nil
    :after lsp)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-lsp-treemacs"

#+end_src

*** Package | company

For auto-completions while coding.

#+begin_src emacs-lisp

  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (use-package company
    :straight nil
    :after lsp-mode
    :hook (prog-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    (company-tooltip-minimum-width 40)
    (company-tooltip-maximum-width 60)
    :config
    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-company"

#+end_src

*** Package | company-box

Includes icons for company mode suggestions.

#+begin_src emacs-lisp

  (use-package company-box
    :straight nil
    :after company
    :hook (company-mode . company-box-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-company-box"

#+end_src

*** Package | company-prescient

Remembers autocomplete selections.

#+begin_src emacs-lisp

  (use-package company-prescient
    :straight t
    :after company
    :config
    (company-prescient-mode 1))

#+end_src

*** Package | flycheck

Syntax checking.

#+begin_src emacs-lisp

  (use-package flycheck
    :straight nil
    :hook (lsp-mode . flycheck-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-flycheck"

#+end_src

*** Package | dap-mode

Debugger Adaptor Protocol for IDE debugging commands. See [[https://emacs-lsp.github.io/dap-mode/page/configuration/][here]] for how to setup for different languages.

#+begin_src emacs-lisp

  (use-package dap-mode
    :straight nil
    :after lsp-mode
    :config
    (dap-mode 1)
    (dap-ui-mode 1)
    (dap-ui-controls-mode 1))

  ;;(general-define-key
  ;;  :keymaps 'lsp-mode-map
  ;;  :prefix lsp-keymap-prefix
  ;;  "d" '(dap-hydra t :wk "debugger")))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-dap-mode"

#+end_src

*** Package | plantuml-mode

Allows writing textual descriptions for creating uml diagrams

#+begin_src emacs-lisp

  (use-package plantuml-mode
    :straight nil
    :custom
    (plantuml-indent-level 4)
    (plantuml-jar-path "~/bin/plantuml.jar")
    (plantuml-default-exec-mode 'jar))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-plantuml-mode"

#+end_src

*** Languages

Some general tools for programming:

*Guix Packages*

#+begin_src scheme :tangle ~/.config/guix/manifests/build-tools.scm :noweb yes

  (specifications->manifest
   '("meson"
     "ninja"
     "git"
     "autoconf"
     "automake"
     "libtool"
     "gmime"
     "xapian"
  ;   "gtk+"
   ;  "gtk+:bin"
    ; "webkitgtk"
  ;   "guile"
     "pkg-config"
     "glibc"
     "glib"
     "glib:bin"
   ;  "check"
     "make"
     "cmake"))

#+end_src

**** Alloy

#+begin_src emacs-lisp

  (use-package alloy-mode
    :straight nil
    :hook (alloy-mode . (lambda () (setq indent-tabs-mode nil)))
    :load-path "~/.emacs.d/extrapkgs/alloy-mode"
    :custom
    (alloy-basic-offset 4))

#+end_src

**** C/C++/Objective-C

#+begin_src emacs-lisp

  (require 'lsp-clangd)
  (use-package cc-mode
    :straight nil
    :config
    (setq c-basic-offset 4)
    :custom
    (lsp-clangd-binary-path "~/.emacs.d/lsp-servers/clangd_13.0.0/bin/clangd")
    (lsp-clangd-version "13.0.0")
    (company-clang-executable "/usr/lib/clang")
    :hook ((c-mode c++-mode objc-mode) . lsp-deferred))

#+end_src

*Guix Packages*

#+begin_src scheme :tangle ~/.config/guix/manifests/cc.scm :noweb yes

  (specifications->manifest
   '("gcc-toolchain@10.3.0"
     "texinfo"
     "llvm"
     "lld"
     "gcc@10.3.0"
     "clang"
     "file"
     "elfutils"
     "go"))

#+end_src

***** Package | company-c-headers

#+begin_src emacs-lisp

  (use-package company-c-headers
    :straight t
    :after (cc-mode company)
    :config
    (add-to-list 'company-backends '(company-c-headers :with company-yasnippet)))

#+end_src

**** Common Lisp

***** Package | sly

#+begin_src emacs-lisp

  (use-package sly
    :straight nil
    :custom
    (inferior-lisp-program "sbcl"))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-sly"

#+end_src

**** Css/LessCSS/SASS/SCSS

***** Package | lsp-css

#+begin_src emacs-lisp

  (use-package lsp-css
    :straight nil
    :hook ((css-mode less-css-mode scss-mode) . lsp-deferred))

#+end_src

**** Docker

***** Package | docker

#+begin_src emacs-lisp

  (use-package docker
    :straight nil)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-docker"

#+end_src

***** Package | dockerfile-mode
     
#+begin_src emacs-lisp

  (use-package dockerfile-mode
    :straight nil)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-dockerfile-mode"

#+end_src

**** Git

#+begin_src emacs-lisp

  (use-package git-modes
    :straight nil)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-git-modes"

#+end_src

**** Groovy

#+begin_src emacs-lisp

  (use-package groovy-mode
    :straight '(groovy-emacs-modes :type git
                                   :host github
                                   :repo "Groovy-Emacs-Modes/groovy-emacs-modes"))

#+end_src

**** Haskell

#+begin_src emacs-lisp

  (use-package haskell-mode
    :straight nil
    :hook ((haskell-mode haskell-literate-mode) . lsp-deferred))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-haskell-mode"

#+end_src

***** Package | lsp-haskell

#+begin_src emacs-lisp

  (use-package lsp-haskell
    :disabled
    :custom
    (lsp-haskell-server-path "~/.ghcup/bin/haskell-language-server-8.10.6"))

#+end_src

**** Java

***** Package | lsp-java

#+begin_src emacs-lisp

  (use-package lsp-java
    :straight nil
    :hook (java-mode . lsp-deferred)
    :bind
    (:map lsp-mode-map
          ("C-<return>" . lsp-execute-code-action))
    :config
    (require 'dap-java)
    :custom
    (lsp-enable-file-watchers nil)
    (lsp-java-configuration-runtimes '[( :name "JavaSE-17"
                                         :path "/usr/lib/jvm/java-17-openjdk-amd64"
                                         :default t)])
    (lsp-java-vmargs (list "-noverify" "--enable-preview"))
    (lsp-java-java-path "/usr/lib/jvm/java-17-openjdk-amd64/bin/java")
    (lsp-java-import-gradle-home "/opt/gradle/latest/bin/gradle")
    (lsp-java-import-gradle-java-home "/usr/lib/jvm/java-17-openjdk-amd64/bin/java")
    (lsp-java-server-install-dir "/home/phil-gab99/.emacs.d/lsp-servers/java-language-server/bin/"))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-lsp-java"

#+end_src

***** Package | gradle-mode

#+begin_src emacs-lisp

  (defun pg/gradle-run ()
    "Execute gradle run command"
    (interactive)
    (gradle-run "run"))

  (use-package gradle-mode
    :hook (java-mode . gradle-mode)
    :straight '(emacs-gradle-mode
                :host github
                :repo "jacobono/emacs-gradle-mode"))

#+end_src

**** LaTeX

#+begin_src emacs-lisp

  (require 'tex-site)
  (use-package tex
    :straight nil
    :config
    (add-to-list 'auto-mode-alist '("\\.tex$" . LaTeX-mode))
    (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
    (add-hook 'TeX-mode-hook (lambda () (run-hooks 'prog-mode-hook)))
    (put 'TeX-mode 'derived-mode-parent 'prog-mode)
    :custom
    (TeX-view-program-selection '((output-pdf "PDF Tools")))
    (TeX-source-correlate-start-server t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-auctex"

#+end_src

***** Package | company-auctex

#+begin_src emacs-lisp

  (use-package company-auctex
    :straight nil
    :after (auctex company)
    :config
    (add-to-list 'company-backends '(company-auctex :with company-yasnippet)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-company-auctex"

#+end_src

**** LMC

***** Package | lmc-java

Custom syntax highlighting for LMC assembly language.
      
#+begin_src emacs-lisp

  (defvar lmc-java-mode-hook nil)

  ;; (add-to-list 'auto-mode-alist '("\\.lmc\\'" . lmc-java-mode))

  (defconst lmc-java-font-lock-defaults
    (list
     '("#.*" . font-lock-comment-face)
     '("\\<\\(ADD\\|BR[PZ]?\\|DAT\\|HLT\\|IN\\|LDA\\|OUT\\|S\\(?:TO\\|UB\\)\\)\\>" . font-lock-keyword-face)
     '("^\\w+" . font-lock-function-name-face)
     '("\\b[0-9]+\\b" . font-lock-constant-face))
    "Minimal highlighting expressions for lmc mode")

  (defvar lmc-java-mode-syntax-table
    (let ((st (make-syntax-table)))
      (modify-syntax-entry ?# ". 1b" st)
      (modify-syntax-entry ?\n "> b" st)
      st)
    "Syntax table for lmc-mode")

  (define-derived-mode lmc-java-mode prog-mode "LMC"
    "Major mode for editing lmc files"
    :syntax-table lmc-mode-syntax-table

    (set (make-local-variable 'font-lock-defaults) '(lmc-font-lock-defaults))

    (setq-local comment-start "# ")
    (setq-local comment-end "")

    (setq-local indent-tabs-mode nil))

#+end_src

***** Package | lmc

#+begin_src emacs-lisp

  (define-derived-mode pg/lmc-asm-mode prog-mode "LMC-Asm"
    "Major mode to edit LMC assembly code."
    :syntax-table emacs-lisp-mode-syntax-table
    (set (make-local-variable 'font-lock-defaults)
         '(lmc-asm-font-lock-keywords))
    (set (make-local-variable 'indent-line-function)
         #'lmc-asm-indent-line)
    (set (make-local-variable 'indent-tabs-mode) nil)
    (set (make-local-variable 'imenu-generic-expression)
         lmc-asm-imenu-generic-expression)
    (set (make-local-variable 'outline-regexp) lmc-asm-outline-regexp)
    (add-hook 'completion-at-point-functions #'lmc-asm-completion nil t)
    (set (make-local-variable 'comment-start) "#")
    (set (make-local-variable 'comment-start-skip)
         "\\(\\(^\\|[^\\\\\n]\\)\\(\\\\\\\\\\)*\\)#+ *"))

  (use-package lmc
    :straight t
    :config
    (fset #'lmc-asm-mode #'pg/lmc-asm-mode))

#+end_src

**** Markdown

#+begin_src emacs-lisp

  (use-package markdown-mode
    :straight nil
    :hook (gfm-view-mode . (lambda () (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                                                         (markdown-code-face (:height 1.5) fixed-pitch))))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-markdown-mode"

#+end_src

**** MIPS

#+begin_src emacs-lisp

  (use-package mips-mode
    :straight t
    :mode "\\.asm\\'"
    :custom
    (mips-tab-width 4))

#+end_src

**** NuSMV

#+begin_src emacs-lisp

  (use-package nusmv-mode
    :straight nil
    :load-path "~/.emacs.d/extrapkgs/nusmv-mode"
    :mode "\\.smv\\'"
    :bind*
    (:map nusmv-mode-map
          ("C-c C-c" . nusmv-run))
    (:map nusmv-m4-mode-map
          ("C-c C-c" . nusmv-run))
    :custom
    (nusmv-indent 4)
    :config
    (menu-bar-mode 0)
    (add-hook 'nusmv-mode-hook (lambda () (run-hooks 'prog-mode-hook)))
    (put 'nusmv-mode 'derived-mode-parent 'prog-mode))

#+end_src

**** Python

#+begin_src emacs-lisp

  (use-package python-mode
    :straight nil
    :hook (python-mode . lsp-deferred)
    :custom
    ;;(python-shell-interpreter "python3")
    ;;(dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))

#+end_src

***** Package | lsp-python-ms

#+begin_src emacs-lisp

  (use-package lsp-python-ms
    :straight t
    :init (setq lsp-python-ms-auto-install-server t)
    :custom
    (lsp-python-ms-executable
     "~/.emacs.d/lsp-servers/python-language-server/output/bin/Release/linux-x64/publish/Microsoft.Python.LanguageServer")
    :hook (python-mode . (lambda () (require 'lsp-python-ms) (lsp-deferred))))

#+end_src

***** TODO Package | jupyter

#+begin_src emacs-lisp

  (use-package jupyter
    :disabled)

#+end_src

**** SMTLibv2

#+begin_src emacs-lisp

    (use-package z3-mode
      :straight t
      :disabled)

#+end_src

**** SQL

#+begin_src emacs-lisp

  (require 'lsp-sqls)
  (use-package sql
     :straight nil
     :hook (sql-mode . lsp-deferred)
     :config
     (add-hook 'sql-interactive-mode-hook (lambda () (toggle-truncate-lines t)))
     :custom
     ;; (sql-postgres-login-params '((user :default "phil-gab99")
     ;;                              (database :default "phil-gab99")
     ;;                              (server :default "localhost")
     ;;                              (port :default 5432)))

     (sql-connection-alist
      '((main (sql-product 'postgres)
              (sql-port 5432)
              (sql-server "localhost")
              (sql-user "phil-gab99")
              (sql-password (pg/lookup-password :host "localhost" :user "phil-gab99" :port 5432))
              (sql-database "phil-gab99"))
        (school (sql-product 'postgres)
                (sql-port 5432)
                (sql-server "localhost")
                (sql-user "phil-gab99")
                (sql-password (pg/lookup-password :host "localhost" :user "phil-gab99" :port 5432))
                (sql-database "ift2935"))))

     (lsp-sqls-server "~/go/bin/sqls")
     (setq lsp-sqls-connections
           (list
            (list
             (cl-pairlis '(driver dataSourceName)
                         (list '("postgresql") (concat "host=127.0.0.1 port=5432 user=phil-gab99 password="
                                                       (pg/lookup-password :host "localhost" :user "phil-gab99" :port 5432)
                                                       " dbname=phil-gab99 sslmode=disable")))
             (cl-pairlis '(driver dataSourceName)
                         (list '("postgresql") (concat "host=127.0.0.1 port=5432 user=phil-gab99 password="
                                                       (pg/lookup-password :host "localhost" :user "phil-gab99" :port 5432)
                                                       " dbname=ift2935 sslmode=disable")))))))

#+end_src

***** Package | sql-indent

#+begin_src emacs-lisp

  (use-package sql-indent
    :straight t
    :hook (sql-mode . sqlind-minor-mode)
    :config
    (setq-default sqlind-basic-offset 4))

#+end_src

**** TypeScript

#+begin_src emacs-lisp

  (use-package typescript-mode
    :straight nil
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (require 'dap-node)
    (dap-node-setup))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-typescript-mode"

#+end_src

**** VHDL

***** Package | vhdl-tools

#+begin_src emacs-lisp

  (flycheck-define-checker vhdl-tool
    "A VHDL syntax checker, type checker and linter using VHDL-Tool."
    :command ("vhdl-tool" "client" "lint" "--compact" "--stdin" "-f" source)
    :standard-input t
    :modes (vhdl-mode)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ":w:" (message) line-end)
     (error line-start (file-name) ":" line ":" column ":e:" (message) line-end)))

  (use-package vhdl-tools
    :hook (vhdl-mode . lsp-deferred)
    :custom
    (lsp-vhdl-server-path "~/.emacs.d/lsp-servers/vhdl-tool")
    :config
    (add-to-list 'flycheck-checkers 'vhdl-tool))

#+end_src

**** YAML

#+begin_src emacs-lisp

  (use-package yaml-mode
    :straight nil)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-yaml-mode"

#+end_src

*** Package | comment-dwin-2

#+begin_src emacs-lisp

  (use-package comment-dwim-2
    :straight t
    :bind
    ("M-/" . comment-dwim-2)
    (:map org-mode-map
          ("M-/" . org-comment-dwim-2)))

#+end_src

*** Package | yasnippet

Allows for code snippets for different languages.

#+begin_src emacs-lisp

  (use-package yasnippet
    :diminish yas-minor-mode
    :straight t
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-global-mode 1)
    (add-hook 'yas-minor-mode-hook (lambda ()
                                     (yas-activate-extra-mode 'fundamental-mode))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-yasnippet"

#+end_src

*** Package | yasnippet-snippets

Collection of code snippets for yasnippet.

#+begin_src emacs-lisp

  (use-package yasnippet-snippets
    :after yasnippet
    :straight t)
  
#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-yasnippet-snippets"

#+end_src

** Notification

*** Package | alert

#+begin_src emacs-lisp

  (use-package alert
    :straight nil
    :custom
    (alert-default-style 'notifications))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-alert"

#+end_src

** Org Mode

*** Package | org

Org mode package for writing structured documents and more. Here are some useful things to know about org files.
- ~#+title: Title~ - Sets the title of a document.
- ~M-left~ / ~M-right~ - Promotes/Demotes position of headers and bullet points.
- ~M-up~ / ~M-down~ - Moves the line above or below its current position, respecting the rank.
- ~S-right~ / ~S-left~ - Cycles through different states of headers and bullet points.
- ~M-RET~ - Adds another entry below the current header/bullet point of the same rank. 
- ~C-RET~ - Adds another entry after the current section occupied by the current header of the same rank.
  
Version issues with download can be fixed by manually getting the package from the package list.

#+begin_src emacs-lisp

  (defun org-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the same directory as the org-buffer and insert a link to this file."
    (interactive)
    (setq filename
          (concat
           (make-temp-name
            (concat (buffer-file-name)
                    "_"
                    (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
    (call-process "import" nil nil nil filename)
    (insert (concat "[[" filename "]]"))
    (org-display-inline-images))

  ;; Insert a file and convert it to an org table
  (defun org-csv-to-table (beg end)
    "Insert a file into the current buffer at point, and convert it to an org table."
    (interactive (list (mark) (point)))
    (org-table-convert-region beg end ","))

  ;; Function for defining some behaviours for the major org-mode
  (defun pg/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (diminish org-indent-mode)
    (setq evil-auto-indent nil))

  (use-package org
    :straight nil
    :commands (org-capture org-agenda)
    :hook (org-mode . pg/org-mode-setup)
    :config
    (set-face-attribute 'org-ellipsis nil :underline nil)
    (setq org-ellipsis " ▾")
    (unless pg/is-termux
      (setq org-agenda-files ; Files considered by org-agenda
            '("~/Documents/Org/Agenda/")))
              ;; "~/Documents/Org/Recurrent/")))
    (setq org-hide-emphasis-markers t)
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-deadline-warning-days 7)
    (setq org-todo-keywords ; Defines a new sequence for TODOs, can add more sequences
          '((sequence "TODO(t)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w)" "HOLD(h)" "|"
                      "COMPLETED(c)" "CANC(k)")))

    (unless pg/is-termux
      (setq org-agenda-custom-commands ; Custom org-agenda commands
            '(("d" "Dashboard"
               ((agenda "" ((org-deadline-warning-days 7)))
                (todo "TODO"
                      ((org-agenda-overriding-header "Tasks")))
                (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Tasks")))))

              ("Z" "TODOs"
               ((todo "TODO"
                      ((org-agenda-overriding-header "Todos")))))

              ("m" "Misc" tags-todo "other")

              ("s" "Schedule" agenda ""
               ((org-agenda-files '("~/Documents/Org/Agenda/Schedule-S5-summer.org")))
               ("~/Documents/Schedule-S5-summer.pdf"))

              ("w" "Work Status"
               ((todo "WAIT"
                      ((org-agenda-overriding-header "Waiting")
                       (org-agenda-files org-agenda-files)))
                (todo "REVIEW"
                      ((org-agenda-overriding-header "In Review")
                       (org-agenda-files org-agenda-files)))
                (todo "HOLD"
                      ((org-agenda-overriding-header "On Hold")
                       (org-agenda-todo-list-sublevels nil)
                       (org-agenda-files org-agenda-files)))
                (todo "ACTIVE"
                      ((org-agenda-overriding-header "Active")
                       (org-agenda-files org-agenda-files)))
                (todo "COMPLETED"
                      ((org-agenda-overriding-header "Completed")
                       (org-agenda-files org-agenda-files)))
                (todo "CANC"
                      ((org-agenda-overriding-header "Cancelled")
                       (org-agenda-files org-agenda-files))))))))

    (unless pg/is-termux
      (setq org-capture-templates
            `(("t" "Tasks / Projects")
              ("tt" "Task" entry (file+olp "~/Documents/Org/Agenda/Tasks.org" "Active")
               "* TODO %?\n  DEADLINE: %U\n  %a\n  %i" :empty-lines 1)

              ("j" "Meetings")
              ("jm" "Meeting" entry (file+olp "~/Documents/Org/Agenda/Tasks.org" "Waiting")
               "* TODO %? \n SCHEDULED: %U\n" :empty-lines 1)

              ("m" "Email Workflow")
              ("mr" "Follow Up" entry (file+olp "~/Documents/Org/Agenda/Mail.org" "Follow up")
               "* TODO %a\nDEADLINE: %U%?\n %i" :empty-lines 1))))

    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

    (setq org-agenda-exporter-settings
          '((ps-left-header (list 'org-agenda-write-buffer-name))
            (ps-right-header
             (list "/pagenumberstring load"
                   (lambda () (format-time-string "%d/%m/%Y"))))
            (ps-font-size '(12 . 11))       ; Lanscape . Portrait
            (ps-top-margin 55)
            (ps-left-margin 35)
            (ps-right-margin 30)))
    (unless pg/is-termux
      (setq org-plantuml-jar-path "~/bin/plantuml.jar"))
    :custom

    (org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                            (vm-imap . vm-visit-imap-folder-other-frame)
                            (gnus . org-gnus-no-new-news)
                            (file . find-file)
                            (wl . wl-other-frame))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-org"

#+end_src

*** Package | org-appear

Toggles visibility of emphasis markers.

#+begin_src emacs-lisp

  (use-package org-appear
    :straight nil
    :hook (org-mode . org-appear-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-org-appear"

#+end_src

*** Package | org-bullets

Customizes the heading bullets.

#+begin_src emacs-lisp

  (use-package org-bullets
    :straight nil
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-org-bullets"

#+end_src

*** Package | org-tree-slide

Allows for creation of slideshow presentations in emacs with org mode. The ~org-beamer-export-to-pdf~ command can be used to export the presentation as a pdf file - it requires ~pdflatex~. More detail [[https://orgmode.org/worg/exporters/beamer/tutorial.html][here]].

#+begin_src emacs-lisp

  (defun pg/diminish-all ()
    (diminish 'which-key-mode)
    (diminish 'org-indent-mode)
    (diminish 'auto-revert-mode)
    (diminish 'buffer-face-mode)
    (diminish 'visual-line-mode))

  (defun pg/presentation-setup ()
    (org-display-inline-images)
    (pg/diminish-all)
    (setq-local doom-modeline-minor-modes t)
    (setq-local org-format-latex-options (plist-put org-format-latex-options :scale 2.5))
    (setq-local face-remapping-alist '((default (:height 1.25) default)
                                       (header-line (:height 4.5) variable-pitch)
                                       (variable-pitch (:height 1.25) variable-pitch)
                                       (org-table (:height 1.5) org-table)
                                       (org-verbatim (:height 1.5) org-verbatim)
                                       (org-code (:height 1.5) org-code)
                                       (org-block (:height 1.5) org-block)))
    (variable-pitch-mode 1))

  (defun pg/presentation-end ()
    (variable-pitch-mode 0)
    (setq-local doom-modeline-minor-modes nil)
    (setq-local org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
    (org-latex-preview)
    (setq-local face-remapping-alist '((default variable-pitch default))))

  (use-package org-tree-slide
    :straight nil
    :hook (((org-tree-slide-before-move-next org-tree-slide-before-move-previous) . org-latex-preview)
           (org-tree-slide-play . pg/presentation-setup)
           (org-tree-slide-stop . pg/presentation-end))
    :after org
    :bind*
    (:map org-tree-slide-mode-map
          ("C-j" . org-tree-slide-move-next-tree)
          ("C-k" . org-tree-slide-move-previous-tree))
    :config
    ;; (unbind-key "<normal-state> C-j" 'org-mode-map)
    ;; (unbind-key "<normal-state> C-k" 'org-mode-map)
    ;; (unbind-key "C->" 'org-tree-slide-mode-map)
    ;; (unbind-key "C-<" 'org-tree-slide-mode-map)
    :custom
    (org-tree-slide-activate-message "Presentation started")
    (org-tree-slide-deactivate-message "Presentation ended")
    (org-tree-slide-breadcrumbs " > ")
    (org-tree-slide-header t)
    (org-image-actual-width nil))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-org-tree-slide"

#+end_src

*** Package | ox-reveal

#+begin_src emacs-lisp

  (use-package ox-reveal
    :straight nil
    :disabled
    :custom
    (org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-ox-reveal"

#+end_src

*** Package | org-notify

Handles notifications of scheduled tasks.

#+begin_src emacs-lisp

  (use-package org-notify
    :straight t
    :after org
    :custom
    (user-mail-address "philippe.gabriel.1@umontreal.ca")
    :config
    (org-notify-start)
    (setq org-notify-map nil)
    (org-notify-add 'default '(:time "1w" :actions -notify/window :period "1h" :duration 5))
    (org-notify-add 'meeting '(:time "1w" :actions -email :period "1d")))

  ;; (org-notify-add 'appt
  ;;                 '(:time "-1s" :period "20s" :duration 10 :actions (-message -ding))
  ;;                 '(:time "15m" :period "2m" :duration 100 :actions -notify)
  ;;                 '(:time "2h" :period "5m" :actions -message)
  ;;                 '(:time "3d" :actions -email))
  ;;

#+end_src

*** Package | org-mime

Allows for editing an email in org mode

#+begin_src emacs-lisp

  (use-package org-mime
    :straight nil
    :after org-msg)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-org-mime"

#+end_src

*** Package | org-msg

Allows for markup language when composing email

#+begin_src emacs-lisp

  (setq mail-user-agent 'mu4e-user-agent)
  (use-package org-msg
    :straight nil
    :after mu4e
    :custom
    (org-msg-options "html-postamble:nil toc:nil author:nil num:nil \\n:t")
    (org-msg-startup "indent inlineimages hidestars")
    (org-msg-greeting-fmt "\nBonjour/Hi%s,\n\n")
    ;; (org-msg-recipient-names '(("user@domain.com" . "Name")))
    (org-msg-greeting-name-limit 3)
    (org-msg-default-alternatives '((new . (text utf-8 html org))
                                    (reply-to-html . (text org html))
                                    (reply-to-text . (text org))))
    (org-message-convert-citation t)
    (org-msg-signature (concat "\n\nCordialement/Regards,\n\n*--*\n" mu4e-compose-signature))
    :config
    (org-msg-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-org-msg"

#+end_src

*** Package | org-roam

Helps with note-taking strategies.

#+begin_src emacs-lisp

  (unless pg/is-termux
    (use-package org-roam
      :straight nil
      :custom
      (org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
      (org-roam-directory "~/Documents/Notes")
      (org-roam-capture-templates
       '(("d" "default" plain
          "%?"
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+STARTUP: latexpreview inlineimages\n#+date: %U\n")
          :unnarrowed t)
         ("1" "web tech" plain
          "%?"
          :if-new (file+head "IFT-3225/notes/%<%Y%m%d%H%M%S>-${slug}.org"
                             "#+title: ift3225-${title}\n#+STARTUP: latexpreview inlineimages\n#+date: %U\n")
          :unnarrowed t)
         ("2" "economy" plain
          "%?"
          :if-new (file+head "ECN-1000/notes/%<%Y%m%d%H%M%S>-${slug}.org"
                             "#+title: ecn1000-${title}\n#+STARTUP: latexpreview inlineimages\n#+date: %U\n")
          :unnarrowed t)))
      :config
      (org-roam-setup)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-org-roam"

#+end_src

*** Package | org-fragtog

Allows display of latex fragments in org files.

#+begin_src emacs-lisp

  (use-package org-fragtog
    :straight nil
    :hook (org-mode . org-fragtog-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-org-fragtog"

#+end_src

*** Package | visual-fill-column

Allows line soft-wrap in org files.

#+begin_src emacs-lisp

  ;; Turns soft wrap on
  (defun pg/org-mode-visual-fill ()
    (setq visual-fill-column-width 150
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :straight nil
    :hook ((org-mode gfm-view-mode) . pg/org-mode-visual-fill))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-visual-fill-column"

#+end_src

*** UI customization

Various improvements to the UI look in org files.

#+begin_src emacs-lisp

  (font-lock-add-keywords 'org-mode ; Replace '-' with bullets
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region
                                           (match-beginning 1) (match-end 1) "•"))))))

  (require 'org-indent) ; Changes some org structures to fixed pitch
  (set-face-attribute 'org-block nil :foreground nil :background "gray5" :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :foreground "orange" :inherit 'fixed-pitch)
  (set-face-attribute 'org-verbatim nil :foreground "green" :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :foreground "thistle3" :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  (dolist (face '((org-level-1 . 1.2) ; Sets font for variable-pitch text
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "DejaVu Sans" :weight 'regular :height (cdr face)))

#+end_src

*** Code blocks

Customizes behaviour of code blocks. Some useful constructs to know:
- ~#+PROPERTY: header-args: emacs-lisp~ - Sets a property to code blocks to have their header args be defined as indicated.
- ~#+NAME: code-block-name~ - Gives a name to a code block.
- ~:noweb yes/no~ - Used for source blocks to allow them to use values outputted by other source blocks.
- ~:mkdir p yes/no~ - Allows code blocks to create directories.

#+begin_src emacs-lisp

  (with-eval-after-load 'org ; Defer the body code until org is loaded
    (org-babel-do-load-languages ; Loads languages to be executed by org-babel
     'org-babel-load-languages '((emacs-lisp . t)
                                 (java . t)
                                 (shell . t)
                                 (plantuml . t)
                                 ;; (jupyter . t)
                                 (python . t)))

    (setq org-confirm-babel-evaluate nil)

    (require 'org-tempo) ; Allows defined snippets to expand into appropriate code blocks
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("java" . "src java"))
    (add-to-list 'org-structure-template-alist '("als" . "src alloy"))
    (add-to-list 'org-structure-template-alist '("puml" . "src plantuml"))
    (add-to-list 'org-structure-template-alist '("vhd" . "src vhdl"))
    (add-to-list 'org-structure-template-alist '("asm" . "src mips"))
    (add-to-list 'org-structure-template-alist '("cc" . "src c"))
    (add-to-list 'org-structure-template-alist '("smv" . "src smv"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("sql" . "src sql"))

    (add-to-list 'org-src-lang-modes '("als" . alloy))
    (add-to-list 'org-src-lang-modes '("smv" . nusmv))
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml)))

#+end_src

*** Auto-tangling configuration files

Allows automatic tangling on save of these configuration files.

#+begin_src emacs-lisp

  (defun pg/org-babel-tangle-config () ; Automatic tangle of emacs config file
    ;; (when (string-equal (file-name-directory (buffer-file-name))
    ;;                     (expand-file-name "~/.emacs.d/"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda ()
                             (add-hook 'after-save-hook #'pg/org-babel-tangle-config)))

#+end_src
 
*** Pomodoro timer

Custom pomodoro timer

#+begin_src emacs-lisp

  (defun pg/start-timer ()
    (interactive)
    (setq org-clock-sound "~/Misc/ding.wav")
    (pg/study-timer))

  (defun pg/start-with-break-timer () ;; For Minyi
    (interactive)
    (setq org-clock-sound "~/Misc/ding.wav")
    (pg/break-timer))

  (defun pg/stop-timer ()
    (interactive)
    (setq org-clock-sound nil)
    (remove-hook 'org-timer-done-hook #'pg/study-timer)
    (remove-hook 'org-timer-done-hook #'pg/break-timer)
    (org-timer-stop))

  (defun pg/study-timer ()
    (add-hook 'org-timer-done-hook #'pg/break-timer)
    (remove-hook 'org-timer-done-hook #'pg/study-timer)
    (setq org-timer-default-timer "1:00:00")
    (setq current-prefix-arg '(4)) ; Universal argument
    (call-interactively #'org-timer-set-timer))

  (defun pg/break-timer ()
    (add-hook 'org-timer-done-hook #'pg/study-timer)
    (remove-hook 'org-timer-done-hook #'pg/break-timer)
    (setq org-timer-default-timer "15:00")
    (setq current-prefix-arg '(4)) ; Universal argument
    (call-interactively #'org-timer-set-timer))

#+end_src

** Viewers

*** Package | doc-view

#+begin_src emacs-lisp

  (use-package doc-view
    :straight nil
    :mode ("\\.djvu\\'" . doc-view-mode))

#+end_src

*** Package | pdf-tools

Allows for viewing of pdfs.

#+begin_src emacs-lisp

  (use-package pdf-tools
    :straight nil
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :custom
    (pdf-misc-print-programm "/usr/bin/lpr")
    (pdf-misc-print-programm-args '("-o sides=two-sided-long-edge")))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-pdf-tools"

#+end_src

*** Package | djvu

#+begin_src emacs-lisp

  (use-package djvu
    :straight nil)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-djvu"

#+end_src

*** Package | ps-print

Allows for printing of emacs buffers.

#+begin_src emacs-lisp

  (use-package ps-print
    :straight nil
    :bind
    (:map pdf-view-mode-map
          ("C-c C-p" . pdf-misc-print-document))
    :config
    (require 'pdf-misc)
    :custom ;; Printing double-sided
    (ps-lpr-switches '("-o sides=two-sided-long-edge"))
    (ps-spool-duplex t))

#+end_src

*** Package | openwith

#+begin_src emacs-lisp

  (unless pg/is-termux
    (use-package openwith
      :straight nil
      :custom
      (large-file-warning-threshold nil)
      :config
      (setq openwith-associations
            (list
             (list
              (openwith-make-extension-regexp '("mpg" "mpeg" "mp4" "avi" "wmv" "mov" "flv" "ogm" "ogg" "mkv"))
              "mpv"
              '(file))
             (list
              (openwith-make-extension-regexp '("odt"))
              "libreoffice"
              '(file))))
      (openwith-mode 1)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-openwith"

#+end_src

** Bible

*** Package | dtk

#+begin_src emacs-lisp

  (use-package dtk
    :commands dtk
    :after evil-collection
    :config
    (evil-collection-define-key 'normal 'dtk-mode-map
      (kbd "C-j") 'dtk-forward-verse
      (kbd "C-k") 'dtk-backward-verse
      (kbd "C-f") 'dtk-forward-chapter
      (kbd "C-b") 'dtk-backward-chapter
      "q" 'dtk-quit
      "c" 'dtk-clear-dtk-buffer
      "s" 'dtk-search)
    :hook
    (dtk-mode . (lambda () (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)))))
    :custom
    (dtk-module "KJV")
    (dtk-module-category "Biblical Texts")
    (dtk-word-wrap t))

#+end_src

** Finances

*** Package | ledger-mode

#+begin_src emacs-lisp

  (use-package ledger-mode
    :straight nil
    :mode "\\.dat\\'"
    :hook (ledger-mode . company-mode)
    :custom
    (ledger-reconcile-default-commodity "CAD")
    (ledger-binary-path "/usr/bin/ledger")
    (ledger-clear-whole-transaction t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "ledger"
  "emacs-ledger-mode"

#+end_src

** Social

*** Package | slack

#+begin_src emacs-lisp

  (use-package slack
    :straight nil
    :commands slack-start
    :hook (slack-mode . corfu-mode)
    :config
    (slack-register-team :name "ift6755"
                         :default t
                         :token (pg/lookup-password :host "ift6755.slack.com"
                                                    :user "philippe.gabriel.1@umontreal.ca")
                         :cookie (pg/lookup-password :host "ift6755.slack.com"
                                                     :user "philippe.gabriel.1@umontreal.ca^cookie")
                         :subscribed-channels '((general questions random))
                         :modeline-enabled t)
    :custom
    (slack-buffer-emojify t)
    (slack-prefer-current-team t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-slack"

#+end_src

*** Package | sx

#+begin_src emacs-lisp

  (use-package sx
    :straight nil
    :commands sx-search)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-sx"

#+end_src

** Miscellaneous

*** Package | wttrin

#+begin_src emacs-lisp

  (defun pg/wttrin-fetch-raw-string (query)
    "Get the weather information based on your QUERY."
    (let ((url-user-agent "curl"))
      (add-to-list 'url-request-extra-headers wttrin-default-accept-language)
      (with-current-buffer
          (url-retrieve-synchronously
           (concat "http://wttr.in/" query)
           (lambda (status) (switch-to-buffer (current-buffer))))
        (decode-coding-string (buffer-string) 'utf-8))))

  (use-package wttrin
    :straight nil
    :commands wttrin
    :config
    (fset #'wttrin-fetch-raw-string #'pg/wttrin-fetch-raw-string)
    :custom
    (wttrin-default-cities '("montreal"))
    (wttrin-default-accept-language '("Accept-Language" . "en-US")))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-wttrin"

#+end_src

*** Package | emms

#+begin_src emacs-lisp

  (defun pg/start-mpd ()
    "Start MPD, connects to it and syncs the metadata cache."
    (interactive)
    (shell-command "mpd")
    (pg/update-mpd-db)
    (emms-player-mpd-connect)
    (emms-cache-set-from-mpd-all)
    (emms-smart-browse)
    (message "MPD Started!"))

  (defun pg/kill-mpd ()
    "Stops playback and kill the music daemon."
    (interactive)
    (emms-stop)
    (call-process "killall" nil nil nil "mpd")
    (message "MPD Killed!"))

  (defun pg/update-mpd-db ()
    "Updates the MPD database synchronously."
    (interactive)
    (call-process "mpc" nil nil nil "update")
    (message "MPD Database Updated!"))

  (defun pg/convert-number-to-relative-string (number)
    "Convert an integer NUMBER to a prefixed string.

  The prefix is either - or +. This is useful for mpc commands
  like volume and seek."
    (let ((number-string (number-to-string number)))
      (if (> number 0)
          (concat "+" number-string)
        number-string)))

  (defun pg/call-mpc (destination mpc-args)
    "Call mpc with `call-process'.

  DESTINATION will be passed to `call-process' and MPC-ARGS will be
  passed to the mpc program."
    (if (not (listp mpc-args))
        (setq mpc-args (list mpc-args)))
    (apply 'call-process "mpc" nil destination nil mpc-args))

  (defun pg/message-current-volume ()
    "Return the current volume."
    (message "%s"
             (with-temp-buffer
               (pg/call-mpc t "volume")
               (delete-char -1)  ;; delete trailing \n
               (buffer-string))))

  (defun pg/emms-volume-amixer-change (amount)
    "Change amixer master volume by AMOUNT."
    (let ((volume-change-string (pg/convert-number-to-relative-string amount)))
      (pg/call-mpc nil (list "volume" volume-change-string)))
    (pg/message-current-volume))

  (unless pg/is-termux
    (use-package emms
      :straight nil
      :config
      (require 'emms-setup)
      (emms-all)
      (emms-player-mpd-connect)
      (setq emms-info-functions '(emms-info-mpd)
            emms-player-list '(emms-player-mpd))
      (add-hook 'emms-playlist-cleared-hook 'emms-player-mpd-clear)
      (fset #'emms-volume-amixer-change #'pg/emms-volume-amixer-change)
      :custom
      (emms-source-file-default-directory "~/Music/")
      (emms-seek-seconds 5)
      (emms-volume-change-amount 5)
      :bind
      ("<XF86AudioPrev>" . emms-previous)
      ("<XF86AudioNext>" . emms-next)
      ("<XF86AudioPlay>" . emms-pause)
      ("<XF86AudioStop>" . emms-stop)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-emms"

#+end_src

*** Package | sudoku

#+begin_src emacs-lisp

  (use-package sudoku
    :straight t
    :custom
    (sudoku-style 'unicode)
    (sudoku-level 'hard))

#+end_src

*** Package | sokoban

#+begin_src emacs-lisp

  (use-package sokoban
    :straight t
    :bind
    (:map sokoban-mode-map
          ("<normal-state> h" . sokoban-move-left)
          ("<normal-state> l" . sokoban-move-right)
          ("<normal-state> k" . sokoban-move-up)
          ("<normal-state> j" . sokoban-move-down)))

#+end_src

** Keybindings

*** Package | evil

Allows usage of vim-like keybindings for some modes in emacs.

#+begin_src emacs-lisp

  ;; Function for modes that should start in emacs mode
  (defun pg/evil-hook()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
    :straight nil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-want-fine-undo t)
    (evil-mode 1)
    :hook (evil-mode . pg/evil-hook)
    :bind
    (:map evil-insert-state-map
          ("C-l" . right-word)
          ("C-h" . left-word))
    :custom
    (evil-undo-system 'undo-fu)
    :config
    (evil-set-register ?j [?f ?  ?s return escape]) ;; break at point

    ;; (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    (unbind-key "C-k" 'evil-ex-completion-map)
    (unbind-key "C-k" 'evil-ex-search-keymap)
    (unbind-key "C-k" 'evil-insert-state-map)
    (unbind-key "C-k" 'evil-replace-state-map)
    (unbind-key "C-p" 'evil-normal-state-map)
    ;; Visual line motions outside visual-line mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (with-eval-after-load 'evil
    (defalias #'forward-evil-word #'forward-evil-symbol)
    ;; make evil-search-word look for symbol rather than word boundaries
    (setq-default evil-symbol-word-search t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-evil"

#+end_src

*** Package | evil-collection

#+begin_src emacs-lisp

  (use-package evil-collection
    :straight nil
    :after evil
    :diminish evil-collection-unimpaired-mode
    :config
    (evil-collection-init))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-evil-collection"

#+end_src

*** Package | hydra

Allows the creation of keymaps for related commands and the ability to repeat terminal commands. Works in conjunction with the ~general~ package.

#+begin_src emacs-lisp

  (use-package hydra
    :straight nil
    :defer t)

  (defhydra hydra-text-scale (:timeout 5)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out"))

  (defhydra hydra-window-scale (:timeout 5)
    "scale window"
    ("<" evil-window-decrease-width "width dec")
    (">" evil-window-increase-width "width inc")
    ("-" evil-window-decrease-height "height dec")
    ("+" evil-window-increase-height "height inc")
    ("=" balance-windows "balance"))

  (defhydra hydra-x-window-scale (:timeout 5)
    "scale x window"
    ("<" (exwm-layout-shrink-window-horizontally 50) "width dec")
    (">" (exwm-layout-enlarge-window-horizontally 50) "width inc")
    ("-" (exwm-layout-shrink-window 50) "height dec")
    ("+" (exwm-layout-enlarge-window 50) "height inc")
    ("w" exwm-floating-toggle-floating "float toggle")
    ("f" exwm-layout-set-fullscreen "fullscreen"))

  (defhydra hydra-window-move (:timeout 5)
    "move window"
    ("h" windmove-left "left")
    ("l" windmove-right "right")
    ("j" windmove-down "down")
    ("k" windmove-up "up"))

  (defhydra hydra-window-swap (:timeout 5)
    "swap window"
    ("h" windmove-swap-states-left "left")
    ("l" windmove-swap-states-right "right")
    ("j" windmove-swap-states-down "down")
    ("k" windmove-swap-states-up "up"))

  (defhydra hydra-window-change (:timeout 5)
    "change window"
    ("l" next-buffer "right")
    ("h" previous-buffer "left"))

  (defhydra hydra-eyebrowse-switch (:timeout 5)
    "switch workspace"
    ("l" eyebrowse-next-window-config "next")
    ("h" eyebrowse-prev-window-config "prev"))

  (defhydra hydra-perspective-switch (:timeout 5)
    "switch perspective"
    ("l" persp-next "next")
    ("h" persp-prev "prev"))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-hydra"

#+end_src

*** Package | general

Allows for general custom keybindings definition to create own set of various keybindings.

#+begin_src emacs-lisp

  (use-package general
    :straight nil
    :after evil
    :config
    (general-create-definer pg/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (pg/leader-keys

      ;; Chat
      "c" '(:ignore t :which-key "social")
      "cs" '(:ignore t :which-key "slack")
      "css" '(slack-start :which-key "start")
      "csc" '(slack-channel-select :which-key "channels")
      "csm" '(slack-im-select :which-key "message")
      "csr" '(slack-message-add-reaction :which-key "react")

      ;; Mail
      "m" '(:ignore t :which-key "email")
      "md" '(mu4e :which-key "dashboard")
      "mo" '(org-mime-edit-mail-in-org-mode :which-key "org edit")
      "mc" '(mu4e-compose-new :which-key "compose")


      ;; Scaling
      "s" '(:ignore t :which-key "scaling")
      "st" '(hydra-text-scale/body :which-key "scale text")
      "sw" '(hydra-window-scale/body :which-key "scale window")
      "sx" '(hydra-x-window-scale/body :which-key "scale x window")


      ;; Window navigations
      "w" '(:ignore t :which-key "window")
      "wm" '(hydra-window-move/body :which-key "move")
      "ws" '(hydra-window-swap/body :which-key "swap")
      "wc" '(hydra-window-change/body :which-key "change")

      "wu" '(winner-undo :which-key "undo config")
      "wr" '(winner-redo :which-key "redo config")

      "wp" '(:ignore t :which-key "persp")
      "wpc" '(persp-switch :which-key "create")
      "wps" '(hydra-perspective-switch/body :which-key "switch")
      "wpa" '(persp-add-buffer :which-key "add buf")
      "wpu" '(persp-set-buffer :which-key "set buf")
      "wpk" '(persp-kill :which-key "remove")

      "wt" '(:ignore t :which-key "tabs")
      "wtt" '(tab-new :which-key "create")
      "wtw" '(tab-close :which-key "close")
      "wtr" '(tab-rename :which-key "name")
      "wts" '(tab-switch :which-key "switch")
      "wtu" '(tab-undo :which-key "undo")


      ;; Project management
      "p" '(:ignore t :which-key "project")
      "ps" '(pg/eshell :which-key "eshell")
      "pg" '(:ignore t :which-key "git")
      "pgs" '(magit-status :which-key "status")
      "pgc" '(magit-clone :which-key "clone")
      "pp" '(:ignore t :which-key "projectile")
      "ppr" '(projectile-run-project :which-key "run")
      "ppc" '(projectile-compile-project :which-key "compile")
      "ppf" '(projectile-find-file :which-key "find file")


      ;; Lsp mode
      "l" '(:ignore t :which-key "lsp")

      "ld" '(:ignore t :which-key "doc")
      "ldf" '(lsp-ui-doc-focus-frame :which-key "focus frame")
      "ldu" '(lsp-ui-doc-unfocus-frame :which-key "unfocus frame")

      "li" '(:ignore t :which-key "info")
      "lit" '(treemacs :which-key "tree")
      "lio" '(lsp-treemacs-symbols :which-key "outline")
      "lie" '(lsp-treemacs-errors-list :which-key "errors")


      ;; Org mode
      "o" '(:ignore t :which-key "org")

      "ot" '(:ignore t :which-key "pomodoro")
      "ott" '(pg/start-timer :which-key "start")
      "otb" '(pg/start-with-break-timer :which-key "break")
      "ots" '(pg/stop-timer :which-key "stop")
      "otp" '(org-timer-pause-or-continue :which-key "pause")

      "os" '(org-screenshot :which-key "screenshot")
      "oc" '(org-capture :which-key "capture")
      "op" '(org-tree-slide-mode :which-key "slide")

      "ol" '(:ignore t :which-key "links")
      "olo" '(org-open-at-point :which-key "open")
      "olb" '(org-mark-ring-goto :which-key "back")

      "on" '(:ignore t :which-key "notes")
      "onl" '(org-roam-buffer-toggle :which-key "links")
      "onf" '(org-roam-node-find :which-key "find/create")
      "oni" '(org-roam-node-insert :which-key "insert/create")
      "ons" '(org-id-get-create :which-key "create subheading")))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-general"

#+end_src

* Runtime Performance

Here we lower back the garbage collector threshold to keep better control over memory usage.

#+begin_src emacs-lisp

  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src

* Emacs Profile

#+begin_src scheme :tangle ~/.config/guix/manifests/emacs.scm :noweb yes

  (specifications->manifest
   '(;;"emacs-next"
     "emacs"
     <<packages>>))

#+end_src
